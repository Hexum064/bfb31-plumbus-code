
attiny-meeseeks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  00803802  00803802  00000b26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aad  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c8e  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e93  00000000  00000000  00006483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00007318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ba7  00000000  00000000  000076ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000704  00000000  00000000  00009253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00009957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_8>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e0 e9       	ldi	r30, 0x90	; 144
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	2a e3       	ldi	r18, 0x3A	; 58
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 32       	cpi	r26, 0x22	; 34
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e6 02 	call	0x5cc	; 0x5cc <main>
  b2:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <clk_init>:
	eeprom_write_word((uint16_t *)3, address_offset_flags);
}

void get_offset_flags()
{
	address_offset_flags = eeprom_read_word((uint16_t *)3);
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	84 bf       	out	0x34, r24	; 52
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
  c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
  c6:	88 23       	and	r24, r24
  c8:	e1 f3       	breq	.-8      	; 0xc2 <clk_init+0x8>
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	84 bf       	out	0x34, r24	; 52
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  d4:	08 95       	ret

000000d6 <i2c_init>:
  d6:	e0 e1       	ldi	r30, 0x10	; 16
  d8:	f8 e0       	ldi	r31, 0x08	; 8
  da:	84 e2       	ldi	r24, 0x24	; 36
  dc:	84 87       	std	Z+12, r24	; 0x0c
  de:	10 82       	st	Z, r1
  e0:	83 ec       	ldi	r24, 0xC3	; 195
  e2:	81 87       	std	Z+9, r24	; 0x09
  e4:	08 95       	ret

000000e6 <spi_init>:
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	8a e1       	ldi	r24, 0x1A	; 26
  ec:	81 83       	std	Z+1, r24	; 0x01
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	82 83       	std	Z+2, r24	; 0x02
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	85 83       	std	Z+5, r24	; 0x05
  f6:	e0 e2       	ldi	r30, 0x20	; 32
  f8:	f8 e0       	ldi	r31, 0x08	; 8
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	80 83       	st	Z, r24
  fe:	11 82       	std	Z+1, r1	; 0x01
 100:	08 95       	ret

00000102 <spi_disable>:
 102:	8a e1       	ldi	r24, 0x1A	; 26
 104:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__RODATA_PM_OFFSET__+0x7f8402>
 108:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
 10c:	08 95       	ret

0000010e <play_timer_init>:
 10e:	e0 e0       	ldi	r30, 0x00	; 0
 110:	fa e0       	ldi	r31, 0x0A	; 10
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	82 87       	std	Z+10, r24	; 0x0a
 118:	08 95       	ret

0000011a <play_timer_start>:
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	fa e0       	ldi	r31, 0x0A	; 10
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	82 ee       	ldi	r24, 0xE2	; 226
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	86 a3       	std	Z+38, r24	; 0x26
 128:	97 a3       	std	Z+39, r25	; 0x27
 12a:	08 95       	ret

0000012c <play_timer_stop>:
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	10 82       	st	Z, r1
 132:	16 a2       	std	Z+38, r1	; 0x26
 134:	17 a2       	std	Z+39, r1	; 0x27
 136:	08 95       	ret

00000138 <vref_init>:
 138:	e0 ea       	ldi	r30, 0xA0	; 160
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	83 e2       	ldi	r24, 0x23	; 35
 13e:	80 83       	st	Z, r24
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	81 83       	std	Z+1, r24	; 0x01
 144:	08 95       	ret

00000146 <dac_init>:
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__RODATA_PM_OFFSET__+0x7f86a0>
 152:	08 95       	ret

00000154 <adc_init>:
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	f6 e0       	ldi	r31, 0x06	; 6
 15e:	11 82       	std	Z+1, r1	; 0x01
 160:	12 82       	std	Z+2, r1	; 0x02
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	86 83       	std	Z+6, r24	; 0x06
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <sys_timer_init>:
 16c:	e0 e4       	ldi	r30, 0x40	; 64
 16e:	fa e0       	ldi	r31, 0x0A	; 10
 170:	11 82       	std	Z+1, r1	; 0x01
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	85 83       	std	Z+5, r24	; 0x05
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 83       	st	Z, r24
 17a:	88 e8       	ldi	r24, 0x88	; 136
 17c:	93 e1       	ldi	r25, 0x13	; 19
 17e:	84 87       	std	Z+12, r24	; 0x0c
 180:	95 87       	std	Z+13, r25	; 0x0d
 182:	08 95       	ret

00000184 <record_button_init>:
 184:	e0 e2       	ldi	r30, 0x20	; 32
 186:	f4 e0       	ldi	r31, 0x04	; 4
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	82 83       	std	Z+2, r24	; 0x02
 18c:	83 8b       	std	Z+19, r24	; 0x13
 18e:	08 95       	ret

00000190 <leds_init>:
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
 196:	08 95       	ret

00000198 <leds_set>:
 198:	83 ff       	sbrs	r24, 3
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <leds_set+0xc>
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <leds_set+0x12>
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
 1aa:	82 ff       	sbrs	r24, 2
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <leds_set+0x1e>
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <leds_set+0x24>
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
 1bc:	81 ff       	sbrs	r24, 1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <leds_set+0x30>
 1c0:	94 e0       	ldi	r25, 0x04	; 4
 1c2:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <leds_set+0x36>
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
 1ce:	80 ff       	sbrs	r24, 0
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <leds_set+0x42>
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
 1d8:	08 95       	ret
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
 1e0:	08 95       	ret

000001e2 <spi_write>:
 1e2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 1e6:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <spi_write+0x4>
 1ee:	08 95       	ret

000001f0 <spi_read>:
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 1f6:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 1fa:	08 95       	ret

000001fc <CS_En>:
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
 202:	08 95       	ret

00000204 <CS_Dis>:
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
 20a:	08 95       	ret

0000020c <mem_busy_wait>:
 20c:	cf 93       	push	r28
 20e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 218:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <spi_read>
 21c:	c8 2f       	mov	r28, r24
 21e:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 222:	c0 fd       	sbrc	r28, 0
 224:	f4 cf       	rjmp	.-24     	; 0x20e <mem_busy_wait+0x2>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <read_slot_size>:
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	c8 2f       	mov	r28, r24
 230:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 234:	8b e0       	ldi	r24, 0x0B	; 11
 236:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 252:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <spi_read>
 256:	c8 2f       	mov	r28, r24
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <spi_read>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	38 2f       	mov	r19, r24
 262:	c2 0f       	add	r28, r18
 264:	d3 1f       	adc	r29, r19
 266:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 26a:	ce 01       	movw	r24, r28
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <get_sound_byte>:
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	18 2f       	mov	r17, r24
 27a:	d6 2f       	mov	r29, r22
 27c:	c4 2f       	mov	r28, r20
 27e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 282:	8b e0       	ldi	r24, 0x0B	; 11
 284:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 28e:	8d 2f       	mov	r24, r29
 290:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 2a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <spi_read>
 2a4:	c8 2f       	mov	r28, r24
 2a6:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 2aa:	8c 2f       	mov	r24, r28
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	08 95       	ret

000002b4 <play_sound>:
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
 2b8:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_init>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0c 2e       	mov	r0, r28
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <play_sound+0x14>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <play_sound+0x10>
 2cc:	20 91 1c 38 	lds	r18, 0x381C	; 0x80381c <address_offset_flags>
 2d0:	30 91 1d 38 	lds	r19, 0x381D	; 0x80381d <address_offset_flags+0x1>
 2d4:	82 23       	and	r24, r18
 2d6:	93 23       	and	r25, r19
 2d8:	89 2b       	or	r24, r25
 2da:	09 f0       	breq	.+2      	; 0x2de <play_sound+0x2a>
 2dc:	c0 5f       	subi	r28, 0xF0	; 240
 2de:	c0 93 1a 38 	sts	0x381A, r28	; 0x80381a <current_slot>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <sound_playing>
 2e8:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <current_slot>
 2ec:	0e 94 15 01 	call	0x22a	; 0x22a <read_slot_size>
 2f0:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <sound_len>
 2f4:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <sound_len+0x1>
 2f8:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <sound_len>
 2fc:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <sound_len+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	61 f4       	brne	.+24     	; 0x31c <play_sound+0x68>
 304:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <sound_playing>
 308:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <sound_len>
 30c:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <sound_len+0x1>
 310:	0e 94 81 00 	call	0x102	; 0x102 <spi_disable>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 31a:	06 c0       	rjmp	.+12     	; 0x328 <play_sound+0x74>
 31c:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <sound_index>
 320:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <sound_index+0x1>
 324:	0e 94 8d 00 	call	0x11a	; 0x11a <play_timer_start>
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <enable_write>:
 32c:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 330:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 33a:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 33e:	08 95       	ret

00000340 <erase_slot>:
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
 344:	0e 94 96 01 	call	0x32c	; 0x32c <enable_write>
 348:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 34c:	88 ed       	ldi	r24, 0xD8	; 216
 34e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 364:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 368:	0e 94 06 01 	call	0x20c	; 0x20c <mem_busy_wait>
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <reset_record_slot_select>:
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 376:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <counting_record_reset>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 380:	08 95       	ret

00000382 <select_recording_slot>:
 382:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 38c:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <record_reset_count>
 390:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <record_reset_count+0x1>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <counting_record_reset>
 39a:	08 95       	ret

0000039c <start_next_page>:
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	c8 2f       	mov	r28, r24
 3a2:	d9 2f       	mov	r29, r25
 3a4:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 3a8:	0e 94 96 01 	call	0x32c	; 0x32c <enable_write>
 3ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 3b6:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 3ba:	80 5f       	subi	r24, 0xF0	; 240
 3bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 3c0:	8d 2f       	mov	r24, r29
 3c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <write_buffer>:
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	8c 01       	movw	r16, r24
 3dc:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <block_addr_to_write>
 3e0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <block_addr_to_write+0x1>
 3e4:	0e 94 ce 01 	call	0x39c	; 0x39c <start_next_page>
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
 3ec:	0a c0       	rjmp	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ee:	e0 91 20 3a 	lds	r30, 0x3A20	; 0x803a20 <buffer_to_write>
 3f2:	f0 91 21 3a 	lds	r31, 0x3A21	; 0x803a21 <buffer_to_write+0x1>
 3f6:	ec 0f       	add	r30, r28
 3f8:	fd 1f       	adc	r31, r29
 3fa:	80 81       	ld	r24, Z
 3fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	c0 17       	cp	r28, r16
 404:	d1 07       	cpc	r29, r17
 406:	98 f3       	brcs	.-26     	; 0x3ee <write_buffer+0x1c>
 408:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 40c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <block_addr_to_write>
 410:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <block_addr_to_write+0x1>
 414:	02 97       	sbiw	r24, 0x02	; 2
 416:	21 f4       	brne	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <block_addr_to_write>
 41c:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <block_addr_to_write+0x1>
 420:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <block_addr_to_write>
 424:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <block_addr_to_write+0x1>
 428:	93 95       	inc	r25
 42a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <block_addr_to_write>
 42e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <block_addr_to_write+0x1>
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	08 95       	ret

0000043c <write_recording_len>:
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	d8 2f       	mov	r29, r24
 442:	c9 2f       	mov	r28, r25
 444:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 448:	0e 94 96 01 	call	0x32c	; 0x32c <enable_write>
 44c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <CS_En>
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 456:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 45a:	80 5f       	subi	r24, 0xF0	; 240
 45c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 46c:	8d 2f       	mov	r24, r29
 46e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 472:	8c 2f       	mov	r24, r28
 474:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <spi_write>
 478:	0e 94 02 01 	call	0x204	; 0x204 <CS_Dis>
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <stop_recording>:
 482:	0e 94 06 01 	call	0x20c	; 0x20c <mem_busy_wait>
 486:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 48a:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 48e:	89 2b       	or	r24, r25
 490:	71 f0       	breq	.+28     	; 0x4ae <stop_recording+0x2c>
 492:	80 91 1e 39 	lds	r24, 0x391E	; 0x80391e <current_buffer>
 496:	90 91 1f 39 	lds	r25, 0x391F	; 0x80391f <current_buffer+0x1>
 49a:	80 93 20 3a 	sts	0x3A20, r24	; 0x803a20 <buffer_to_write>
 49e:	90 93 21 3a 	sts	0x3A21, r25	; 0x803a21 <buffer_to_write+0x1>
 4a2:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 4a6:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 4aa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <write_buffer>
 4ae:	0e 94 06 01 	call	0x20c	; 0x20c <mem_busy_wait>
 4b2:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <sound_len>
 4b6:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <sound_len+0x1>
 4ba:	0e 94 1e 02 	call	0x43c	; 0x43c <write_recording_len>
 4be:	0e 94 96 00 	call	0x12c	; 0x12c <play_timer_stop>
 4c2:	0e 94 81 00 	call	0x102	; 0x102 <spi_disable>
 4c6:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <recording>
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
 4d6:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 4da:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
 4de:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <rec_button_down>
 4e2:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <rec_button_down>
 4e6:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <counting_record_reset>
 4ea:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <rec_button_unreleased>
 4ee:	08 95       	ret

000004f0 <eeprom_init>:
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 25 05 	call	0xa4a	; 0xa4a <eeprom_read_byte>
 4f8:	81 3a       	cpi	r24, 0xA1	; 161
 4fa:	59 f0       	breq	.+22     	; 0x512 <eeprom_init+0x22>
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 41 05 	call	0xa82	; 0xa82 <eeprom_write_word>
 508:	61 ea       	ldi	r22, 0xA1	; 161
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <eeprom_write_byte>
 512:	08 95       	ret

00000514 <update_offset_flags>:
 514:	60 91 1c 38 	lds	r22, 0x381C	; 0x80381c <address_offset_flags>
 518:	70 91 1d 38 	lds	r23, 0x381D	; 0x80381d <address_offset_flags+0x1>
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 41 05 	call	0xa82	; 0xa82 <eeprom_write_word>
 524:	08 95       	ret

00000526 <start_recording>:
 526:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <start_recording+0xe>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	2a 95       	dec	r18
 536:	e2 f7       	brpl	.-8      	; 0x530 <start_recording+0xa>
 538:	20 91 1c 38 	lds	r18, 0x381C	; 0x80381c <address_offset_flags>
 53c:	30 91 1d 38 	lds	r19, 0x381D	; 0x80381d <address_offset_flags+0x1>
 540:	82 2b       	or	r24, r18
 542:	93 2b       	or	r25, r19
 544:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <address_offset_flags>
 548:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <address_offset_flags+0x1>
 54c:	0e 94 8a 02 	call	0x514	; 0x514 <update_offset_flags>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 556:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_init>
 55a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 55e:	80 5f       	subi	r24, 0xF0	; 240
 560:	0e 94 a0 01 	call	0x340	; 0x340 <erase_slot>
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
 56a:	22 e0       	ldi	r18, 0x02	; 2
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <block_addr_to_write>
 572:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <block_addr_to_write+0x1>
 576:	2e e1       	ldi	r18, 0x1E	; 30
 578:	38 e3       	ldi	r19, 0x38	; 56
 57a:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <current_buffer>
 57e:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <current_buffer+0x1>
 582:	20 e2       	ldi	r18, 0x20	; 32
 584:	39 e3       	ldi	r19, 0x39	; 57
 586:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <buffer_to_write>
 58a:	30 93 21 3a 	sts	0x3A21, r19	; 0x803a21 <buffer_to_write+0x1>
 58e:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <sound_len>
 592:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <sound_len+0x1>
 596:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <recording>
 59a:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <counting_record_reset>
 59e:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <blink_count>
 5a2:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <blink_count+0x1>
 5a6:	08 95       	ret

000005a8 <play_reset_flash>:
}

void play_reset_flash()
{
	for (uint8_t i = 0; i < 6; i++)
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <play_reset_flash+0x1e>
	{
		PORTC.OUTTGL = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
 5ac:	9f e0       	ldi	r25, 0x0F	; 15
 5ae:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <__RODATA_PM_OFFSET__+0x7f8447>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b2:	2f e3       	ldi	r18, 0x3F	; 63
 5b4:	3d e0       	ldi	r19, 0x0D	; 13
 5b6:	93 e0       	ldi	r25, 0x03	; 3
 5b8:	21 50       	subi	r18, 0x01	; 1
 5ba:	30 40       	sbci	r19, 0x00	; 0
 5bc:	90 40       	sbci	r25, 0x00	; 0
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <play_reset_flash+0x10>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <play_reset_flash+0x1a>
 5c2:	00 00       	nop
	address_offset_flags = eeprom_read_word((uint16_t *)3);
}

void play_reset_flash()
{
	for (uint8_t i = 0; i < 6; i++)
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	86 30       	cpi	r24, 0x06	; 6
 5c8:	88 f3       	brcs	.-30     	; 0x5ac <play_reset_flash+0x4>
	{
		PORTC.OUTTGL = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
		_delay_ms(100);
	}
}
 5ca:	08 95       	ret

000005cc <main>:

int main(void)
{
	cli();
 5cc:	f8 94       	cli
	clk_init();
 5ce:	0e 94 5d 00 	call	0xba	; 0xba <clk_init>
	play_timer_init();
 5d2:	0e 94 87 00 	call	0x10e	; 0x10e <play_timer_init>
	vref_init();
 5d6:	0e 94 9c 00 	call	0x138	; 0x138 <vref_init>
	dac_init();
 5da:	0e 94 a3 00 	call	0x146	; 0x146 <dac_init>
	adc_init();
 5de:	0e 94 aa 00 	call	0x154	; 0x154 <adc_init>
	sys_timer_init();
 5e2:	0e 94 b6 00 	call	0x16c	; 0x16c <sys_timer_init>
	
	sei();
 5e6:	78 94       	sei
	
	eeprom_init();
 5e8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <eeprom_init>
	i2c_init();
 5ec:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_init>
	leds_init();
 5f0:	0e 94 c8 00 	call	0x190	; 0x190 <leds_init>
	record_button_init();
 5f4:	0e 94 c2 00 	call	0x184	; 0x184 <record_button_init>

	//Test for reset here
	rec_button_down = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <rec_button_down>
	debounce_count = 0;
 5fe:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 602:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
	while(debounce_count < RESET_PER)
 606:	09 c0       	rjmp	.+18     	; 0x61a <main+0x4e>
	{
		if (PORTB.IN & PIN3_bm)
 608:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 60c:	83 ff       	sbrs	r24, 3
 60e:	05 c0       	rjmp	.+10     	; 0x61a <main+0x4e>
		{
			debounce_count = 0;
 610:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 614:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
			break;
 618:	07 c0       	rjmp	.+14     	; 0x628 <main+0x5c>
	record_button_init();

	//Test for reset here
	rec_button_down = 1;
	debounce_count = 0;
	while(debounce_count < RESET_PER)
 61a:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <debounce_count>
 61e:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <debounce_count+0x1>
 622:	88 38       	cpi	r24, 0x88	; 136
 624:	93 41       	sbci	r25, 0x13	; 19
 626:	80 f3       	brcs	.-32     	; 0x608 <main+0x3c>
			break;
		}
	}
	
	//Reset if conditions met
	if (debounce_count >= RESET_PER)
 628:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <debounce_count>
 62c:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <debounce_count+0x1>
 630:	88 38       	cpi	r24, 0x88	; 136
 632:	93 41       	sbci	r25, 0x13	; 19
 634:	40 f0       	brcs	.+16     	; 0x646 <main+0x7a>
	{
		address_offset_flags = 0;
 636:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <address_offset_flags>
 63a:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <address_offset_flags+0x1>
		update_offset_flags();
 63e:	0e 94 8a 02 	call	0x514	; 0x514 <update_offset_flags>
		play_reset_flash();
 642:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <play_reset_flash>
	}
	
	rec_button_down = 0;
 646:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <rec_button_down>
	debounce_count = 0;
 64a:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 64e:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
	
	//Debug out
	PORTA.DIRSET = PIN7_bm;
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>

    while (1) 
    {
		if (buff_len_to_write)
 658:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <buff_len_to_write>
 65c:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <buff_len_to_write+0x1>
 660:	89 2b       	or	r24, r25
 662:	51 f0       	breq	.+20     	; 0x678 <main+0xac>
		{
			write_buffer(buff_len_to_write);
 664:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <buff_len_to_write>
 668:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <buff_len_to_write+0x1>
 66c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <write_buffer>
			buff_len_to_write = 0;
 670:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <buff_len_to_write>
 674:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <buff_len_to_write+0x1>
		}
		
		if (blink_count > BLINK_TIME)
 678:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <blink_count>
 67c:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <blink_count+0x1>
 680:	85 36       	cpi	r24, 0x65	; 101
 682:	91 05       	cpc	r25, r1
 684:	b0 f0       	brcs	.+44     	; 0x6b2 <main+0xe6>
		{
			blink_count = 0;
 686:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <blink_count>
 68a:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <blink_count+0x1>
			if (blink_on)
 68e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <blink_on>
 692:	88 23       	and	r24, r24
 694:	31 f0       	breq	.+12     	; 0x6a2 <main+0xd6>
			{
				blink_on = 0;
 696:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <blink_on>
				leds_set(0);
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <main+0xe6>
			}
			else
			{
				blink_on = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <blink_on>
				leds_set(recording_slot + 1);
 6a8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
			}
		}		
		
		if (!(PORTB.IN & PIN3_bm) && !(rec_button_down)) //button down
 6b2:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 6b6:	83 fd       	sbrc	r24, 3
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <main+0x110>
 6ba:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <rec_button_down>
 6be:	81 11       	cpse	r24, r1
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <main+0x110>
		{
			//Debug
			PORTA.OUTSET = PIN7_bm;
 6c2:	80 e8       	ldi	r24, 0x80	; 128
 6c4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
			//starts a debounce
			rec_button_down = 1;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <rec_button_down>
			debounce_count = 0;		
 6ce:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 6d2:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
			rec_button_unreleased = 0;
 6d6:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <rec_button_unreleased>
 6da:	36 c0       	rjmp	.+108    	; 0x748 <main+0x17c>


		}
		else if (PORTB.IN & PIN3_bm)
 6dc:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 6e0:	83 ff       	sbrs	r24, 3
 6e2:	32 c0       	rjmp	.+100    	; 0x748 <main+0x17c>
		{
			
			
			if (debounce_count > DEBOUNCE_TIME)
 6e4:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <debounce_count>
 6e8:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <debounce_count+0x1>
 6ec:	c3 97       	sbiw	r24, 0x33	; 51
 6ee:	18 f1       	brcs	.+70     	; 0x736 <main+0x16a>
			{
				
				//ends a debounce
				
				if (recording)// && !(rec_button_unreleased))
 6f0:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 6f4:	88 23       	and	r24, r24
 6f6:	19 f0       	breq	.+6      	; 0x6fe <main+0x132>
				{
					stop_recording();
 6f8:	0e 94 41 02 	call	0x482	; 0x482 <stop_recording>
 6fc:	1c c0       	rjmp	.+56     	; 0x736 <main+0x16a>
					
				}
				else if (!(recording))
 6fe:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 702:	81 11       	cpse	r24, r1
 704:	18 c0       	rjmp	.+48     	; 0x736 <main+0x16a>
				{
					//move rec slot	
					recording_slot = ((++recording_slot) % 15);
 706:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
 710:	89 e8       	ldi	r24, 0x89	; 137
 712:	98 9f       	mul	r25, r24
 714:	81 2d       	mov	r24, r1
 716:	11 24       	eor	r1, r1
 718:	86 95       	lsr	r24
 71a:	86 95       	lsr	r24
 71c:	86 95       	lsr	r24
 71e:	28 2f       	mov	r18, r24
 720:	22 0f       	add	r18, r18
 722:	82 0f       	add	r24, r18
 724:	28 2f       	mov	r18, r24
 726:	22 0f       	add	r18, r18
 728:	22 0f       	add	r18, r18
 72a:	82 0f       	add	r24, r18
 72c:	98 1b       	sub	r25, r24
 72e:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
					select_recording_slot();
 732:	0e 94 c1 01 	call	0x382	; 0x382 <select_recording_slot>
					
				}				
			}
			
			//debug
			PORTA.OUTCLR = PIN7_bm;
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
			rec_button_down = 0;	
 73c:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <rec_button_down>
			debounce_count = 0;
 740:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <debounce_count>
 744:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <debounce_count+0x1>
			
		}
		
		if (rec_button_down && debounce_count > RECORD_HOLD_TIME && !(recording) && recording_slot != 0xFF)
 748:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <rec_button_down>
 74c:	88 23       	and	r24, r24
 74e:	99 f0       	breq	.+38     	; 0x776 <main+0x1aa>
 750:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <debounce_count>
 754:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <debounce_count+0x1>
 758:	89 3e       	cpi	r24, 0xE9	; 233
 75a:	93 40       	sbci	r25, 0x03	; 3
 75c:	60 f0       	brcs	.+24     	; 0x776 <main+0x1aa>
 75e:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 762:	81 11       	cpse	r24, r1
 764:	08 c0       	rjmp	.+16     	; 0x776 <main+0x1aa>
 766:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 76a:	8f 3f       	cpi	r24, 0xFF	; 255
 76c:	21 f0       	breq	.+8      	; 0x776 <main+0x1aa>
		{
// 			rec_button_unreleased = 1;
			start_recording();
 76e:	0e 94 93 02 	call	0x526	; 0x526 <start_recording>
			play_timer_start();
 772:	0e 94 8d 00 	call	0x11a	; 0x11a <play_timer_start>
		}		
		
		if (counting_record_reset && record_reset_count > RECORD_RESET_TIME)
 776:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <counting_record_reset>
 77a:	88 23       	and	r24, r24
 77c:	09 f4       	brne	.+2      	; 0x780 <main+0x1b4>
 77e:	6c cf       	rjmp	.-296    	; 0x658 <main+0x8c>
 780:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <record_reset_count>
 784:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <record_reset_count+0x1>
 788:	89 3b       	cpi	r24, 0xB9	; 185
 78a:	9b 40       	sbci	r25, 0x0B	; 11
 78c:	08 f4       	brcc	.+2      	; 0x790 <main+0x1c4>
 78e:	64 cf       	rjmp	.-312    	; 0x658 <main+0x8c>
		{
			reset_record_slot_select();
 790:	0e 94 b8 01 	call	0x370	; 0x370 <reset_record_slot_select>
 794:	61 cf       	rjmp	.-318    	; 0x658 <main+0x8c>

00000796 <__vector_24>:
		}
    }
}

ISR(TWI0_TWIS_vect)
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	
	if (TWI0.SSTATUS & TWI_DIF_bm)
 7b8:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 7bc:	88 23       	and	r24, r24
 7be:	24 f5       	brge	.+72     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		
		i2c_data = TWI0.SDATA;
 7c0:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <__RODATA_PM_OFFSET__+0x7f881d>
 7c4:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <i2c_data>
		
		if (recording)
 7c8:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 7cc:	81 11       	cpse	r24, r1
 7ce:	23 c0       	rjmp	.+70     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			return;
		}
		
		if (!(play_sound_cmd_rcvd) && i2c_data == PLAY_SOUND_CMD)
 7d0:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <play_sound_cmd_rcvd>
 7d4:	81 11       	cpse	r24, r1
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <__vector_24+0x50>
 7d8:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <i2c_data>
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	19 f4       	brne	.+6      	; 0x7e6 <__vector_24+0x50>
		{
			play_sound_cmd_rcvd = 1;
 7e0:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <play_sound_cmd_rcvd>
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		}else if (play_sound_cmd_rcvd)
 7e6:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <play_sound_cmd_rcvd>
 7ea:	88 23       	and	r24, r24
 7ec:	69 f0       	breq	.+26     	; 0x808 <__DATA_REGION_LENGTH__+0x8>

		{	
			play_sound_cmd_rcvd = 0;
 7ee:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <play_sound_cmd_rcvd>
			reset_record_slot_select();
 7f2:	0e 94 b8 01 	call	0x370	; 0x370 <reset_record_slot_select>
			leds_set(i2c_data);					
 7f6:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <i2c_data>
 7fa:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
			play_sound(i2c_data - 1);
 7fe:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <i2c_data>
 802:	81 50       	subi	r24, 0x01	; 1
 804:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <play_sound>
		}
		
	}
	
	if (TWI0.SSTATUS & TWI_APIF_bm)
 808:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 80c:	86 ff       	sbrs	r24, 6
 80e:	03 c0       	rjmp	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;		
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
	}
}
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__vector_8>:

ISR(TCA0_OVF_vect)
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
	//clear the flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
	
	
	if (recording)
 860:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 864:	88 23       	and	r24, r24
 866:	09 f4       	brne	.+2      	; 0x86a <__vector_8+0x32>
 868:	64 c0       	rjmp	.+200    	; 0x932 <__vector_8+0xfa>
	{
		ADC0.COMMAND = ADC_STCONV_bm;
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
		while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
 870:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7f860b>
 874:	80 ff       	sbrs	r24, 0
 876:	fc cf       	rjmp	.-8      	; 0x870 <__vector_8+0x38>
		uint8_t data = ADC0.RES;
 878:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 87c:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
		current_buffer[buff_len] = data;
 880:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 884:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 888:	e0 91 1e 39 	lds	r30, 0x391E	; 0x80391e <current_buffer>
 88c:	f0 91 1f 39 	lds	r31, 0x391F	; 0x80391f <current_buffer+0x1>
 890:	e8 0f       	add	r30, r24
 892:	f9 1f       	adc	r31, r25
 894:	20 83       	st	Z, r18
		sound_len++;
 896:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <sound_len>
 89a:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <sound_len+0x1>
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <sound_len>
 8a4:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <sound_len+0x1>
		buff_len++;
 8a8:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 8ac:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buff_len>
 8b6:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <buff_len+0x1>
		
		if (sound_len >= MAX_FILE_SIZE)
 8ba:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <sound_len>
 8be:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <sound_len+0x1>
 8c2:	8a 3f       	cpi	r24, 0xFA	; 250
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	10 f0       	brcs	.+4      	; 0x8cc <__vector_8+0x94>
		{			
			stop_recording();
 8c8:	0e 94 41 02 	call	0x482	; 0x482 <stop_recording>
		}
		
		if (buff_len == PAGE_SIZE || (first_page && buff_len == (PAGE_SIZE - 2)))
 8cc:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 8d0:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 8d4:	81 15       	cp	r24, r1
 8d6:	91 40       	sbci	r25, 0x01	; 1
 8d8:	69 f0       	breq	.+26     	; 0x8f4 <__vector_8+0xbc>
 8da:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 8de:	88 23       	and	r24, r24
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__vector_8+0xac>
 8e2:	64 c0       	rjmp	.+200    	; 0x9ac <__vector_8+0x174>
 8e4:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 8e8:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 8ec:	8e 3f       	cpi	r24, 0xFE	; 254
 8ee:	91 05       	cpc	r25, r1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <__vector_8+0xbc>
 8f2:	5c c0       	rjmp	.+184    	; 0x9ac <__vector_8+0x174>
		{
			first_page = 0;
 8f4:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__data_end>
			uint8_t * temp = current_buffer;
 8f8:	80 91 1e 39 	lds	r24, 0x391E	; 0x80391e <current_buffer>
 8fc:	90 91 1f 39 	lds	r25, 0x391F	; 0x80391f <current_buffer+0x1>
			current_buffer = buffer_to_write;
 900:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <buffer_to_write>
 904:	30 91 21 3a 	lds	r19, 0x3A21	; 0x803a21 <buffer_to_write+0x1>
 908:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <current_buffer>
 90c:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <current_buffer+0x1>
			buffer_to_write = temp;				
 910:	80 93 20 3a 	sts	0x3A20, r24	; 0x803a20 <buffer_to_write>
 914:	90 93 21 3a 	sts	0x3A21, r25	; 0x803a21 <buffer_to_write+0x1>
			buff_len_to_write = buff_len;
 918:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buff_len>
 91c:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buff_len+0x1>
 920:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <buff_len_to_write>
 924:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <buff_len_to_write+0x1>
			buff_len = 0;			
 928:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <buff_len>
 92c:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <buff_len+0x1>
 930:	3d c0       	rjmp	.+122    	; 0x9ac <__vector_8+0x174>
		}
	}
	else
	{

		uint16_t addr = sound_index + 2;
 932:	20 91 14 38 	lds	r18, 0x3814	; 0x803814 <sound_index>
 936:	30 91 15 38 	lds	r19, 0x3815	; 0x803815 <sound_index+0x1>
 93a:	2e 5f       	subi	r18, 0xFE	; 254
 93c:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t addrHi = current_slot;
 93e:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <current_slot>
		if (address_offset_flags & (1 << current_slot))
 942:	90 91 1a 38 	lds	r25, 0x381A	; 0x80381a <current_slot>
 946:	41 e0       	ldi	r20, 0x01	; 1
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__vector_8+0x118>
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	9a 95       	dec	r25
 952:	e2 f7       	brpl	.-8      	; 0x94c <__vector_8+0x114>
 954:	60 91 1c 38 	lds	r22, 0x381C	; 0x80381c <address_offset_flags>
 958:	70 91 1d 38 	lds	r23, 0x381D	; 0x80381d <address_offset_flags+0x1>
 95c:	46 23       	and	r20, r22
 95e:	57 23       	and	r21, r23
 960:	45 2b       	or	r20, r21
 962:	09 f0       	breq	.+2      	; 0x966 <__vector_8+0x12e>
		{
			addrHi += 16;
 964:	80 5f       	subi	r24, 0xF0	; 240
		}
		uint8_t addrMid = ((addr >> 8) & 0xFF);
		uint8_t addrLo = (addr & 0xFF); //Need to start at +2
		uint8_t sound_byte = get_sound_byte(addrHi, addrMid, addrLo);
 966:	42 2f       	mov	r20, r18
 968:	63 2f       	mov	r22, r19
 96a:	0e 94 39 01 	call	0x272	; 0x272 <get_sound_byte>
		DAC0.DATA = sound_byte >> 0;
 96e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__RODATA_PM_OFFSET__+0x7f86a1>
		sound_index++;
 972:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <sound_index>
 976:	90 91 15 38 	lds	r25, 0x3815	; 0x803815 <sound_index+0x1>
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <sound_index>
 980:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <sound_index+0x1>
	
		if (sound_index >= sound_len)
 984:	20 91 14 38 	lds	r18, 0x3814	; 0x803814 <sound_index>
 988:	30 91 15 38 	lds	r19, 0x3815	; 0x803815 <sound_index+0x1>
 98c:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <sound_len>
 990:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <sound_len+0x1>
 994:	28 17       	cp	r18, r24
 996:	39 07       	cpc	r19, r25
 998:	48 f0       	brcs	.+18     	; 0x9ac <__vector_8+0x174>
		{
			spi_disable();
 99a:	0e 94 81 00 	call	0x102	; 0x102 <spi_disable>
			play_timer_stop();
 99e:	0e 94 96 00 	call	0x12c	; 0x12c <play_timer_stop>
			leds_set(0);
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	0e 94 cc 00 	call	0x198	; 0x198 <leds_set>
			sound_playing = 0;
 9a8:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <sound_playing>
		}
	}
}
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <__vector_13>:

ISR(TCB0_INT_vect)
{
 9ce:	1f 92       	push	r1
 9d0:	0f 92       	push	r0
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	0f 92       	push	r0
 9d6:	11 24       	eor	r1, r1
 9d8:	8f 93       	push	r24
 9da:	9f 93       	push	r25
 9dc:	ef 93       	push	r30
 9de:	ff 93       	push	r31
	TCB0.INTFLAGS |= TCB_CAPT_bm;
 9e0:	e0 e4       	ldi	r30, 0x40	; 64
 9e2:	fa e0       	ldi	r31, 0x0A	; 10
 9e4:	86 81       	ldd	r24, Z+6	; 0x06
 9e6:	81 60       	ori	r24, 0x01	; 1
 9e8:	86 83       	std	Z+6, r24	; 0x06
	
	if (rec_button_down)
 9ea:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <rec_button_down>
 9ee:	88 23       	and	r24, r24
 9f0:	49 f0       	breq	.+18     	; 0xa04 <__vector_13+0x36>
	{
		debounce_count++;		
 9f2:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <debounce_count>
 9f6:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <debounce_count+0x1>
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <debounce_count>
 a00:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <debounce_count+0x1>
	}
	
	if (recording)
 a04:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <recording>
 a08:	88 23       	and	r24, r24
 a0a:	49 f0       	breq	.+18     	; 0xa1e <__vector_13+0x50>
	{
		blink_count++;
 a0c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <blink_count>
 a10:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <blink_count+0x1>
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <blink_count>
 a1a:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <blink_count+0x1>
	}
	
	if (counting_record_reset)
 a1e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <counting_record_reset>
 a22:	88 23       	and	r24, r24
 a24:	49 f0       	breq	.+18     	; 0xa38 <__vector_13+0x6a>
	{
		record_reset_count++;
 a26:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <record_reset_count>
 a2a:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <record_reset_count+0x1>
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <record_reset_count>
 a34:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <record_reset_count+0x1>
	}
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	9f 91       	pop	r25
 a3e:	8f 91       	pop	r24
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <eeprom_read_byte>:
 a4a:	03 d0       	rcall	.+6      	; 0xa52 <eeprom_mapen>
 a4c:	80 81       	ld	r24, Z
 a4e:	99 27       	eor	r25, r25
 a50:	08 95       	ret

00000a52 <eeprom_mapen>:
 a52:	fc 01       	movw	r30, r24
 a54:	e0 50       	subi	r30, 0x00	; 0
 a56:	fc 4e       	sbci	r31, 0xEC	; 236
 a58:	08 95       	ret

00000a5a <eeprom_write_byte>:
 a5a:	26 2f       	mov	r18, r22

00000a5c <eeprom_write_r18>:
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	e0 e0       	ldi	r30, 0x00	; 0
 a62:	f0 e1       	ldi	r31, 0x10	; 16
 a64:	32 81       	ldd	r19, Z+2	; 0x02
 a66:	31 fd       	sbrc	r19, 1
 a68:	fd cf       	rjmp	.-6      	; 0xa64 <eeprom_write_r18+0x8>
 a6a:	dc 01       	movw	r26, r24
 a6c:	a0 50       	subi	r26, 0x00	; 0
 a6e:	bc 4e       	sbci	r27, 0xEC	; 236
 a70:	2c 93       	st	X, r18
 a72:	2d e9       	ldi	r18, 0x9D	; 157
 a74:	24 bf       	out	0x34, r18	; 52
 a76:	23 e0       	ldi	r18, 0x03	; 3
 a78:	20 83       	st	Z, r18
 a7a:	01 96       	adiw	r24, 0x01	; 1
 a7c:	bf 91       	pop	r27
 a7e:	af 91       	pop	r26
 a80:	08 95       	ret

00000a82 <eeprom_write_word>:
 a82:	0e 94 2d 05 	call	0xa5a	; 0xa5a <eeprom_write_byte>
 a86:	27 2f       	mov	r18, r23
 a88:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <eeprom_write_r18>

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
