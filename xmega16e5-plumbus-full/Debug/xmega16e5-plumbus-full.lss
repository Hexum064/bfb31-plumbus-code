
xmega16e5-plumbus-full.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00802000  00002036  000020ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000101  0080217a  0080217a  00002244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000022b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007caf  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b3c  00000000  00000000  0000a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002298  00000000  00000000  0000cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  0000f094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fe7  00000000  00000000  0000f860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001301  00000000  00000000  00013847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00014b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__ctors_end>
       4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_3>
      10:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      14:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      18:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      1c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      20:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      24:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      28:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      2c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_11>
      30:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_12>
      34:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      38:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      3c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      40:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      44:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      4c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      50:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      54:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      58:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      5c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      60:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      64:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      68:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      6c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      70:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      74:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      78:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      7c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      80:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      84:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      88:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      8c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      90:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      94:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      98:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_38>
      9c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      ac:	fc 08       	sbc	r15, r12
      ae:	15 08       	sbc	r1, r5
      b0:	1f 08       	sbc	r1, r15
      b2:	2c 08       	sbc	r2, r12
      b4:	36 08       	sbc	r3, r6
      b6:	96 08       	sbc	r9, r6
      b8:	f7 08       	sbc	r15, r7

000000ba <__trampolines_end>:
	...

000000d0 <portalMainBass>:
      d0:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
      e0:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
      f0:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     100:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     110:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     120:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     130:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     140:	63 5f 5c 57 c0 a8 40 68 a1 40 61 a3 40 63 a8 a1     c_\W..@h.@a.@c..
     150:	a8 40 68 a1 40 61 a3 40 63 a8 9c e3 e1 9c 9d 9f     .@h.@a.@c.......
     160:	a1 e3 a4 b0 ab 40 6b ae 40 6e ab 40 6b ae 40 6e     .....@k.@n.@k.@n
     170:	ab 40 6b ae 40 6e ab 40 6b ee                       .@k.@n.@k.

0000017a <portalIntroExtBass>:
	...

0000017b <portalIntroBass>:
     17b:	c0                                                  .

0000017c <portalMainExtTreble>:
     17c:	02 00 00 04 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000018e <portalMainTreble>:
     18e:	cf 00 4e 4f 51 91 8f 40 93 51 d8 c0 58 91 4f 8e     ..NOQ..@.Q..X.O.
     19e:	40 51 94 93 40 91 58 98 8f 40 00 4e 4f 51 51 cf     @Q..@.X..@.NOQQ.
     1ae:	00 4e 4f 51 91 40 4f 93 40 51 d8 40 c0 91 4f 8e     .NOQ.@O.@Q.@..O.
     1be:	40 51 94 40 53 91 58 53 51 50 51 53 55 80 58 57     @Q.@S.XSQPQSU.XW
     1ce:	95 90 51 53 53 55 53 55 55 40 95 58 57 95 90 4e     ..QSSUSUU@.XW..N
     1de:	50 51 53 53 51 90 90 4e 4c 4b 4b 8c 8e 50 4e 4c     PQSSQ..NLKK..PNL
     1ee:	4c 8e 90 53 55 53 50 50 51 40 51 4f 4f 40 5f 5b     L..SUSPPQ@QOO@_[
     1fe:	5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f 64 5f 5b     _b_[_d_[_b_[_d_[
     20e:	5f 62 5f 5b 5f 64 5f 5b 58 4e 4f 51 51              _b_[_d_[XNOQQ

0000021b <portalIntroExtTreble>:
	...

0000021c <portalIntroTreble>:
     21c:	4e 4f 51 51                                         NOQQ

00000220 <nyanMainExtBass>:
     220:	00 00 00                                            ...

00000223 <nyanMainBass>:
     223:	75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e 7a 78     uisgvjqexlsg:.zx
     233:	76                                                  v

00000234 <nyanIntroExtBass>:
     234:	03                                                  .

00000235 <nyanIntroBass>:
	...

00000237 <nyanMainExtTreble>:
	...

00000252 <nyanMainTreble>:
     252:	4f 4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12     OM.R...VVTS.....
     262:	0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12     .........RO.....
     272:	16 15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16     .......S........
     282:	54 56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14     TVTOM.R...VVTS..
     292:	16 14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12     ............RO..
     2a2:	0f 14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14     ..........S.....
     2b2:	13 14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16     ...TVVV..V......
     2c2:	11 12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e     ....VV..........
     2d2:	1d 1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b     ..V..V..........
     2e2:	56 16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19     V..........VWV..
     2f2:	56 1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16     V..........VV...
     302:	1b 11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16     .........V..V...
     312:	16 14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12     .......V........
     322:	11 0f 56 54                                         ..VT

00000326 <nyanIntroExtTreble>:
     326:	00 00 00 00                                         ....

0000032a <nyanIntroTreble>:
     32a:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
     33a:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 00     ......J.........

0000034a <__ctors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	cd bf       	out	0x3d, r28	; 61
     352:	d7 e2       	ldi	r29, 0x27	; 39
     354:	de bf       	out	0x3e, r29	; 62

00000356 <__do_copy_data>:
     356:	11 e2       	ldi	r17, 0x21	; 33
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e2       	ldi	r27, 0x20	; 32
     35c:	e6 e3       	ldi	r30, 0x36	; 54
     35e:	f0 e2       	ldi	r31, 0x20	; 32
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x10>
     362:	05 90       	lpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	aa 37       	cpi	r26, 0x7A	; 122
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0xc>

0000036c <__do_clear_bss>:
     36c:	22 e2       	ldi	r18, 0x22	; 34
     36e:	aa e7       	ldi	r26, 0x7A	; 122
     370:	b1 e2       	ldi	r27, 0x21	; 33
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	ab 37       	cpi	r26, 0x7B	; 123
     378:	b2 07       	cpc	r27, r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	0e 94 55 09 	call	0x12aa	; 0x12aa <main>
     380:	0c 94 19 10 	jmp	0x2032	; 0x2032 <_exit>

00000384 <__bad_interrupt>:
     384:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000388 <step_easy>:
	
	
}

void step_hard()
{
     388:	cf 93       	push	r28
     38a:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <__data_end>
     38e:	88 23       	and	r24, r24
     390:	19 f0       	breq	.+6      	; 0x398 <step_easy+0x10>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	89 f1       	breq	.+98     	; 0x3f8 <step_easy+0x70>
     396:	88 c0       	rjmp	.+272    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     398:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	0e 94 33 07 	call	0xe66	; 0xe66 <play_lights_game>
     3a2:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <play_index>
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	b1 f4       	brne	.+44     	; 0x3d6 <step_easy+0x4e>
     3aa:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <note_player_playing>
     3ae:	81 11       	cpse	r24, r1
     3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <step_easy+0x4e>
     3b2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	0e 94 33 07 	call	0xe66	; 0xe66 <play_lights_game>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <__data_end>
     3c2:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <timer_counter>
     3c6:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <timer_counter+0x1>
     3ca:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <play_index>
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <progress_index>
     3d4:	69 c0       	rjmp	.+210    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     3d6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <note_player_playing>
     3da:	81 11       	cpse	r24, r1
     3dc:	65 c0       	rjmp	.+202    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     3de:	e0 91 7e 21 	lds	r30, 0x217E	; 0x80217e <play_index>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	8e 0f       	add	r24, r30
     3e6:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <play_index>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e6 5f       	subi	r30, 0xF6	; 246
     3ee:	ff 4d       	sbci	r31, 0xDF	; 223
     3f0:	80 81       	ld	r24, Z
     3f2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <note_play>
     3f6:	58 c0       	rjmp	.+176    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     3f8:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <timer_counter>
     3fc:	90 91 7c 21 	lds	r25, 0x217C	; 0x80217c <timer_counter+0x1>
     400:	85 30       	cpi	r24, 0x05	; 5
     402:	91 05       	cpc	r25, r1
     404:	30 f4       	brcc	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <timer_counter>
     40c:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <timer_counter+0x1>
     410:	4b c0       	rjmp	.+150    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     412:	08 97       	sbiw	r24, 0x08	; 8
     414:	78 f4       	brcc	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     416:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	0e 94 33 07 	call	0xe66	; 0xe66 <play_lights_game>
     420:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <timer_counter>
     424:	90 91 7c 21 	lds	r25, 0x217C	; 0x80217c <timer_counter+0x1>
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <timer_counter>
     42e:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <timer_counter+0x1>
     432:	3a c0       	rjmp	.+116    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     434:	90 91 7e 21 	lds	r25, 0x217E	; 0x80217e <play_index>
     438:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <progress_index>
     43c:	98 13       	cpse	r25, r24
     43e:	0f c0       	rjmp	.+30     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     440:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	0e 94 33 07 	call	0xe66	; 0xe66 <play_lights_game>
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <__data_end>
     450:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <timer_counter>
     454:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <timer_counter+0x1>
     458:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <play_index>
     45c:	25 c0       	rjmp	.+74     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     45e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <note_player_playing>
     462:	81 11       	cpse	r24, r1
     464:	21 c0       	rjmp	.+66     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     466:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <play_index>
     46a:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <sequence>
     46e:	f0 91 a7 21 	lds	r31, 0x21A7	; 0x8021a7 <sequence+0x1>
     472:	e8 0f       	add	r30, r24
     474:	f1 1d       	adc	r31, r1
     476:	c0 81       	ld	r28, Z
     478:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     47c:	6c 2f       	mov	r22, r28
     47e:	0e 94 33 07 	call	0xe66	; 0xe66 <play_lights_game>
     482:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <sequence>
     486:	f0 91 a7 21 	lds	r31, 0x21A7	; 0x8021a7 <sequence+0x1>
     48a:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <play_index>
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	98 0f       	add	r25, r24
     492:	90 93 7e 21 	sts	0x217E, r25	; 0x80217e <play_index>
     496:	e8 0f       	add	r30, r24
     498:	f1 1d       	adc	r31, r1
     49a:	80 81       	ld	r24, Z
     49c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <note_play>
     4a0:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <timer_counter>
     4a4:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <timer_counter+0x1>
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <get_seed>:
	
}

uint16_t get_seed()
{
	ADCA.CTRLB|=ADC_CURRLIMIT1_bm|ADC_CONMODE_bm; //medium current consumption, maximum sampling speed 150ksps, resolution 12-bit right adjusted, signed mode
     4ac:	e0 e0       	ldi	r30, 0x00	; 0
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	81 81       	ldd	r24, Z+1	; 0x01
     4b2:	80 65       	ori	r24, 0x50	; 80
     4b4:	81 83       	std	Z+1, r24	; 0x01
 
	ADCA.REFCTRL|=ADC_REFSEL0_bm; //INTVCC2 i.e. Vcc/1.6 is selected as reference voltage
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	82 83       	std	Z+2, r24	; 0x02
 
	ADCA.EVCTRL=0x00;               //no event channel input is selected
     4bc:	13 82       	std	Z+3, r1	; 0x03
 
	ADCA.PRESCALER|=ADC_PRESCALER2_bm; //prescaler 64 is selected and peripheral clock is 8MHz
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	84 83       	std	Z+4, r24	; 0x04
 
	ADCA.INTFLAGS=ADC_CH0IF_bm; //clear interrupt flag by writing one to it
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	86 83       	std	Z+6, r24	; 0x06
 
	ADCA.CH0.CTRL|=ADC_CH_INPUTMODE0_bm; //signed mode, single ended positive input selected
     4c8:	80 a1       	ldd	r24, Z+32	; 0x20
     4ca:	81 60       	ori	r24, 0x01	; 1
     4cc:	80 a3       	std	Z+32, r24	; 0x20
 
	ADCA.CH0.MUXCTRL|=ADC_CH_MUXPOS1_bm; //select PIN1 as input for ADC
     4ce:	81 a1       	ldd	r24, Z+33	; 0x21
     4d0:	80 61       	ori	r24, 0x10	; 16
     4d2:	81 a3       	std	Z+33, r24	; 0x21
 
	ADCA.CTRLA=ADC_ENABLE_bm | ADC_START_bm; //enable ADC and start
     4d4:	85 e0       	ldi	r24, 0x05	; 5
     4d6:	80 83       	st	Z, r24
	
	while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     4d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fb206>
     4dc:	80 ff       	sbrs	r24, 0
     4de:	fc cf       	rjmp	.-8      	; 0x4d8 <get_seed+0x2c>
	
	ADCA.INTFLAGS=ADC_CH0IF_bm;  //clear flag immediately after conversion
     4e0:	e0 e0       	ldi	r30, 0x00	; 0
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	86 83       	std	Z+6, r24	; 0x06
	
	uint16_t result = ADCA.CH0.RES;
     4e8:	84 a1       	ldd	r24, Z+36	; 0x24
     4ea:	95 a1       	ldd	r25, Z+37	; 0x25
	
	ADCA.CTRLA = 0;
     4ec:	10 82       	st	Z, r1
	return result;
}
     4ee:	08 95       	ret

000004f0 <easy_sequence_init>:

void easy_sequence_init()
{
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
	sequence = (uint8_t *)malloc(EASY_LENGTH);
     4f6:	8a e0       	ldi	r24, 0x0A	; 10
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <malloc>
     4fe:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <sequence>
     502:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <sequence+0x1>
	srand(get_seed());
     506:	0e 94 56 02 	call	0x4ac	; 0x4ac <get_seed>
     50a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <srand>
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	18 c0       	rjmp	.+48     	; 0x542 <easy_sequence_init+0x52>
	{
		sequence[i] = 0x01 << (rand() % 4);
     512:	00 91 a6 21 	lds	r16, 0x21A6	; 0x8021a6 <sequence>
     516:	10 91 a7 21 	lds	r17, 0x21A7	; 0x8021a7 <sequence+0x1>
     51a:	0c 0f       	add	r16, r28
     51c:	11 1d       	adc	r17, r1
     51e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <rand>
     522:	83 70       	andi	r24, 0x03	; 3
     524:	90 78       	andi	r25, 0x80	; 128
     526:	99 23       	and	r25, r25
     528:	24 f4       	brge	.+8      	; 0x532 <easy_sequence_init+0x42>
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	8c 6f       	ori	r24, 0xFC	; 252
     52e:	9f 6f       	ori	r25, 0xFF	; 255
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <easy_sequence_init+0x48>
     536:	99 0f       	add	r25, r25
     538:	8a 95       	dec	r24
     53a:	ea f7       	brpl	.-6      	; 0x536 <easy_sequence_init+0x46>
     53c:	f8 01       	movw	r30, r16
     53e:	90 83       	st	Z, r25

void easy_sequence_init()
{
	sequence = (uint8_t *)malloc(EASY_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     540:	cf 5f       	subi	r28, 0xFF	; 255
     542:	ca 30       	cpi	r28, 0x0A	; 10
     544:	30 f3       	brcs	.-52     	; 0x512 <easy_sequence_init+0x22>
	{
		sequence[i] = 0x01 << (rand() % 4);
	}
	
}
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <hard_sequence_init>:

void hard_sequence_init()
{
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
	sequence = (uint8_t *)malloc(HARD_LENGTH);
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <malloc>
     55c:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <sequence>
     560:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <sequence+0x1>
	srand(get_seed());
     564:	0e 94 56 02 	call	0x4ac	; 0x4ac <get_seed>
     568:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <srand>
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	10 c0       	rjmp	.+32     	; 0x590 <hard_sequence_init+0x42>
	{
		sequence[i] = (rand() % 15) + 1;
     570:	00 91 a6 21 	lds	r16, 0x21A6	; 0x8021a6 <sequence>
     574:	10 91 a7 21 	lds	r17, 0x21A7	; 0x8021a7 <sequence+0x1>
     578:	0c 0f       	add	r16, r28
     57a:	11 1d       	adc	r17, r1
     57c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <rand>
     580:	6f e0       	ldi	r22, 0x0F	; 15
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divmodhi4>
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	f8 01       	movw	r30, r16
     58c:	80 83       	st	Z, r24

void hard_sequence_init()
{
	sequence = (uint8_t *)malloc(HARD_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     58e:	cf 5f       	subi	r28, 0xFF	; 255
     590:	cf 30       	cpi	r28, 0x0F	; 15
     592:	70 f3       	brcs	.-36     	; 0x570 <hard_sequence_init+0x22>
	{
		sequence[i] = (rand() % 15) + 1;
	}
}
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <games_init>:

void games_init(GameModes mode)
{

	if (mode == easy)
     59c:	81 11       	cpse	r24, r1
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <games_init+0xa>
	{
		easy_sequence_init();
     5a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <easy_sequence_init>
     5a4:	08 95       	ret
	}
	else
	{
		hard_sequence_init();
     5a6:	0e 94 a7 02 	call	0x54e	; 0x54e <hard_sequence_init>
     5aa:	08 95       	ret

000005ac <games_step>:
}

void games_step()
{
				
	step_easy();
     5ac:	0e 94 c4 01 	call	0x388	; 0x388 <step_easy>
     5b0:	08 95       	ret

000005b2 <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
	
	while(twi_transfer_complete!=1);

	return 0;
}
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
     5b8:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
     5bc:	e1 e8       	ldi	r30, 0x81	; 129
     5be:	f4 e0       	ldi	r31, 0x04	; 4
     5c0:	80 81       	ld	r24, Z
     5c2:	88 6f       	ori	r24, 0xF8	; 248
     5c4:	80 83       	st	Z, r24
     5c6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
     5ca:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
     5ce:	e4 e8       	ldi	r30, 0x84	; 132
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	80 81       	ld	r24, Z
     5d4:	8d 6c       	ori	r24, 0xCD	; 205
     5d6:	80 83       	st	Z, r24
     5d8:	08 95       	ret

000005da <twi_read>:
     5da:	40 93 ab 21 	sts	0x21AB, r20	; 0x8021ab <twi_no_of_bytes>
     5de:	50 93 ac 21 	sts	0x21AC, r21	; 0x8021ac <twi_no_of_bytes+0x1>
     5e2:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <twi_data_count>
     5e6:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <twi_data_count+0x1>
     5ea:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <twi_transfer_complete>
     5ee:	60 93 b2 21 	sts	0x21B2, r22	; 0x8021b2 <twi_data>
     5f2:	70 93 b3 21 	sts	0x21B3, r23	; 0x8021b3 <twi_data+0x1>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
     602:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <twi_transfer_complete>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	e1 f7       	brne	.-8      	; 0x602 <twi_read+0x28>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	08 95       	ret

0000060e <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     60e:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     612:	40 93 ab 21 	sts	0x21AB, r20	; 0x8021ab <twi_no_of_bytes>
     616:	50 93 ac 21 	sts	0x21AC, r21	; 0x8021ac <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     61a:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <twi_data_count>
     61e:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     622:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <twi_transfer_complete>
	
	twi_data=data;
     626:	60 93 b2 21 	sts	0x21B2, r22	; 0x8021b2 <twi_data>
     62a:	70 93 b3 21 	sts	0x21B3, r23	; 0x8021b3 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     62e:	88 0f       	add	r24, r24
     630:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     634:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <twi_transfer_complete>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	e1 f7       	brne	.-8      	; 0x634 <twi_write+0x26>
	
	return 0;
}
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret

00000640 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	0f 92       	push	r0
     648:	11 24       	eor	r1, r1
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     65a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     65e:	83 ff       	sbrs	r24, 3
     660:	03 c0       	rjmp	.+6      	; 0x668 <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     668:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     66c:	82 fd       	sbrc	r24, 2
     66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_11+0x38>
     670:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     674:	84 ff       	sbrs	r24, 4
     676:	08 c0       	rjmp	.+16     	; 0x688 <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     678:	e3 e8       	ldi	r30, 0x83	; 131
     67a:	f4 e0       	ldi	r31, 0x04	; 4
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     684:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     688:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <twi_transfer_complete>
     68c:	88 23       	and	r24, r24
     68e:	31 f0       	breq	.+12     	; 0x69c <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     690:	e4 e8       	ldi	r30, 0x84	; 132
     692:	f4 e0       	ldi	r31, 0x04	; 4
     694:	80 81       	ld	r24, Z
     696:	80 64       	ori	r24, 0x40	; 64
     698:	80 83       	st	Z, r24
		return;
     69a:	79 c0       	rjmp	.+242    	; 0x78e <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     69c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     6a0:	86 ff       	sbrs	r24, 6
     6a2:	47 c0       	rjmp	.+142    	; 0x732 <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     6a4:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     6a8:	84 fd       	sbrc	r24, 4
     6aa:	43 c0       	rjmp	.+134    	; 0x732 <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     6ac:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <twi_repeat_mode>
     6b0:	88 23       	and	r24, r24
     6b2:	c9 f0       	breq	.+50     	; 0x6e6 <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     6b4:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <twi_repeat_cmd_sent>
     6b8:	88 23       	and	r24, r24
     6ba:	69 f0       	breq	.+26     	; 0x6d6 <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     6bc:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <twi_repeat_data>
     6c0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     6c4:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <twi_data_count>
     6c8:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <twi_data_count+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <twi_data_count>
     6d2:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     6d6:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <twi_repeat_cmd>
     6da:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <twi_repeat_cmd_sent>
     6e4:	15 c0       	rjmp	.+42     	; 0x710 <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     6e6:	20 91 b2 21 	lds	r18, 0x21B2	; 0x8021b2 <twi_data>
     6ea:	30 91 b3 21 	lds	r19, 0x21B3	; 0x8021b3 <twi_data+0x1>
     6ee:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <twi_data_count>
     6f2:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <twi_data_count+0x1>
     6f6:	ac 01       	movw	r20, r24
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
     6fa:	5f 4f       	sbci	r21, 0xFF	; 255
     6fc:	40 93 ae 21 	sts	0x21AE, r20	; 0x8021ae <twi_data_count>
     700:	50 93 af 21 	sts	0x21AF, r21	; 0x8021af <twi_data_count+0x1>
     704:	f9 01       	movw	r30, r18
     706:	e8 0f       	add	r30, r24
     708:	f9 1f       	adc	r31, r25
     70a:	80 81       	ld	r24, Z
     70c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     710:	20 91 ae 21 	lds	r18, 0x21AE	; 0x8021ae <twi_data_count>
     714:	30 91 af 21 	lds	r19, 0x21AF	; 0x8021af <twi_data_count+0x1>
     718:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <twi_no_of_bytes>
     71c:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <twi_no_of_bytes+0x1>
     720:	28 17       	cp	r18, r24
     722:	39 07       	cpc	r19, r25
     724:	31 f4       	brne	.+12     	; 0x732 <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     732:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     736:	88 23       	and	r24, r24
     738:	54 f5       	brge	.+84     	; 0x78e <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     73a:	20 91 b2 21 	lds	r18, 0x21B2	; 0x8021b2 <twi_data>
     73e:	30 91 b3 21 	lds	r19, 0x21B3	; 0x8021b3 <twi_data+0x1>
     742:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <twi_data_count>
     746:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <twi_data_count+0x1>
     74a:	ac 01       	movw	r20, r24
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	40 93 ae 21 	sts	0x21AE, r20	; 0x8021ae <twi_data_count>
     754:	50 93 af 21 	sts	0x21AF, r21	; 0x8021af <twi_data_count+0x1>
     758:	f9 01       	movw	r30, r18
     75a:	e8 0f       	add	r30, r24
     75c:	f9 1f       	adc	r31, r25
     75e:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     762:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     764:	20 91 ae 21 	lds	r18, 0x21AE	; 0x8021ae <twi_data_count>
     768:	30 91 af 21 	lds	r19, 0x21AF	; 0x8021af <twi_data_count+0x1>
     76c:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <twi_no_of_bytes>
     770:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <twi_no_of_bytes+0x1>
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	39 f4       	brne	.+14     	; 0x788 <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     77a:	87 e0       	ldi	r24, 0x07	; 7
     77c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <twi_transfer_complete>
     786:	03 c0       	rjmp	.+6      	; 0x78e <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <expander_read_port>:
	twi_write(addr, cmd, 3);
	last_val = expander_read_ports();
}

uint8_t expander_read_port(uint8_t portAddr)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <expander_read_port+0x6>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     7b2:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     7b4:	41 e0       	ldi	r20, 0x01	; 1
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	be 01       	movw	r22, r28
     7ba:	6e 5f       	subi	r22, 0xFE	; 254
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	80 e2       	ldi	r24, 0x20	; 32
     7c0:	0e 94 07 03 	call	0x60e	; 0x60e <twi_write>
	
	twi_read(addr, &port_val, 1);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_read>
	
	return port_val;
	
}
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <expander_read_ports>:

uint16_t expander_read_ports()
{
     7e0:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <expander_read_port>
     7e8:	c8 2f       	mov	r28, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <expander_read_port>
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	98 2f       	mov	r25, r24
     7f4:	88 27       	eor	r24, r24
	return port_data;
	
}
     7f6:	8c 0f       	add	r24, r28
     7f8:	91 1d       	adc	r25, r1
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <expander_init>:
#include "i2c.h"

volatile uint16_t last_val = 0;

void expander_init()
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     80a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <twi_init>
	
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     818:	43 e0       	ldi	r20, 0x03	; 3
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	be 01       	movw	r22, r28
     81e:	6f 5f       	subi	r22, 0xFF	; 255
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	80 e2       	ldi	r24, 0x20	; 32
     824:	0e 94 07 03 	call	0x60e	; 0x60e <twi_write>
	last_val = expander_read_ports();
     828:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
     82c:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <last_val>
     830:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <last_val+0x1>
}
     834:	23 96       	adiw	r28, 0x03	; 3
     836:	cd bf       	out	0x3d, r28	; 61
     838:	de bf       	out	0x3e, r29	; 62
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <expander_get_last_value>:
	
}

uint16_t expander_get_last_value()
{
	return last_val;
     840:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <last_val>
     844:	90 91 80 21 	lds	r25, 0x2180	; 0x802180 <last_val+0x1>
}
     848:	08 95       	ret

0000084a <expander_get_val_changed>:

uint8_t expander_get_val_changed()
{
	uint16_t val = expander_read_ports();
     84a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <expander_read_ports>
	
	if (val == last_val)
     84e:	20 91 7f 21 	lds	r18, 0x217F	; 0x80217f <last_val>
     852:	30 91 80 21 	lds	r19, 0x2180	; 0x802180 <last_val+0x1>
     856:	82 17       	cp	r24, r18
     858:	93 07       	cpc	r25, r19
     85a:	99 f0       	breq	.+38     	; 0x882 <expander_get_val_changed+0x38>
	{
		return 0;
	}
	
	if (val > last_val)
     85c:	20 91 7f 21 	lds	r18, 0x217F	; 0x80217f <last_val>
     860:	30 91 80 21 	lds	r19, 0x2180	; 0x802180 <last_val+0x1>
     864:	28 17       	cp	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	30 f4       	brcc	.+12     	; 0x876 <expander_get_val_changed+0x2c>
	{
		last_val = val;
     86a:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <last_val>
     86e:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <last_val+0x1>
		return 2;		
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	08 95       	ret
	}
	
	last_val = val;
     876:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <last_val>
     87a:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <last_val+0x1>
	return 1;	
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	08 95       	ret
{
	uint16_t val = expander_read_ports();
	
	if (val == last_val)
	{
		return 0;
     882:	80 e0       	ldi	r24, 0x00	; 0
		return 2;		
	}
	
	last_val = val;
	return 1;	
     884:	08 95       	ret

00000886 <play_lights_overlay_note_button_leds>:
			leds[i].b = MAX_BRIGHTNESS;
			break;
		}
	}
	offset++;
	ws2812drv_start_transfer(leds, LED_COUNT);
     886:	80 ff       	sbrs	r24, 0
     888:	13 c0       	rjmp	.+38     	; 0x8b0 <play_lights_overlay_note_button_leds+0x2a>
     88a:	20 91 5c 20 	lds	r18, 0x205C	; 0x80205c <BUTTON_0>
     88e:	30 91 5d 20 	lds	r19, 0x205D	; 0x80205d <BUTTON_0+0x1>
     892:	40 91 5e 20 	lds	r20, 0x205E	; 0x80205e <BUTTON_0+0x2>
     896:	20 93 45 22 	sts	0x2245, r18	; 0x802245 <leds+0x90>
     89a:	30 93 46 22 	sts	0x2246, r19	; 0x802246 <leds+0x91>
     89e:	40 93 47 22 	sts	0x2247, r20	; 0x802247 <leds+0x92>
     8a2:	20 93 48 22 	sts	0x2248, r18	; 0x802248 <leds+0x93>
     8a6:	30 93 49 22 	sts	0x2249, r19	; 0x802249 <leds+0x94>
     8aa:	40 93 4a 22 	sts	0x224A, r20	; 0x80224a <leds+0x95>
     8ae:	12 c0       	rjmp	.+36     	; 0x8d4 <play_lights_overlay_note_button_leds+0x4e>
     8b0:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <LED_OFF>
     8b4:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <LED_OFF+0x1>
     8b8:	40 91 52 20 	lds	r20, 0x2052	; 0x802052 <LED_OFF+0x2>
     8bc:	20 93 45 22 	sts	0x2245, r18	; 0x802245 <leds+0x90>
     8c0:	30 93 46 22 	sts	0x2246, r19	; 0x802246 <leds+0x91>
     8c4:	40 93 47 22 	sts	0x2247, r20	; 0x802247 <leds+0x92>
     8c8:	20 93 48 22 	sts	0x2248, r18	; 0x802248 <leds+0x93>
     8cc:	30 93 49 22 	sts	0x2249, r19	; 0x802249 <leds+0x94>
     8d0:	40 93 4a 22 	sts	0x224A, r20	; 0x80224a <leds+0x95>
     8d4:	81 ff       	sbrs	r24, 1
     8d6:	13 c0       	rjmp	.+38     	; 0x8fe <play_lights_overlay_note_button_leds+0x78>
     8d8:	20 91 59 20 	lds	r18, 0x2059	; 0x802059 <BUTTON_1>
     8dc:	30 91 5a 20 	lds	r19, 0x205A	; 0x80205a <BUTTON_1+0x1>
     8e0:	40 91 5b 20 	lds	r20, 0x205B	; 0x80205b <BUTTON_1+0x2>
     8e4:	20 93 4b 22 	sts	0x224B, r18	; 0x80224b <leds+0x96>
     8e8:	30 93 4c 22 	sts	0x224C, r19	; 0x80224c <leds+0x97>
     8ec:	40 93 4d 22 	sts	0x224D, r20	; 0x80224d <leds+0x98>
     8f0:	20 93 4e 22 	sts	0x224E, r18	; 0x80224e <leds+0x99>
     8f4:	30 93 4f 22 	sts	0x224F, r19	; 0x80224f <leds+0x9a>
     8f8:	40 93 50 22 	sts	0x2250, r20	; 0x802250 <leds+0x9b>
     8fc:	12 c0       	rjmp	.+36     	; 0x922 <play_lights_overlay_note_button_leds+0x9c>
     8fe:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <LED_OFF>
     902:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <LED_OFF+0x1>
     906:	40 91 52 20 	lds	r20, 0x2052	; 0x802052 <LED_OFF+0x2>
     90a:	20 93 4b 22 	sts	0x224B, r18	; 0x80224b <leds+0x96>
     90e:	30 93 4c 22 	sts	0x224C, r19	; 0x80224c <leds+0x97>
     912:	40 93 4d 22 	sts	0x224D, r20	; 0x80224d <leds+0x98>
     916:	20 93 4e 22 	sts	0x224E, r18	; 0x80224e <leds+0x99>
     91a:	30 93 4f 22 	sts	0x224F, r19	; 0x80224f <leds+0x9a>
     91e:	40 93 50 22 	sts	0x2250, r20	; 0x802250 <leds+0x9b>
     922:	82 ff       	sbrs	r24, 2
     924:	13 c0       	rjmp	.+38     	; 0x94c <play_lights_overlay_note_button_leds+0xc6>
     926:	20 91 56 20 	lds	r18, 0x2056	; 0x802056 <BUTTON_2>
     92a:	30 91 57 20 	lds	r19, 0x2057	; 0x802057 <BUTTON_2+0x1>
     92e:	40 91 58 20 	lds	r20, 0x2058	; 0x802058 <BUTTON_2+0x2>
     932:	20 93 51 22 	sts	0x2251, r18	; 0x802251 <leds+0x9c>
     936:	30 93 52 22 	sts	0x2252, r19	; 0x802252 <leds+0x9d>
     93a:	40 93 53 22 	sts	0x2253, r20	; 0x802253 <leds+0x9e>
     93e:	20 93 54 22 	sts	0x2254, r18	; 0x802254 <leds+0x9f>
     942:	30 93 55 22 	sts	0x2255, r19	; 0x802255 <leds+0xa0>
     946:	40 93 56 22 	sts	0x2256, r20	; 0x802256 <leds+0xa1>
     94a:	12 c0       	rjmp	.+36     	; 0x970 <play_lights_overlay_note_button_leds+0xea>
     94c:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <LED_OFF>
     950:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <LED_OFF+0x1>
     954:	40 91 52 20 	lds	r20, 0x2052	; 0x802052 <LED_OFF+0x2>
     958:	20 93 51 22 	sts	0x2251, r18	; 0x802251 <leds+0x9c>
     95c:	30 93 52 22 	sts	0x2252, r19	; 0x802252 <leds+0x9d>
     960:	40 93 53 22 	sts	0x2253, r20	; 0x802253 <leds+0x9e>
     964:	20 93 54 22 	sts	0x2254, r18	; 0x802254 <leds+0x9f>
     968:	30 93 55 22 	sts	0x2255, r19	; 0x802255 <leds+0xa0>
     96c:	40 93 56 22 	sts	0x2256, r20	; 0x802256 <leds+0xa1>
     970:	83 ff       	sbrs	r24, 3
     972:	13 c0       	rjmp	.+38     	; 0x99a <play_lights_overlay_note_button_leds+0x114>
     974:	80 91 53 20 	lds	r24, 0x2053	; 0x802053 <BUTTON_3>
     978:	90 91 54 20 	lds	r25, 0x2054	; 0x802054 <BUTTON_3+0x1>
     97c:	a0 91 55 20 	lds	r26, 0x2055	; 0x802055 <BUTTON_3+0x2>
     980:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <leds+0xa2>
     984:	90 93 58 22 	sts	0x2258, r25	; 0x802258 <leds+0xa3>
     988:	a0 93 59 22 	sts	0x2259, r26	; 0x802259 <leds+0xa4>
     98c:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <leds+0xa5>
     990:	90 93 5b 22 	sts	0x225B, r25	; 0x80225b <leds+0xa6>
     994:	a0 93 5c 22 	sts	0x225C, r26	; 0x80225c <leds+0xa7>
     998:	08 95       	ret
     99a:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <LED_OFF>
     99e:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <LED_OFF+0x1>
     9a2:	a0 91 52 20 	lds	r26, 0x2052	; 0x802052 <LED_OFF+0x2>
     9a6:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <leds+0xa2>
     9aa:	90 93 58 22 	sts	0x2258, r25	; 0x802258 <leds+0xa3>
     9ae:	a0 93 59 22 	sts	0x2259, r26	; 0x802259 <leds+0xa4>
     9b2:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <leds+0xa5>
     9b6:	90 93 5b 22 	sts	0x225B, r25	; 0x80225b <leds+0xa6>
     9ba:	a0 93 5c 22 	sts	0x225C, r26	; 0x80225c <leds+0xa7>
     9be:	08 95       	ret

000009c0 <overlay_dingle_pos>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	bc 01       	movw	r22, r24
     9c6:	d0 e0       	ldi	r29, 0x00	; 0
     9c8:	42 c0       	rjmp	.+132    	; 0xa4e <overlay_dingle_pos+0x8e>
     9ca:	8d 2f       	mov	r24, r29
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	0d 2e       	mov	r0, r29
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <overlay_dingle_pos+0x1a>
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	0a 94       	dec	r0
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <overlay_dingle_pos+0x16>
     9de:	26 23       	and	r18, r22
     9e0:	37 23       	and	r19, r23
     9e2:	23 2b       	or	r18, r19
     9e4:	99 f5       	brne	.+102    	; 0xa4c <overlay_dingle_pos+0x8c>
     9e6:	dd 23       	and	r29, r29
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <overlay_dingle_pos+0x34>
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	98 2f       	mov	r25, r24
     9ee:	99 0f       	add	r25, r25
     9f0:	89 0f       	add	r24, r25
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <overlay_dingle_pos+0x36>
     9f4:	8d e2       	ldi	r24, 0x2D	; 45
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	27 c0       	rjmp	.+78     	; 0xa48 <overlay_dingle_pos+0x88>
     9fa:	9b ea       	ldi	r25, 0xAB	; 171
     9fc:	89 9f       	mul	r24, r25
     9fe:	91 2d       	mov	r25, r1
     a00:	11 24       	eor	r1, r1
     a02:	92 95       	swap	r25
     a04:	96 95       	lsr	r25
     a06:	97 70       	andi	r25, 0x07	; 7
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e3       	ldi	r19, 0x30	; 48
     a0c:	93 9f       	mul	r25, r19
     a0e:	20 19       	sub	r18, r0
     a10:	11 24       	eor	r1, r1
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4c 2f       	mov	r20, r28
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	2e 0f       	add	r18, r30
     a20:	3f 1f       	adc	r19, r31
     a22:	f9 01       	movw	r30, r18
     a24:	eb 54       	subi	r30, 0x4B	; 75
     a26:	fe 4d       	sbci	r31, 0xDE	; 222
     a28:	da 01       	movw	r26, r20
     a2a:	aa 0f       	add	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	4a 0f       	add	r20, r26
     a30:	5b 1f       	adc	r21, r27
     a32:	da 01       	movw	r26, r20
     a34:	a8 5c       	subi	r26, 0xC8	; 200
     a36:	bf 4d       	sbci	r27, 0xDF	; 223
     a38:	2d 91       	ld	r18, X+
     a3a:	3d 91       	ld	r19, X+
     a3c:	4c 91       	ld	r20, X
     a3e:	20 83       	st	Z, r18
     a40:	31 83       	std	Z+1, r19	; 0x01
     a42:	42 83       	std	Z+2, r20	; 0x02
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	cf 5f       	subi	r28, 0xFF	; 255
     a48:	c7 30       	cpi	r28, 0x07	; 7
     a4a:	b8 f2       	brcs	.-82     	; 0x9fa <overlay_dingle_pos+0x3a>
     a4c:	df 5f       	subi	r29, 0xFF	; 255
     a4e:	d0 31       	cpi	r29, 0x10	; 16
     a50:	08 f4       	brcc	.+2      	; 0xa54 <overlay_dingle_pos+0x94>
     a52:	bb cf       	rjmp	.-138    	; 0x9ca <overlay_dingle_pos+0xa>
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <play_lights_free_play>:
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
     a66:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	36 c0       	rjmp	.+108    	; 0xad8 <play_lights_free_play+0x7e>
	{
		leds[(i + offset) % GRUMBO_LED_COUNT] = rainbow_leds[i % RAINBOW_LED_COUNT];
     a6c:	00 91 81 21 	lds	r16, 0x2181	; 0x802181 <offset>
     a70:	80 2f       	mov	r24, r16
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	81 0f       	add	r24, r17
     a76:	91 1d       	adc	r25, r1
     a78:	60 e3       	ldi	r22, 0x30	; 48
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divmodhi4>
     a80:	ac 01       	movw	r20, r24
     a82:	9b ea       	ldi	r25, 0xAB	; 171
     a84:	19 9f       	mul	r17, r25
     a86:	91 2d       	mov	r25, r1
     a88:	11 24       	eor	r1, r1
     a8a:	96 95       	lsr	r25
     a8c:	96 95       	lsr	r25
     a8e:	96 95       	lsr	r25
     a90:	89 2f       	mov	r24, r25
     a92:	88 0f       	add	r24, r24
     a94:	98 0f       	add	r25, r24
     a96:	89 2f       	mov	r24, r25
     a98:	88 0f       	add	r24, r24
     a9a:	88 0f       	add	r24, r24
     a9c:	21 2f       	mov	r18, r17
     a9e:	28 1b       	sub	r18, r24
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	da 01       	movw	r26, r20
     aa4:	aa 0f       	add	r26, r26
     aa6:	bb 1f       	adc	r27, r27
     aa8:	4a 0f       	add	r20, r26
     aaa:	5b 1f       	adc	r21, r27
     aac:	da 01       	movw	r26, r20
     aae:	ab 54       	subi	r26, 0x4B	; 75
     ab0:	be 4d       	sbci	r27, 0xDE	; 222
     ab2:	f9 01       	movw	r30, r18
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	2e 0f       	add	r18, r30
     aba:	3f 1f       	adc	r19, r31
     abc:	f9 01       	movw	r30, r18
     abe:	ec 5e       	subi	r30, 0xEC	; 236
     ac0:	ff 4d       	sbci	r31, 0xDF	; 223
     ac2:	20 81       	ld	r18, Z
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	42 81       	ldd	r20, Z+2	; 0x02
     ac8:	2d 93       	st	X+, r18
     aca:	3d 93       	st	X+, r19
     acc:	4c 93       	st	X, r20
		
		if (offset == GRUMBO_LED_COUNT)
     ace:	00 33       	cpi	r16, 0x30	; 48
     ad0:	11 f4       	brne	.+4      	; 0xad6 <play_lights_free_play+0x7c>
		{
			offset = 0;
     ad2:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     ad6:	1f 5f       	subi	r17, 0xFF	; 255
     ad8:	10 33       	cpi	r17, 0x30	; 48
     ada:	40 f2       	brcs	.-112    	; 0xa6c <play_lights_free_play+0x12>
		if (offset == GRUMBO_LED_COUNT)
		{
			offset = 0;
		}
	}
	offset++;
     adc:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <offset>
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <offset>
		
	play_lights_overlay_note_button_leds(buttons);
     ae6:	8f 2d       	mov	r24, r15
     ae8:	0e 94 43 04 	call	0x886	; 0x886 <play_lights_overlay_note_button_leds>
	overlay_dingle_pos(dingle_pos);
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <overlay_dingle_pos>
	ws2812drv_start_transfer(leds, LED_COUNT);
     af2:	68 e3       	ldi	r22, 0x38	; 56
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	85 eb       	ldi	r24, 0xB5	; 181
     af8:	91 e2       	ldi	r25, 0x21	; 33
     afa:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <ws2812drv_start_transfer>
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	08 95       	ret

00000b0a <play_lights_nyan>:



void play_lights_nyan()
{
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	8f 92       	push	r8
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
	uint8_t j = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	uint8_t margin = ((half - RAINBOW_LED_COUNT) / 2);
	
	
	if (!(offset % 2))
     b1a:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <offset>
     b1e:	80 fd       	sbrc	r24, 0
     b20:	0b c0       	rjmp	.+22     	; 0xb38 <play_lights_nyan+0x2e>
	{
		
		if (bump > 0)
     b22:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <bump>
     b26:	18 16       	cp	r1, r24
     b28:	24 f4       	brge	.+8      	; 0xb32 <play_lights_nyan+0x28>
		{
			bump = -1;
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <bump>
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <play_lights_nyan+0x2e>
		}
		else
		{
			bump = 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <bump>
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	70 c0       	rjmp	.+224    	; 0xc1e <play_lights_nyan+0x114>
		}
	}
	
	for (i = 0; i < half; i++)
	{
		if (i < margin || i >= half - margin)
     b3e:	26 30       	cpi	r18, 0x06	; 6
     b40:	28 f0       	brcs	.+10     	; 0xb4c <play_lights_nyan+0x42>
     b42:	a2 2f       	mov	r26, r18
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	a2 31       	cpi	r26, 0x12	; 18
     b48:	b1 05       	cpc	r27, r1
     b4a:	4c f1       	brlt	.+82     	; 0xb9e <play_lights_nyan+0x94>
		{
			
			leds[i + bump] = (ws2812drv_led_t)LED_OFF;
     b4c:	82 2f       	mov	r24, r18
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 91 12 20 	lds	r26, 0x2012	; 0x802012 <bump>
     b54:	0a 2e       	mov	r0, r26
     b56:	00 0c       	add	r0, r0
     b58:	bb 0b       	sbc	r27, r27
     b5a:	fc 01       	movw	r30, r24
     b5c:	ea 0f       	add	r30, r26
     b5e:	fb 1f       	adc	r31, r27
     b60:	ef 01       	movw	r28, r30
     b62:	cc 0f       	add	r28, r28
     b64:	dd 1f       	adc	r29, r29
     b66:	ec 0f       	add	r30, r28
     b68:	fd 1f       	adc	r31, r29
     b6a:	eb 54       	subi	r30, 0x4B	; 75
     b6c:	fe 4d       	sbci	r31, 0xDE	; 222
     b6e:	60 90 50 20 	lds	r6, 0x2050	; 0x802050 <LED_OFF>
     b72:	70 90 51 20 	lds	r7, 0x2051	; 0x802051 <LED_OFF+0x1>
     b76:	80 90 52 20 	lds	r8, 0x2052	; 0x802052 <LED_OFF+0x2>
     b7a:	60 82       	st	Z, r6
     b7c:	71 82       	std	Z+1, r7	; 0x01
     b7e:	82 82       	std	Z+2, r8	; 0x02
			leds[i + half - bump] = (ws2812drv_led_t)LED_OFF;
     b80:	48 96       	adiw	r24, 0x18	; 24
     b82:	8a 1b       	sub	r24, r26
     b84:	9b 0b       	sbc	r25, r27
     b86:	fc 01       	movw	r30, r24
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	8e 0f       	add	r24, r30
     b8e:	9f 1f       	adc	r25, r31
     b90:	fc 01       	movw	r30, r24
     b92:	eb 54       	subi	r30, 0x4B	; 75
     b94:	fe 4d       	sbci	r31, 0xDE	; 222
     b96:	60 82       	st	Z, r6
     b98:	71 82       	std	Z+1, r7	; 0x01
     b9a:	82 82       	std	Z+2, r8	; 0x02
     b9c:	3f c0       	rjmp	.+126    	; 0xc1c <play_lights_nyan+0x112>
		}
		else
		{
			
			leds[i + bump] = 	
     b9e:	c0 91 12 20 	lds	r28, 0x2012	; 0x802012 <bump>
     ba2:	0c 2e       	mov	r0, r28
     ba4:	00 0c       	add	r0, r0
     ba6:	dd 0b       	sbc	r29, r29
     ba8:	cd 01       	movw	r24, r26
     baa:	8c 0f       	add	r24, r28
     bac:	9d 1f       	adc	r25, r29
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e1       	ldi	r21, 0x10	; 16
     bb2:	60 e1       	ldi	r22, 0x10	; 16
     bb4:	fc 01       	movw	r30, r24
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	8e 0f       	add	r24, r30
     bbc:	9f 1f       	adc	r25, r31
     bbe:	fc 01       	movw	r30, r24
     bc0:	eb 54       	subi	r30, 0x4B	; 75
     bc2:	fe 4d       	sbci	r31, 0xDE	; 222
     bc4:	40 83       	st	Z, r20
     bc6:	51 83       	std	Z+1, r21	; 0x01
     bc8:	62 83       	std	Z+2, r22	; 0x02
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     bca:	58 96       	adiw	r26, 0x18	; 24
     bcc:	ac 1b       	sub	r26, r28
     bce:	bd 0b       	sbc	r27, r29
     bd0:	8b ea       	ldi	r24, 0xAB	; 171
     bd2:	38 9f       	mul	r19, r24
     bd4:	81 2d       	mov	r24, r1
     bd6:	11 24       	eor	r1, r1
     bd8:	86 95       	lsr	r24
     bda:	86 95       	lsr	r24
     bdc:	86 95       	lsr	r24
     bde:	98 2f       	mov	r25, r24
     be0:	99 0f       	add	r25, r25
     be2:	89 0f       	add	r24, r25
     be4:	98 2f       	mov	r25, r24
     be6:	99 0f       	add	r25, r25
     be8:	99 0f       	add	r25, r25
     bea:	83 2f       	mov	r24, r19
     bec:	89 1b       	sub	r24, r25
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	fd 01       	movw	r30, r26
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	ae 0f       	add	r26, r30
     bf8:	bf 1f       	adc	r27, r31
     bfa:	ab 54       	subi	r26, 0x4B	; 75
     bfc:	be 4d       	sbci	r27, 0xDE	; 222
     bfe:	fc 01       	movw	r30, r24
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	8e 0f       	add	r24, r30
     c06:	9f 1f       	adc	r25, r31
     c08:	fc 01       	movw	r30, r24
     c0a:	ec 5e       	subi	r30, 0xEC	; 236
     c0c:	ff 4d       	sbci	r31, 0xDF	; 223
     c0e:	60 80       	ld	r6, Z
     c10:	71 80       	ldd	r7, Z+1	; 0x01
     c12:	82 80       	ldd	r8, Z+2	; 0x02
     c14:	6d 92       	st	X+, r6
     c16:	7d 92       	st	X+, r7
     c18:	8c 92       	st	X, r8
     c1a:	3f 5f       	subi	r19, 0xFF	; 255
		{
			bump = 1;
		}
	}
	
	for (i = 0; i < half; i++)
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	28 31       	cpi	r18, 0x18	; 24
     c20:	08 f4       	brcc	.+2      	; 0xc24 <play_lights_nyan+0x11a>
     c22:	8d cf       	rjmp	.-230    	; 0xb3e <play_lights_nyan+0x34>
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
		}
				
	}
	
	leds[margin + bump] = (ws2812drv_led_t)LED_MAX_ON;
     c24:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <bump>
     c28:	08 2e       	mov	r0, r24
     c2a:	00 0c       	add	r0, r0
     c2c:	99 0b       	sbc	r25, r25
     c2e:	9c 01       	movw	r18, r24
     c30:	2a 5f       	subi	r18, 0xFA	; 250
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	f9 01       	movw	r30, r18
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	2e 0f       	add	r18, r30
     c3c:	3f 1f       	adc	r19, r31
     c3e:	f9 01       	movw	r30, r18
     c40:	eb 54       	subi	r30, 0x4B	; 75
     c42:	fe 4d       	sbci	r31, 0xDE	; 222
     c44:	20 91 4d 20 	lds	r18, 0x204D	; 0x80204d <LED_MAX_ON>
     c48:	30 91 4e 20 	lds	r19, 0x204E	; 0x80204e <LED_MAX_ON+0x1>
     c4c:	40 91 4f 20 	lds	r20, 0x204F	; 0x80204f <LED_MAX_ON+0x2>
     c50:	20 83       	st	Z, r18
     c52:	31 83       	std	Z+1, r19	; 0x01
     c54:	42 83       	std	Z+2, r20	; 0x02
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)LED_MAX_ON;
     c56:	41 96       	adiw	r24, 0x11	; 17
     c58:	fc 01       	movw	r30, r24
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	8e 0f       	add	r24, r30
     c60:	9f 1f       	adc	r25, r31
     c62:	fc 01       	movw	r30, r24
     c64:	eb 54       	subi	r30, 0x4B	; 75
     c66:	fe 4d       	sbci	r31, 0xDE	; 222
     c68:	20 83       	st	Z, r18
     c6a:	31 83       	std	Z+1, r19	; 0x01
     c6c:	42 83       	std	Z+2, r20	; 0x02
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     c6e:	20 e3       	ldi	r18, 0x30	; 48
     c70:	39 c0       	rjmp	.+114    	; 0xce4 <play_lights_nyan+0x1da>
	{

		if (offset % 23)
     c72:	30 91 81 21 	lds	r19, 0x2181	; 0x802181 <offset>
     c76:	85 e6       	ldi	r24, 0x65	; 101
     c78:	38 9f       	mul	r19, r24
     c7a:	91 2d       	mov	r25, r1
     c7c:	11 24       	eor	r1, r1
     c7e:	83 2f       	mov	r24, r19
     c80:	89 1b       	sub	r24, r25
     c82:	86 95       	lsr	r24
     c84:	89 0f       	add	r24, r25
     c86:	82 95       	swap	r24
     c88:	8f 70       	andi	r24, 0x0F	; 15
     c8a:	97 e1       	ldi	r25, 0x17	; 23
     c8c:	89 9f       	mul	r24, r25
     c8e:	30 19       	sub	r19, r0
     c90:	11 24       	eor	r1, r1
     c92:	33 23       	and	r19, r19
     c94:	99 f0       	breq	.+38     	; 0xcbc <play_lights_nyan+0x1b2>
		{
			leds[i] = (ws2812drv_led_t){ .r=0, .g=0, .b = MAX_BRIGHTNESS};
     c96:	82 2f       	mov	r24, r18
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	c1 2c       	mov	r12, r1
     c9c:	d1 2c       	mov	r13, r1
     c9e:	68 94       	set
     ca0:	ee 24       	eor	r14, r14
     ca2:	e6 f8       	bld	r14, 6
     ca4:	fc 01       	movw	r30, r24
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	8e 0f       	add	r24, r30
     cac:	9f 1f       	adc	r25, r31
     cae:	fc 01       	movw	r30, r24
     cb0:	eb 54       	subi	r30, 0x4B	; 75
     cb2:	fe 4d       	sbci	r31, 0xDE	; 222
     cb4:	c0 82       	st	Z, r12
     cb6:	d1 82       	std	Z+1, r13	; 0x01
     cb8:	e2 82       	std	Z+2, r14	; 0x02
     cba:	13 c0       	rjmp	.+38     	; 0xce2 <play_lights_nyan+0x1d8>
		}
		else
		{
			leds[i] = (ws2812drv_led_t)LED_MAX_ON;
     cbc:	82 2f       	mov	r24, r18
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	fc 01       	movw	r30, r24
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	8e 0f       	add	r24, r30
     cc8:	9f 1f       	adc	r25, r31
     cca:	fc 01       	movw	r30, r24
     ccc:	eb 54       	subi	r30, 0x4B	; 75
     cce:	fe 4d       	sbci	r31, 0xDE	; 222
     cd0:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <LED_MAX_ON>
     cd4:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <LED_MAX_ON+0x1>
     cd8:	a0 91 4f 20 	lds	r26, 0x204F	; 0x80204f <LED_MAX_ON+0x2>
     cdc:	80 83       	st	Z, r24
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	a2 83       	std	Z+2, r26	; 0x02
	leds[margin + bump] = (ws2812drv_led_t)LED_MAX_ON;
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)LED_MAX_ON;
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     ce2:	2f 5f       	subi	r18, 0xFF	; 255
     ce4:	28 33       	cpi	r18, 0x38	; 56
     ce6:	28 f2       	brcs	.-118    	; 0xc72 <play_lights_nyan+0x168>
		{
			leds[i] = (ws2812drv_led_t)LED_MAX_ON;
		}
	}
	
	offset++;
     ce8:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <offset>
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
     cf2:	68 e3       	ldi	r22, 0x38	; 56
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	85 eb       	ldi	r24, 0xB5	; 181
     cf8:	91 e2       	ldi	r25, 0x21	; 33
     cfa:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <ws2812drv_start_transfer>
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	8f 90       	pop	r8
     d0a:	7f 90       	pop	r7
     d0c:	6f 90       	pop	r6
     d0e:	08 95       	ret

00000d10 <play_lights_portal>:

void play_lights_portal()
{
     d10:	6f 92       	push	r6
     d12:	7f 92       	push	r7
     d14:	8f 92       	push	r8
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	
	if (offset <= 16)
     d20:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <offset>
     d24:	81 31       	cpi	r24, 0x11	; 17
     d26:	30 f4       	brcc	.+12     	; 0xd34 <play_lights_portal+0x24>
	{
		bump += 4;
     d28:	90 91 12 20 	lds	r25, 0x2012	; 0x802012 <bump>
     d2c:	9c 5f       	subi	r25, 0xFC	; 252
     d2e:	90 93 12 20 	sts	0x2012, r25	; 0x802012 <bump>
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <play_lights_portal+0x2e>
	}
	else
	{
		bump -= 4;
     d34:	90 91 12 20 	lds	r25, 0x2012	; 0x802012 <bump>
     d38:	94 50       	subi	r25, 0x04	; 4
     d3a:	90 93 12 20 	sts	0x2012, r25	; 0x802012 <bump>
	}
	
	if (offset == 32)
     d3e:	80 32       	cpi	r24, 0x20	; 32
     d40:	11 f4       	brne	.+4      	; 0xd46 <play_lights_portal+0x36>
	{
		offset = 0;
     d42:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <offset>
	offset++;
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_portal()
{
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	34 c0       	rjmp	.+104    	; 0xdb2 <play_lights_portal+0xa2>
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
			.r = 0,
			.g = ((i * 2) + bump) / 8,
     d4a:	2a 2f       	mov	r18, r26
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	a9 01       	movw	r20, r18
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <bump>
     d58:	68 2f       	mov	r22, r24
     d5a:	88 0f       	add	r24, r24
     d5c:	77 0b       	sbc	r23, r23
     d5e:	46 0f       	add	r20, r22
     d60:	57 1f       	adc	r21, r23
     d62:	55 23       	and	r21, r21
     d64:	14 f4       	brge	.+4      	; 0xd6a <play_lights_portal+0x5a>
     d66:	49 5f       	subi	r20, 0xF9	; 249
     d68:	5f 4f       	sbci	r21, 0xFF	; 255
     d6a:	55 95       	asr	r21
     d6c:	47 95       	ror	r20
     d6e:	55 95       	asr	r21
     d70:	47 95       	ror	r20
     d72:	55 95       	asr	r21
     d74:	47 95       	ror	r20
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
     d76:	80 e2       	ldi	r24, 0x20	; 32
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	82 1b       	sub	r24, r18
     d7c:	93 0b       	sbc	r25, r19
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	86 0f       	add	r24, r22
     d84:	97 1f       	adc	r25, r23
     d86:	99 23       	and	r25, r25
     d88:	0c f4       	brge	.+2      	; 0xd8c <play_lights_portal+0x7c>
     d8a:	03 96       	adiw	r24, 0x03	; 3
     d8c:	95 95       	asr	r25
     d8e:	87 95       	ror	r24
     d90:	95 95       	asr	r25
     d92:	87 95       	ror	r24
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
     d94:	64 2e       	mov	r6, r20
     d96:	71 2c       	mov	r7, r1
     d98:	88 2e       	mov	r8, r24
     d9a:	f9 01       	movw	r30, r18
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	2e 0f       	add	r18, r30
     da2:	3f 1f       	adc	r19, r31
     da4:	f9 01       	movw	r30, r18
     da6:	eb 54       	subi	r30, 0x4B	; 75
     da8:	fe 4d       	sbci	r31, 0xDE	; 222
     daa:	60 82       	st	Z, r6
     dac:	71 82       	std	Z+1, r7	; 0x01
     dae:	82 82       	std	Z+2, r8	; 0x02
	if (offset == 32)
	{
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
     db0:	af 5f       	subi	r26, 0xFF	; 255
     db2:	a8 31       	cpi	r26, 0x18	; 24
     db4:	50 f2       	brcs	.-108    	; 0xd4a <play_lights_portal+0x3a>
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <play_lights_portal+0x128>
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
     dba:	6a 2f       	mov	r22, r26
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	9b 01       	movw	r18, r22
     dc0:	28 5e       	subi	r18, 0xE8	; 232
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	86 1b       	sub	r24, r22
     dca:	97 0b       	sbc	r25, r23
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <bump>
     dd4:	84 0f       	add	r24, r20
     dd6:	91 1d       	adc	r25, r1
     dd8:	47 fd       	sbrc	r20, 7
     dda:	9a 95       	dec	r25
     ddc:	fc 01       	movw	r30, r24
     dde:	99 23       	and	r25, r25
     de0:	0c f4       	brge	.+2      	; 0xde4 <play_lights_portal+0xd4>
     de2:	33 96       	adiw	r30, 0x03	; 3
     de4:	f5 95       	asr	r31
     de6:	e7 95       	ror	r30
     de8:	f5 95       	asr	r31
     dea:	e7 95       	ror	r30
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
     dec:	ac 01       	movw	r20, r24
     dee:	99 23       	and	r25, r25
     df0:	14 f4       	brge	.+4      	; 0xdf6 <play_lights_portal+0xe6>
     df2:	4f 5f       	subi	r20, 0xFF	; 255
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	55 95       	asr	r21
     df8:	47 95       	ror	r20
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
			.b = (half-i)/16
     dfa:	88 e1       	ldi	r24, 0x18	; 24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	ec 01       	movw	r28, r24
     e00:	c6 1b       	sub	r28, r22
     e02:	d7 0b       	sbc	r29, r23
     e04:	ce 01       	movw	r24, r28
     e06:	0a f4       	brpl	.+2      	; 0xe0a <play_lights_portal+0xfa>
     e08:	0f 96       	adiw	r24, 0x0f	; 15
     e0a:	95 95       	asr	r25
     e0c:	87 95       	ror	r24
     e0e:	95 95       	asr	r25
     e10:	87 95       	ror	r24
     e12:	95 95       	asr	r25
     e14:	87 95       	ror	r24
     e16:	95 95       	asr	r25
     e18:	87 95       	ror	r24
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
     e1a:	ce 2e       	mov	r12, r30
     e1c:	d4 2e       	mov	r13, r20
     e1e:	e8 2e       	mov	r14, r24
     e20:	f9 01       	movw	r30, r18
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	2e 0f       	add	r18, r30
     e28:	3f 1f       	adc	r19, r31
     e2a:	f9 01       	movw	r30, r18
     e2c:	eb 54       	subi	r30, 0x4B	; 75
     e2e:	fe 4d       	sbci	r31, 0xDE	; 222
     e30:	c0 82       	st	Z, r12
     e32:	d1 82       	std	Z+1, r13	; 0x01
     e34:	e2 82       	std	Z+2, r14	; 0x02
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
		};
		
	}
	
	for (i = 0; i < half; i++)
     e36:	af 5f       	subi	r26, 0xFF	; 255
     e38:	a8 31       	cpi	r26, 0x18	; 24
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <play_lights_portal+0x12e>
     e3c:	be cf       	rjmp	.-132    	; 0xdba <play_lights_portal+0xaa>
			.b = (half-i)/16
		};
			
	}
	
	offset++;
     e3e:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <offset>
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
     e48:	68 e3       	ldi	r22, 0x38	; 56
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	85 eb       	ldi	r24, 0xB5	; 181
     e4e:	91 e2       	ldi	r25, 0x21	; 33
     e50:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <ws2812drv_start_transfer>
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	8f 90       	pop	r8
     e60:	7f 90       	pop	r7
     e62:	6f 90       	pop	r6
     e64:	08 95       	ret

00000e66 <play_lights_game>:

void play_lights_game(uint16_t dingle_pos, uint8_t buttons)
{
     e66:	2f 92       	push	r2
     e68:	3f 92       	push	r3
     e6a:	4f 92       	push	r4
     e6c:	6f 92       	push	r6
     e6e:	7f 92       	push	r7
     e70:	8f 92       	push	r8
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ac 01       	movw	r20, r24
     e7e:	d6 2f       	mov	r29, r22
	uint8_t i = 0;
     e80:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	for (; i < quarter; i++)
     e82:	13 c0       	rjmp	.+38     	; 0xeaa <play_lights_game+0x44>
	{
		leds[i] = (ws2812drv_led_t){BUTTON_0.r / divisor, BUTTON_0.g / divisor, BUTTON_0.b / divisor};
     e84:	29 2f       	mov	r18, r25
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	68 94       	set
     e8a:	22 24       	eor	r2, r2
     e8c:	21 f8       	bld	r2, 1
     e8e:	31 2c       	mov	r3, r1
     e90:	41 2c       	mov	r4, r1
     e92:	f9 01       	movw	r30, r18
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	2e 0f       	add	r18, r30
     e9a:	3f 1f       	adc	r19, r31
     e9c:	f9 01       	movw	r30, r18
     e9e:	eb 54       	subi	r30, 0x4B	; 75
     ea0:	fe 4d       	sbci	r31, 0xDE	; 222
     ea2:	20 82       	st	Z, r2
     ea4:	31 82       	std	Z+1, r3	; 0x01
     ea6:	42 82       	std	Z+2, r4	; 0x02
void play_lights_game(uint16_t dingle_pos, uint8_t buttons)
{
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	for (; i < quarter; i++)
     ea8:	9f 5f       	subi	r25, 0xFF	; 255
     eaa:	9c 30       	cpi	r25, 0x0C	; 12
     eac:	58 f3       	brcs	.-42     	; 0xe84 <play_lights_game+0x1e>
     eae:	0f c0       	rjmp	.+30     	; 0xece <play_lights_game+0x68>
	{
		leds[i] = (ws2812drv_led_t){BUTTON_0.r / divisor, BUTTON_0.g / divisor, BUTTON_0.b / divisor};
	}
	for (; i < quarter * 2; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_1.r / divisor, BUTTON_1.g / divisor, BUTTON_1.b / divisor};
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	b2 e0       	ldi	r27, 0x02	; 2
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	2e 0f       	add	r18, r30
     ebe:	3f 1f       	adc	r19, r31
     ec0:	f9 01       	movw	r30, r18
     ec2:	eb 54       	subi	r30, 0x4B	; 75
     ec4:	fe 4d       	sbci	r31, 0xDE	; 222
     ec6:	a0 83       	st	Z, r26
     ec8:	b1 83       	std	Z+1, r27	; 0x01
     eca:	c2 83       	std	Z+2, r28	; 0x02
	uint8_t divisor = 32;
	for (; i < quarter; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_0.r / divisor, BUTTON_0.g / divisor, BUTTON_0.b / divisor};
	}
	for (; i < quarter * 2; i++)
     ecc:	9f 5f       	subi	r25, 0xFF	; 255
     ece:	29 2f       	mov	r18, r25
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	28 31       	cpi	r18, 0x18	; 24
     ed4:	31 05       	cpc	r19, r1
     ed6:	64 f3       	brlt	.-40     	; 0xeb0 <play_lights_game+0x4a>
     ed8:	11 c0       	rjmp	.+34     	; 0xefc <play_lights_game+0x96>
	{
		leds[i] = (ws2812drv_led_t){BUTTON_1.r / divisor, BUTTON_1.g / divisor, BUTTON_1.b / divisor};
	}
	for (; i < quarter * 3; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_2.r / divisor, BUTTON_2.g / divisor, BUTTON_2.b / divisor};
     eda:	61 2c       	mov	r6, r1
     edc:	71 2c       	mov	r7, r1
     ede:	68 94       	set
     ee0:	88 24       	eor	r8, r8
     ee2:	81 f8       	bld	r8, 1
     ee4:	f9 01       	movw	r30, r18
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	2e 0f       	add	r18, r30
     eec:	3f 1f       	adc	r19, r31
     eee:	f9 01       	movw	r30, r18
     ef0:	eb 54       	subi	r30, 0x4B	; 75
     ef2:	fe 4d       	sbci	r31, 0xDE	; 222
     ef4:	60 82       	st	Z, r6
     ef6:	71 82       	std	Z+1, r7	; 0x01
     ef8:	82 82       	std	Z+2, r8	; 0x02
	}
	for (; i < quarter * 2; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_1.r / divisor, BUTTON_1.g / divisor, BUTTON_1.b / divisor};
	}
	for (; i < quarter * 3; i++)
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	29 2f       	mov	r18, r25
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	24 32       	cpi	r18, 0x24	; 36
     f02:	31 05       	cpc	r19, r1
     f04:	54 f3       	brlt	.-44     	; 0xeda <play_lights_game+0x74>
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <play_lights_game+0xc4>
	{
		leds[i] = (ws2812drv_led_t){BUTTON_2.r / divisor, BUTTON_2.g / divisor, BUTTON_2.b / divisor};
	}
	for (; i < quarter * 4; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_3.r / divisor, BUTTON_3.g / divisor, BUTTON_3.b / divisor};
     f08:	cc 24       	eor	r12, r12
     f0a:	c3 94       	inc	r12
     f0c:	dd 24       	eor	r13, r13
     f0e:	d3 94       	inc	r13
     f10:	e1 2c       	mov	r14, r1
     f12:	f9 01       	movw	r30, r18
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	2e 0f       	add	r18, r30
     f1a:	3f 1f       	adc	r19, r31
     f1c:	f9 01       	movw	r30, r18
     f1e:	eb 54       	subi	r30, 0x4B	; 75
     f20:	fe 4d       	sbci	r31, 0xDE	; 222
     f22:	c0 82       	st	Z, r12
     f24:	d1 82       	std	Z+1, r13	; 0x01
     f26:	e2 82       	std	Z+2, r14	; 0x02
	}
	for (; i < quarter * 3; i++)
	{
		leds[i] = (ws2812drv_led_t){BUTTON_2.r / divisor, BUTTON_2.g / divisor, BUTTON_2.b / divisor};
	}
	for (; i < quarter * 4; i++)
     f28:	9f 5f       	subi	r25, 0xFF	; 255
     f2a:	29 2f       	mov	r18, r25
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	20 33       	cpi	r18, 0x30	; 48
     f30:	31 05       	cpc	r19, r1
     f32:	54 f3       	brlt	.-44     	; 0xf08 <play_lights_game+0xa2>
	{
		leds[i] = (ws2812drv_led_t){BUTTON_3.r / divisor, BUTTON_3.g / divisor, BUTTON_3.b / divisor};
	}		
	
	overlay_dingle_pos(dingle_pos);	
     f34:	ca 01       	movw	r24, r20
     f36:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <overlay_dingle_pos>
	play_lights_overlay_note_button_leds(buttons);
     f3a:	8d 2f       	mov	r24, r29
     f3c:	0e 94 43 04 	call	0x886	; 0x886 <play_lights_overlay_note_button_leds>
	ws2812drv_start_transfer(leds, LED_COUNT);
     f40:	68 e3       	ldi	r22, 0x38	; 56
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	85 eb       	ldi	r24, 0xB5	; 181
     f46:	91 e2       	ldi	r25, 0x21	; 33
     f48:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <ws2812drv_start_transfer>
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	4f 90       	pop	r4
     f5e:	3f 90       	pop	r3
     f60:	2f 90       	pop	r2
     f62:	08 95       	ret

00000f64 <update_display_song_play_cb>:



void update_display_song_play_cb()
{
	if (get_start_mode() == NYAN_sm)
     f64:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <get_start_mode>
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	19 f4       	brne	.+6      	; 0xf72 <update_display_song_play_cb+0xe>
	{
		play_lights_nyan();
     f6c:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_lights_nyan>
     f70:	08 95       	ret
	}
	else
	{
		play_lights_portal();	
     f72:	0e 94 88 06 	call	0xd10	; 0xd10 <play_lights_portal>
     f76:	08 95       	ret

00000f78 <clk_init>:
	
}

void clk_init()
{
	CCP = CCP_IOREG_gc;
     f78:	88 ed       	ldi	r24, 0xD8	; 216
     f7a:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
     f82:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
     f86:	81 ff       	sbrs	r24, 1
     f88:	fc cf       	rjmp	.-8      	; 0xf82 <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
     f8a:	88 ed       	ldi	r24, 0xD8	; 216
     f8c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
     f94:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
     f96:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
     f9a:	08 95       	ret

00000f9c <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
     fa2:	08 95       	ret

00000fa4 <io_init>:

void io_init()
{
	
	//Mode change pin
	PORTA.DIRCLR = PIN0_bm;
     fa4:	e0 e0       	ldi	r30, 0x00	; 0
     fa6:	f6 e0       	ldi	r31, 0x06	; 6
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc;
     fac:	88 e1       	ldi	r24, 0x18	; 24
     fae:	80 8b       	std	Z+16, r24	; 0x10

	//Mode indication lights (all off by default)
	PORTD.DIRSET = PIN5_bm | PIN6_bm | PIN7_bm;
     fb0:	a0 e6       	ldi	r26, 0x60	; 96
     fb2:	b6 e0       	ldi	r27, 0x06	; 6
     fb4:	80 ee       	ldi	r24, 0xE0	; 224
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	8c 93       	st	X, r24
     fba:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTCLR = PIN5_bm | PIN6_bm | PIN7_bm;
     fbc:	16 96       	adiw	r26, 0x06	; 6
     fbe:	8c 93       	st	X, r24
	
	//Hall sensor enable (off by default)
	PORTC.DIRSET = PIN7_bm;
     fc0:	a0 e4       	ldi	r26, 0x40	; 64
     fc2:	b6 e0       	ldi	r27, 0x06	; 6
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	8c 93       	st	X, r24
     fca:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.OUTCLR = PIN7_bm;
     fcc:	16 96       	adiw	r26, 0x06	; 6
     fce:	8c 93       	st	X, r24
	
	//DACA0 out
	PORTA.DIRSET = PIN2_bm;
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	81 83       	std	Z+1, r24	; 0x01
     fd4:	08 95       	ret

00000fd6 <note_buttons_init>:
}

void note_buttons_init()
{
	//Turn on hall sensors
	PORTC.OUTSET = PIN7_bm;
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
	
	//note button
	PORTA.DIRCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     fdc:	e0 e0       	ldi	r30, 0x00	; 0
     fde:	f6 e0       	ldi	r31, 0x06	; 6
     fe0:	80 ef       	ldi	r24, 0xF0	; 240
     fe2:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
     fe4:	88 e1       	ldi	r24, 0x18	; 24
     fe6:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_OPC_PULLUP_gc;
     fe8:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLUP_gc;
     fea:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLUP_gc;
     fec:	87 8b       	std	Z+23, r24	; 0x17
     fee:	08 95       	ret

00000ff0 <dingle_input_init>:
}

void dingle_input_init()
{
	expander_init();
     ff0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <expander_init>
     ff4:	08 95       	ret

00000ff6 <song_out_init>:
}

void song_out_init()
{
	//TCC5 and TCD5 out 
	PORTC.DIRSET = PIN4_bm; 	
     ff6:	80 e1       	ldi	r24, 0x10	; 16
     ff8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	PORTD.DIRSET = PIN4_bm;
     ffc:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	//Force dac0 output high 
	PORTA.OUTSET = PIN2_bm;
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
    1006:	08 95       	ret

00001008 <start_up>:
}

void start_up(uint8_t mode)
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	a2 97       	sbiw	r28, 0x22	; 34
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	de bf       	out	0x3e, r29	; 62
	switch(mode)
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	87 30       	cpi	r24, 0x07	; 7
    101a:	91 05       	cpc	r25, r1
    101c:	08 f0       	brcs	.+2      	; 0x1020 <start_up+0x18>
    101e:	ec c0       	rjmp	.+472    	; 0x11f8 <start_up+0x1f0>
    1020:	fc 01       	movw	r30, r24
    1022:	ea 5a       	subi	r30, 0xAA	; 170
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__tablejump2__>
	{
		case STANDBY_sm:
			break;
		case FREEPLAY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    1030:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <note_buttons_init>
			note_player_init();
    1034:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <note_player_init>
			dingle_input_init();
    1038:	0e 94 f8 07 	call	0xff0	; 0xff0 <dingle_input_init>
			
			break;
    103c:	dd c0       	rjmp	.+442    	; 0x11f8 <start_up+0x1f0>
		case GAME_EASY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    103e:	80 e1       	ldi	r24, 0x10	; 16
    1040:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    1044:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <note_buttons_init>
			note_player_init();
    1048:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <note_player_init>
			dingle_input_init();
    104c:	0e 94 f8 07 	call	0xff0	; 0xff0 <dingle_input_init>
			games_init(easy);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 ce 02 	call	0x59c	; 0x59c <games_init>
			
			break;
    1056:	d0 c0       	rjmp	.+416    	; 0x11f8 <start_up+0x1f0>
		case GAME_HARD_sm:
			note_buttons_init();
    1058:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <note_buttons_init>
			note_player_init();
    105c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <note_player_init>
			dingle_input_init();
    1060:	0e 94 f8 07 	call	0xff0	; 0xff0 <dingle_input_init>
			games_init(hard);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 ce 02 	call	0x59c	; 0x59c <games_init>
			
			break;
    106a:	c6 c0       	rjmp	.+396    	; 0x11f8 <start_up+0x1f0>
		case NYAN_sm:
			
			song_out_init();
    106c:	0e 94 fb 07 	call	0xff6	; 0xff6 <song_out_init>
			SongInitParams params;
			params.bmp_period = nyanBPMPeriod;
    1070:	8b ed       	ldi	r24, 0xDB	; 219
    1072:	95 e3       	ldi	r25, 0x35	; 53
    1074:	89 a3       	std	Y+33, r24	; 0x21
    1076:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = nyanIntroTreble;
    1078:	8a e2       	ldi	r24, 0x2A	; 42
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(nyanIntroTreble);
    1080:	8f e1       	ldi	r24, 0x1F	; 31
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = nyanIntroExtTreble;
    1088:	86 e2       	ldi	r24, 0x26	; 38
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	9e 83       	std	Y+6, r25	; 0x06
			params.ch0.intro.extension_size = sizeof(nyanIntroExtTreble);
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	8f 83       	std	Y+7, r24	; 0x07
    1096:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = nyanMainTreble;
    1098:	82 e5       	ldi	r24, 0x52	; 82
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	89 87       	std	Y+9, r24	; 0x09
    109e:	9a 87       	std	Y+10, r25	; 0x0a
			params.ch0.main.track_size = sizeof(nyanMainTreble);
    10a0:	84 ed       	ldi	r24, 0xD4	; 212
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	8b 87       	std	Y+11, r24	; 0x0b
    10a6:	9c 87       	std	Y+12, r25	; 0x0c
			params.ch0.main.extension_data = nyanMainExtTreble;
    10a8:	87 e3       	ldi	r24, 0x37	; 55
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	8d 87       	std	Y+13, r24	; 0x0d
    10ae:	9e 87       	std	Y+14, r25	; 0x0e
			params.ch0.main.extension_size = sizeof(nyanMainExtTreble);
    10b0:	8b e1       	ldi	r24, 0x1B	; 27
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	8f 87       	std	Y+15, r24	; 0x0f
    10b6:	98 8b       	std	Y+16, r25	; 0x10
			params.ch1.intro.track_data = nyanIntroBass;
    10b8:	85 e3       	ldi	r24, 0x35	; 53
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	89 8b       	std	Y+17, r24	; 0x11
    10be:	9a 8b       	std	Y+18, r25	; 0x12
			params.ch1.intro.track_size = sizeof(nyanIntroBass);
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	8b 8b       	std	Y+19, r24	; 0x13
    10c6:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = nyanIntroExtBass;
    10c8:	84 e3       	ldi	r24, 0x34	; 52
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	8d 8b       	std	Y+21, r24	; 0x15
    10ce:	9e 8b       	std	Y+22, r25	; 0x16
			params.ch1.intro.extension_size = sizeof(nyanIntroExtBass);			
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	8f 8b       	std	Y+23, r24	; 0x17
    10d6:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = nyanMainBass;
    10d8:	83 e2       	ldi	r24, 0x23	; 35
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	89 8f       	std	Y+25, r24	; 0x19
    10de:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(nyanMainBass);
    10e0:	81 e1       	ldi	r24, 0x11	; 17
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	8b 8f       	std	Y+27, r24	; 0x1b
    10e6:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = nyanMainExtBass;
    10e8:	80 e2       	ldi	r24, 0x20	; 32
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	8d 8f       	std	Y+29, r24	; 0x1d
    10ee:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(nyanMainExtBass);
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	8f 8f       	std	Y+31, r24	; 0x1f
    10f6:	98 a3       	std	Y+32, r25	; 0x20
			
			song_player_init(params, update_display_song_play_cb);
    10f8:	82 eb       	ldi	r24, 0xB2	; 178
    10fa:	97 e0       	ldi	r25, 0x07	; 7
    10fc:	9f 93       	push	r25
    10fe:	8f 93       	push	r24
    1100:	8d b7       	in	r24, 0x3d	; 61
    1102:	9e b7       	in	r25, 0x3e	; 62
    1104:	82 97       	sbiw	r24, 0x22	; 34
    1106:	8d bf       	out	0x3d, r24	; 61
    1108:	9e bf       	out	0x3e, r25	; 62
    110a:	ad b7       	in	r26, 0x3d	; 61
    110c:	be b7       	in	r27, 0x3e	; 62
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	82 e2       	ldi	r24, 0x22	; 34
    1112:	fe 01       	movw	r30, r28
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	01 90       	ld	r0, Z+
    1118:	0d 92       	st	X+, r0
    111a:	8a 95       	dec	r24
    111c:	e1 f7       	brne	.-8      	; 0x1116 <start_up+0x10e>
    111e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <song_player_init>
			song_start();
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <song_start>
			
			
			break;
    112a:	66 c0       	rjmp	.+204    	; 0x11f8 <start_up+0x1f0>
		case PORTAL_sm:		
			if (get_allow_portal())
    112c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <get_allow_portal>
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <start_up+0x12e>
    1134:	61 c0       	rjmp	.+194    	; 0x11f8 <start_up+0x1f0>
			{
				song_out_init();
    1136:	0e 94 fb 07 	call	0xff6	; 0xff6 <song_out_init>
				SongInitParams params;
				params.bmp_period = portalBPMPeriod;
    113a:	89 e0       	ldi	r24, 0x09	; 9
    113c:	9d e3       	ldi	r25, 0x3D	; 61
    113e:	89 a3       	std	Y+33, r24	; 0x21
    1140:	9a a3       	std	Y+34, r25	; 0x22
				params.ch0.intro.track_data = portalIntroTreble;
    1142:	8c e1       	ldi	r24, 0x1C	; 28
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	9a 83       	std	Y+2, r25	; 0x02
				params.ch0.intro.track_size = sizeof(portalIntroTreble);
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	9c 83       	std	Y+4, r25	; 0x04
				params.ch0.intro.extension_data = portalIntroExtTreble;
    1152:	8b e1       	ldi	r24, 0x1B	; 27
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	9e 83       	std	Y+6, r25	; 0x06
				params.ch0.intro.extension_size = sizeof(portalIntroExtTreble);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
				params.ch0.main.track_data = portalMainTreble;
    1162:	2e e8       	ldi	r18, 0x8E	; 142
    1164:	31 e0       	ldi	r19, 0x01	; 1
    1166:	29 87       	std	Y+9, r18	; 0x09
    1168:	3a 87       	std	Y+10, r19	; 0x0a
				params.ch0.main.track_size = sizeof(portalMainTreble);
    116a:	2d e8       	ldi	r18, 0x8D	; 141
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	2b 87       	std	Y+11, r18	; 0x0b
    1170:	3c 87       	std	Y+12, r19	; 0x0c
				params.ch0.main.extension_data = portalMainExtTreble;
    1172:	2c e7       	ldi	r18, 0x7C	; 124
    1174:	31 e0       	ldi	r19, 0x01	; 1
    1176:	2d 87       	std	Y+13, r18	; 0x0d
    1178:	3e 87       	std	Y+14, r19	; 0x0e
				params.ch0.main.extension_size = sizeof(portalMainExtTreble);
    117a:	22 e1       	ldi	r18, 0x12	; 18
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	2f 87       	std	Y+15, r18	; 0x0f
    1180:	38 8b       	std	Y+16, r19	; 0x10
				params.ch1.intro.track_data = portalIntroBass;
    1182:	2b e7       	ldi	r18, 0x7B	; 123
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	29 8b       	std	Y+17, r18	; 0x11
    1188:	3a 8b       	std	Y+18, r19	; 0x12
				params.ch1.intro.track_size = sizeof(portalIntroBass);
    118a:	8b 8b       	std	Y+19, r24	; 0x13
    118c:	9c 8b       	std	Y+20, r25	; 0x14
				params.ch1.intro.extension_data = portalIntroExtBass;
    118e:	2a e7       	ldi	r18, 0x7A	; 122
    1190:	31 e0       	ldi	r19, 0x01	; 1
    1192:	2d 8b       	std	Y+21, r18	; 0x15
    1194:	3e 8b       	std	Y+22, r19	; 0x16
				params.ch1.intro.extension_size = sizeof(portalIntroExtBass);
    1196:	8f 8b       	std	Y+23, r24	; 0x17
    1198:	98 8f       	std	Y+24, r25	; 0x18
				params.ch1.main.track_data = portalMainBass;
    119a:	80 ed       	ldi	r24, 0xD0	; 208
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	89 8f       	std	Y+25, r24	; 0x19
    11a0:	9a 8f       	std	Y+26, r25	; 0x1a
				params.ch1.main.track_size = sizeof(portalMainBass);
    11a2:	8a ea       	ldi	r24, 0xAA	; 170
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	8b 8f       	std	Y+27, r24	; 0x1b
    11a8:	9c 8f       	std	Y+28, r25	; 0x1c
				params.ch1.main.extension_data = portalMainExtBass;
    11aa:	8a eb       	ldi	r24, 0xBA	; 186
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	8d 8f       	std	Y+29, r24	; 0x1d
    11b0:	9e 8f       	std	Y+30, r25	; 0x1e
				params.ch1.main.extension_size = sizeof(portalMainExtBass);
    11b2:	86 e1       	ldi	r24, 0x16	; 22
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	8f 8f       	std	Y+31, r24	; 0x1f
    11b8:	98 a3       	std	Y+32, r25	; 0x20
			
				song_player_init(params, update_display_song_play_cb);
    11ba:	82 eb       	ldi	r24, 0xB2	; 178
    11bc:	97 e0       	ldi	r25, 0x07	; 7
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	8d b7       	in	r24, 0x3d	; 61
    11c4:	9e b7       	in	r25, 0x3e	; 62
    11c6:	82 97       	sbiw	r24, 0x22	; 34
    11c8:	8d bf       	out	0x3d, r24	; 61
    11ca:	9e bf       	out	0x3e, r25	; 62
    11cc:	ad b7       	in	r26, 0x3d	; 61
    11ce:	be b7       	in	r27, 0x3e	; 62
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	82 e2       	ldi	r24, 0x22	; 34
    11d4:	fe 01       	movw	r30, r28
    11d6:	31 96       	adiw	r30, 0x01	; 1
    11d8:	01 90       	ld	r0, Z+
    11da:	0d 92       	st	X+, r0
    11dc:	8a 95       	dec	r24
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <start_up+0x1d0>
    11e0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <song_player_init>
				song_start();
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <song_start>
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <start_up+0x1f0>
						
			}
			break;
		case EASER_EGG_sm:
			if (get_allow_easter_egg())
    11ee:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <get_allow_easter_egg>
    11f2:	81 11       	cpse	r24, r1
			{
				note_buttons_init();
    11f4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <note_buttons_init>
			}
			break;			
	}	
}
    11f8:	a2 96       	adiw	r28, 0x22	; 34
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <check_start_mode_pin>:


void check_start_mode_pin()
{
	if (!(PORTA.IN & PIN0_bm))
    1204:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1208:	80 fd       	sbrc	r24, 0
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <check_start_mode_pin+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	80 e7       	ldi	r24, 0x70	; 112
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	90 40       	sbci	r25, 0x00	; 0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <check_start_mode_pin+0xe>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <check_start_mode_pin+0x18>
    121c:	00 00       	nop
	{
		//Simple blocking debounce
		_delay_ms(25);
		if(!(PORTA.IN & PIN0_bm))
    121e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1222:	80 fd       	sbrc	r24, 0
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <check_start_mode_pin+0x2e>
		{
			//Hold until the pin is released.
			while (!(PORTA.IN & PIN0_bm));
    1226:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    122a:	80 ff       	sbrs	r24, 0
    122c:	fc cf       	rjmp	.-8      	; 0x1226 <check_start_mode_pin+0x22>
			next_start_mode();
    122e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <next_start_mode>
    1232:	08 95       	ret

00001234 <set_startup_mode_lights>:
		}
	}	
}

void set_startup_mode_lights(uint8_t mode)
{
    1234:	98 2f       	mov	r25, r24
	uint8_t temp = PORTD.OUT & 0x1F;
    1236:	e0 e6       	ldi	r30, 0x60	; 96
    1238:	f6 e0       	ldi	r31, 0x06	; 6
    123a:	84 81       	ldd	r24, Z+4	; 0x04
    123c:	28 2f       	mov	r18, r24
    123e:	2f 71       	andi	r18, 0x1F	; 31
	temp |= ((mode + 1) << 5);
    1240:	89 2f       	mov	r24, r25
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	82 95       	swap	r24
    124c:	92 95       	swap	r25
    124e:	90 7f       	andi	r25, 0xF0	; 240
    1250:	98 27       	eor	r25, r24
    1252:	80 7f       	andi	r24, 0xF0	; 240
    1254:	98 27       	eor	r25, r24
    1256:	82 2b       	or	r24, r18
	PORTD.OUT = temp;
    1258:	84 83       	std	Z+4, r24	; 0x04
    125a:	08 95       	ret

0000125c <get_note_buttons>:
}

uint8_t get_note_buttons()
{
	return ((~PORTA.IN) & 0xF0) >> 4;
    125c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	80 7f       	andi	r24, 0xF0	; 240
    1268:	99 27       	eor	r25, r25
    126a:	95 95       	asr	r25
    126c:	87 95       	ror	r24
    126e:	95 95       	asr	r25
    1270:	87 95       	ror	r24
    1272:	95 95       	asr	r25
    1274:	87 95       	ror	r24
    1276:	95 95       	asr	r25
    1278:	87 95       	ror	r24
}
    127a:	08 95       	ret

0000127c <check_play_note>:

uint8_t check_play_note()
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
	uint8_t note_buttons = get_note_buttons();
    1280:	0e 94 2e 09 	call	0x125c	; 0x125c <get_note_buttons>
    1284:	c8 2f       	mov	r28, r24
	uint8_t val_changed = expander_get_val_changed();
    1286:	0e 94 25 04 	call	0x84a	; 0x84a <expander_get_val_changed>
    128a:	d8 2f       	mov	r29, r24
	uint8_t playing = note_player_playing();
    128c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <note_player_playing>
	if (note_buttons && val_changed && !(playing))
    1290:	cc 23       	and	r28, r28
    1292:	39 f0       	breq	.+14     	; 0x12a2 <check_play_note+0x26>
    1294:	dd 23       	and	r29, r29
    1296:	29 f0       	breq	.+10     	; 0x12a2 <check_play_note+0x26>
    1298:	81 11       	cpse	r24, r1
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <check_play_note+0x26>
	{
		note_play(note_buttons);		
    129c:	8c 2f       	mov	r24, r28
    129e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <note_play>
	}
	

	
	return note_buttons;
}
    12a2:	8c 2f       	mov	r24, r28
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <main>:
int main(void)
{
	uint8_t note_buttons;
	
	//Debug pin
	PORTA.DIRSET = PIN3_bm;
    12aa:	e0 e0       	ldi	r30, 0x00	; 0
    12ac:	f6 e0       	ldi	r31, 0x06	; 6
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN3_bm;
    12b2:	86 83       	std	Z+6, r24	; 0x06
			
	cli();
    12b4:	f8 94       	cli
	clk_init();
    12b6:	0e 94 bc 07 	call	0xf78	; 0xf78 <clk_init>
	interrupt_init();
    12ba:	0e 94 ce 07 	call	0xf9c	; 0xf9c <interrupt_init>
	sei();
    12be:	78 94       	sei
		
	io_init();
    12c0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <io_init>
	expander_init();
    12c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <expander_init>
	
	//Hold until the pin is released.
	while (!(PORTA.IN & PIN0_bm));
    12c8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    12cc:	80 ff       	sbrs	r24, 0
    12ce:	fc cf       	rjmp	.-8      	; 0x12c8 <main+0x1e>

	start_mode_init();
    12d0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <start_mode_init>
	set_startup_mode_lights(get_start_mode());
    12d4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <get_start_mode>
    12d8:	0e 94 1a 09 	call	0x1234	; 0x1234 <set_startup_mode_lights>
	start_up(get_start_mode());	
    12dc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <get_start_mode>
    12e0:	0e 94 04 08 	call	0x1008	; 0x1008 <start_up>
	reset_start_mode_in_eeprom();
    12e4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <reset_start_mode_in_eeprom>
	
	//Needs to come last. Still not sure why
	ws2812drv_init();
    12e8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <ws2812drv_init>

    /* Replace with your application code */
    while (1) 
    {
		//TEMP: move to interrupt handler
		check_start_mode_pin();
    12ec:	0e 94 02 09 	call	0x1204	; 0x1204 <check_start_mode_pin>
		if (display_ctr >= 10)
    12f0:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <display_ctr>
    12f4:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <display_ctr+0x1>
    12f8:	0a 97       	sbiw	r24, 0x0a	; 10
    12fa:	c0 f3       	brcs	.-16     	; 0x12ec <main+0x42>
		{		PORTA.OUTTGL = PIN3_bm;
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
			switch (get_start_mode())
    1302:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <get_start_mode>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	19 f0       	breq	.+6      	; 0x1310 <main+0x66>
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	51 f0       	breq	.+20     	; 0x1322 <main+0x78>
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <main+0x7c>
			{
				case FREEPLAY_sm:
					note_buttons = check_play_note();
    1310:	0e 94 3e 09 	call	0x127c	; 0x127c <check_play_note>
    1314:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
 					play_lights_free_play(expander_get_last_value(), note_buttons);
    1316:	0e 94 20 04 	call	0x840	; 0x840 <expander_get_last_value>
    131a:	6c 2f       	mov	r22, r28
    131c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <play_lights_free_play>

				
					break;
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <main+0x7c>
				case GAME_EASY_sm:
					games_step();
    1322:	0e 94 d6 02 	call	0x5ac	; 0x5ac <games_step>
				case GAME_HARD_sm:
					break;
				case EASER_EGG_sm:
					break;
			}
			display_ctr = 0;
    1326:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <display_ctr>
    132a:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <display_ctr+0x1>
    132e:	de cf       	rjmp	.-68     	; 0x12ec <main+0x42>

00001330 <__vector_12>:

    }
}

ISR(TCC4_OVF_vect)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
// 	PORTA.OUTTGL = PIN3_bm;
	song_interrupt_handler();
    1352:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <song_interrupt_handler>
}
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
	note_interrupt_handler();
    139a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <note_interrupt_handler>
}
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_38>:

ISR(TCD5_CCA_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
	display_ctr++;
    13ce:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <display_ctr>
    13d2:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <display_ctr+0x1>
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <display_ctr>
    13dc:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <display_ctr+0x1>
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <note_timer_C5_init>:
uint8_t playing = 0;


void note_timer_C5_init()
{
	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    13ee:	e0 e4       	ldi	r30, 0x40	; 64
    13f0:	f8 e0       	ldi	r31, 0x08	; 8
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc;
    13f6:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	80 83       	st	Z, r24
    13fc:	08 95       	ret

000013fe <sys_timer_D5_init>:
}

void sys_timer_D5_init()
{
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    13fe:	e0 e4       	ldi	r30, 0x40	; 64
    1400:	f9 e0       	ldi	r31, 0x09	; 9
    1402:	11 82       	std	Z+1, r1	; 0x01
	TCD5.CTRLE = 0;
    1404:	14 82       	std	Z+4, r1	; 0x04
	TCD5.INTCTRLB = TC_OVFINTLVL_HI_gc;
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	87 83       	std	Z+7, r24	; 0x07
	TCD5.CTRLA = TC_CLKSEL_DIV1024_gc;
    140a:	87 e0       	ldi	r24, 0x07	; 7
    140c:	80 83       	st	Z, r24
	TCD5.PER = 312; //100Hz
    140e:	88 e3       	ldi	r24, 0x38	; 56
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	86 a3       	std	Z+38, r24	; 0x26
    1414:	97 a3       	std	Z+39, r25	; 0x27
    1416:	08 95       	ret

00001418 <note_decay_init>:
}

void note_decay_init()
{
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
    1418:	80 ec       	ldi	r24, 0xC0	; 192
    141a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f8 e0       	ldi	r31, 0x08	; 8
    1422:	80 eb       	ldi	r24, 0xB0	; 176
    1424:	94 e0       	ldi	r25, 0x04	; 4
    1426:	86 a3       	std	Z+38, r24	; 0x26
    1428:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
    142a:	87 e0       	ldi	r24, 0x07	; 7
    142c:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
    142e:	e0 e0       	ldi	r30, 0x00	; 0
    1430:	f3 e0       	ldi	r31, 0x03	; 3
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
    1436:	98 e0       	ldi	r25, 0x08	; 8
    1438:	92 83       	std	Z+2, r25	; 0x02
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
    143a:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	80 83       	st	Z, r24
	
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
    1440:	e0 e0       	ldi	r30, 0x00	; 0
    1442:	f1 e0       	ldi	r31, 0x01	; 1
    1444:	80 e4       	ldi	r24, 0x40	; 64
    1446:	80 8b       	std	Z+16, r24	; 0x10
	EDMA.CH0.ADDRCTRL =
    1448:	81 e3       	ldi	r24, 0x31	; 49
    144a:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
    144c:	85 e1       	ldi	r24, 0x15	; 21
    144e:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	
	EDMA.CH0.CTRLB =
    1450:	83 e1       	ldi	r24, 0x13	; 19
    1452:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction
	
	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
    1454:	80 e8       	ldi	r24, 0x80	; 128
    1456:	80 83       	st	Z, r24
    1458:	08 95       	ret

0000145a <run_note_decay>:
}

void run_note_decay()
{
	
	EDMA.CH0.TRFCNT = decay_table_len;                  // data array has len values
    145a:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <decay_table_len>
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	e0 e0       	ldi	r30, 0x00	; 0
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	86 8b       	std	Z+22, r24	; 0x16
    1466:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.ADDR = (uint16_t)expDecayVals;           // this is the source SRAM address
    1468:	8f e5       	ldi	r24, 0x5F	; 95
    146a:	90 e2       	ldi	r25, 0x20	; 32
    146c:	80 8f       	std	Z+24, r24	; 0x18
    146e:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.CTRLA =
    1470:	85 e8       	ldi	r24, 0x85	; 133
    1472:	80 8b       	std	Z+16, r24	; 0x10
    1474:	08 95       	ret

00001476 <note_play>:
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
}

void note_play(uint8_t note_index)
{
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
	playing = 1;
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	90 93 84 21 	sts	0x2184, r25	; 0x802184 <playing>
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + note_index];
    1480:	e8 2f       	mov	r30, r24
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	37 96       	adiw	r30, 0x07	; 7
    1486:	ee 0f       	add	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	e7 58       	subi	r30, 0x87	; 135
    148c:	ff 4d       	sbci	r31, 0xDF	; 223
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	c0 e4       	ldi	r28, 0x40	; 64
    1494:	d8 e0       	ldi	r29, 0x08	; 8
    1496:	88 a7       	std	Y+40, r24	; 0x28
    1498:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay();
    149a:	0e 94 2d 0a 	call	0x145a	; 0x145a <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	88 83       	st	Y, r24
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <reset_play>:

void reset_play()
{
	playing = 0;
    14a8:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <playing>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
    14ac:	e0 e0       	ldi	r30, 0x00	; 0
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	81 89       	ldd	r24, Z+17	; 0x11
    14b2:	80 61       	ori	r24, 0x10	; 16
    14b4:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
    14b6:	e0 e4       	ldi	r30, 0x40	; 64
    14b8:	f8 e0       	ldi	r31, 0x08	; 8
    14ba:	10 a2       	std	Z+32, r1	; 0x20
    14bc:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
    14be:	10 82       	st	Z, r1
    14c0:	08 95       	ret

000014c2 <note_player_init>:
}

void note_player_init()
{
	note_timer_C5_init();
    14c2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <note_timer_C5_init>
	sys_timer_D5_init();
    14c6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sys_timer_D5_init>
	note_decay_init();
    14ca:	0e 94 0c 0a 	call	0x1418	; 0x1418 <note_decay_init>
    14ce:	08 95       	ret

000014d0 <note_interrupt_handler>:
}

void note_interrupt_handler()
{
	reset_play();
    14d0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <reset_play>
    14d4:	08 95       	ret

000014d6 <note_player_playing>:
}

uint8_t note_player_playing()
{
	return playing;
    14d6:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <playing>
    14da:	08 95       	ret

000014dc <beat_timer_C4_init>:
void (*update_display_callback_ptr)();

void beat_timer_C4_init(uint16_t per)
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    14dc:	e0 e0       	ldi	r30, 0x00	; 0
    14de:	f8 e0       	ldi	r31, 0x08	; 8
    14e0:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
    14e2:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
    14e4:	23 e0       	ldi	r18, 0x03	; 3
    14e6:	26 83       	std	Z+6, r18	; 0x06
	TCC4.CTRLA = 0;
    14e8:	10 82       	st	Z, r1
	TCC4.PER = per;
    14ea:	86 a3       	std	Z+38, r24	; 0x26
    14ec:	97 a3       	std	Z+39, r25	; 0x27
    14ee:	08 95       	ret

000014f0 <note_0_timer_C5_init>:

//Channel 0 Counter
void note_0_timer_C5_init()
{

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    14f0:	e0 e4       	ldi	r30, 0x40	; 64
    14f2:	f8 e0       	ldi	r31, 0x08	; 8
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc; 
    14f8:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	80 83       	st	Z, r24
    14fe:	08 95       	ret

00001500 <note_1_timer_D5_init>:

//Channel 1 Counter
void note_1_timer_D5_init()
{
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1500:	e0 e4       	ldi	r30, 0x40	; 64
    1502:	f9 e0       	ldi	r31, 0x09	; 9
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc;
    1508:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	80 83       	st	Z, r24
    150e:	08 95       	ret

00001510 <set_note_and_beat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t set_note_and_beat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	6c 01       	movw	r12, r24
    1522:	e9 01       	movw	r28, r18
    1524:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	f6 01       	movw	r30, r12
    152a:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
    152c:	88 81       	ld	r24, Y
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	68 0f       	add	r22, r24
    1532:	79 1f       	adc	r23, r25
    1534:	fb 01       	movw	r30, r22
    1536:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
    1538:	89 2f       	mov	r24, r25
    153a:	82 95       	swap	r24
    153c:	86 95       	lsr	r24
    153e:	86 95       	lsr	r24
    1540:	83 70       	andi	r24, 0x03	; 3
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <set_note_and_beat+0x3c>
    1548:	66 0f       	add	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	8a 95       	dec	r24
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <set_note_and_beat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
    1550:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
    1552:	f8 01       	movw	r30, r16
    1554:	20 81       	ld	r18, Z
    1556:	31 81       	ldd	r19, Z+1	; 0x01
    1558:	42 0f       	add	r20, r18
    155a:	53 1f       	adc	r21, r19
    155c:	fa 01       	movw	r30, r20
    155e:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	0c 90       	ld	r0, X
    1564:	02 c0       	rjmp	.+4      	; 0x156a <set_note_and_beat+0x5a>
    1566:	35 95       	asr	r19
    1568:	27 95       	ror	r18
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <set_note_and_beat+0x56>
    156e:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
    1570:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
    1572:	f6 01       	movw	r30, r12
    1574:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
    1576:	9f 73       	andi	r25, 0x3F	; 63
    1578:	89 2f       	mov	r24, r25
    157a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	51 f0       	breq	.+20     	; 0x1594 <set_note_and_beat+0x84>
	{
		count = noteClocks[index] / 2;
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	fc 01       	movw	r30, r24
    1586:	e7 50       	subi	r30, 0x07	; 7
    1588:	ff 4d       	sbci	r31, 0xDF	; 223
    158a:	40 81       	ld	r20, Z
    158c:	51 81       	ldd	r21, Z+1	; 0x01
    158e:	56 95       	lsr	r21
    1590:	47 95       	ror	r20
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <set_note_and_beat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
    1598:	28 81       	ld	r18, Y
    159a:	39 81       	ldd	r19, Y+1	; 0x01
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	28 83       	st	Y, r18
    15a2:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
    15a4:	9c 91       	ld	r25, X
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
    15aa:	98 30       	cpi	r25, 0x08	; 8
    15ac:	39 f4       	brne	.+14     	; 0x15bc <set_note_and_beat+0xac>
	{
		*extBitPosPtr = 0;
    15ae:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
    15b0:	f8 01       	movw	r30, r16
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
    15bc:	ca 01       	movw	r24, r20
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	08 95       	ret

000015d0 <set_ch0_note_and_beat>:


//Uses the current note indexes for treble
void set_ch0_note_and_beat()
{
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = set_note_and_beat(&noteCh0BeatCount, ch0Track, ch0Ext, &noteCh0Index, &noteCh0ExtIndex, &noteCh0ExtBitPos);
    15d8:	40 91 61 22 	lds	r20, 0x2261	; 0x802261 <ch0Ext>
    15dc:	50 91 62 22 	lds	r21, 0x2262	; 0x802262 <ch0Ext+0x1>
    15e0:	60 91 73 22 	lds	r22, 0x2273	; 0x802273 <ch0Track>
    15e4:	70 91 74 22 	lds	r23, 0x2274	; 0x802274 <ch0Track+0x1>
    15e8:	0f 2e       	mov	r0, r31
    15ea:	fc e9       	ldi	r31, 0x9C	; 156
    15ec:	ef 2e       	mov	r14, r31
    15ee:	f1 e2       	ldi	r31, 0x21	; 33
    15f0:	ff 2e       	mov	r15, r31
    15f2:	f0 2d       	mov	r31, r0
    15f4:	0d e9       	ldi	r16, 0x9D	; 157
    15f6:	11 e2       	ldi	r17, 0x21	; 33
    15f8:	2f e9       	ldi	r18, 0x9F	; 159
    15fa:	31 e2       	ldi	r19, 0x21	; 33
    15fc:	8b e9       	ldi	r24, 0x9B	; 155
    15fe:	91 e2       	ldi	r25, 0x21	; 33
    1600:	0e 94 88 0a 	call	0x1510	; 0x1510 <set_note_and_beat>
    1604:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
    1608:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	08 95       	ret

00001616 <set_ch1_note_and_beat>:

//Uses the current note indexes for Bass
void set_ch1_note_and_beat()
{
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = set_note_and_beat(&noteCh1BeatCount, ch1Track, ch1Ext, &noteCh1Index, &noteCh1ExtIndex, &noteCh1ExtBitPos);
    161e:	40 91 75 22 	lds	r20, 0x2275	; 0x802275 <ch1Ext>
    1622:	50 91 76 22 	lds	r21, 0x2276	; 0x802276 <ch1Ext+0x1>
    1626:	60 91 71 22 	lds	r22, 0x2271	; 0x802271 <ch1Track>
    162a:	70 91 72 22 	lds	r23, 0x2272	; 0x802272 <ch1Track+0x1>
    162e:	0f 2e       	mov	r0, r31
    1630:	fd e8       	ldi	r31, 0x8D	; 141
    1632:	ef 2e       	mov	r14, r31
    1634:	f1 e2       	ldi	r31, 0x21	; 33
    1636:	ff 2e       	mov	r15, r31
    1638:	f0 2d       	mov	r31, r0
    163a:	0e e8       	ldi	r16, 0x8E	; 142
    163c:	11 e2       	ldi	r17, 0x21	; 33
    163e:	20 e9       	ldi	r18, 0x90	; 144
    1640:	31 e2       	ldi	r19, 0x21	; 33
    1642:	8c e8       	ldi	r24, 0x8C	; 140
    1644:	91 e2       	ldi	r25, 0x21	; 33
    1646:	0e 94 88 0a 	call	0x1510	; 0x1510 <set_note_and_beat>
    164a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
    164e:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <song_init>:

void song_init()
{
	if (hasCh0Intro)
    165c:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <hasCh0Intro>
    1660:	88 23       	and	r24, r24
    1662:	99 f0       	breq	.+38     	; 0x168a <song_init+0x2e>
	{
		isCh0Intro = 1;
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <isCh0Intro>
		ch0Track = ch0IntroTrack;
    166a:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <ch0IntroTrack>
    166e:	30 91 66 22 	lds	r19, 0x2266	; 0x802266 <ch0IntroTrack+0x1>
    1672:	20 93 73 22 	sts	0x2273, r18	; 0x802273 <ch0Track>
    1676:	30 93 74 22 	sts	0x2274, r19	; 0x802274 <ch0Track+0x1>
		ch0Ext = ch0IntroExt;
    167a:	20 91 6b 22 	lds	r18, 0x226B	; 0x80226b <ch0IntroExt>
    167e:	30 91 6c 22 	lds	r19, 0x226C	; 0x80226c <ch0IntroExt+0x1>
    1682:	20 93 61 22 	sts	0x2261, r18	; 0x802261 <ch0Ext>
    1686:	30 93 62 22 	sts	0x2262, r19	; 0x802262 <ch0Ext+0x1>
	}

	if (!(hasCh0Intro) && hasCh0Main)
    168a:	81 11       	cpse	r24, r1
    168c:	16 c0       	rjmp	.+44     	; 0x16ba <song_init+0x5e>
    168e:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <hasCh0Main>
    1692:	99 23       	and	r25, r25
    1694:	91 f0       	breq	.+36     	; 0x16ba <song_init+0x5e>
	{
		isCh0Intro = 0;
    1696:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <isCh0Intro>
		ch0Track = ch0MainTrack;
    169a:	20 91 63 22 	lds	r18, 0x2263	; 0x802263 <ch0MainTrack>
    169e:	30 91 64 22 	lds	r19, 0x2264	; 0x802264 <ch0MainTrack+0x1>
    16a2:	20 93 73 22 	sts	0x2273, r18	; 0x802273 <ch0Track>
    16a6:	30 93 74 22 	sts	0x2274, r19	; 0x802274 <ch0Track+0x1>
		ch0Ext = ch0MainExt;
    16aa:	20 91 5f 22 	lds	r18, 0x225F	; 0x80225f <ch0MainExt>
    16ae:	30 91 60 22 	lds	r19, 0x2260	; 0x802260 <ch0MainExt+0x1>
    16b2:	20 93 61 22 	sts	0x2261, r18	; 0x802261 <ch0Ext>
    16b6:	30 93 62 22 	sts	0x2262, r19	; 0x802262 <ch0Ext+0x1>
	}

	noteCh0BeatCount = 0;
    16ba:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <noteCh0BeatCount>
	noteCh0Index = 0;
    16be:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <noteCh0Index>
    16c2:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <noteCh0Index+0x1>
	noteCh0ExtIndex = 0;
    16c6:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <noteCh0ExtIndex>
    16ca:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <noteCh0ExtIndex+0x1>
	noteCh0ExtBitPos = 0;
    16ce:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <noteCh0ExtBitPos>
	
	if (hasCh1Intro)
    16d2:	90 91 93 21 	lds	r25, 0x2193	; 0x802193 <hasCh1Intro>
    16d6:	99 23       	and	r25, r25
    16d8:	99 f0       	breq	.+38     	; 0x1700 <song_init+0xa4>
	{
		isCh1Intro = 1;
    16da:	21 e0       	ldi	r18, 0x01	; 1
    16dc:	20 93 85 21 	sts	0x2185, r18	; 0x802185 <isCh1Intro>
		ch1Track = ch1IntroTrack;
    16e0:	20 91 6f 22 	lds	r18, 0x226F	; 0x80226f <ch1IntroTrack>
    16e4:	30 91 70 22 	lds	r19, 0x2270	; 0x802270 <ch1IntroTrack+0x1>
    16e8:	20 93 71 22 	sts	0x2271, r18	; 0x802271 <ch1Track>
    16ec:	30 93 72 22 	sts	0x2272, r19	; 0x802272 <ch1Track+0x1>
		ch1Ext = ch1IntroExt;
    16f0:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <ch1IntroExt>
    16f4:	30 91 5e 22 	lds	r19, 0x225E	; 0x80225e <ch1IntroExt+0x1>
    16f8:	20 93 75 22 	sts	0x2275, r18	; 0x802275 <ch1Ext>
    16fc:	30 93 76 22 	sts	0x2276, r19	; 0x802276 <ch1Ext+0x1>
	}

	if (!(hasCh1Intro) && hasCh1Main)
    1700:	91 11       	cpse	r25, r1
    1702:	16 c0       	rjmp	.+44     	; 0x1730 <song_init+0xd4>
    1704:	90 91 92 21 	lds	r25, 0x2192	; 0x802192 <hasCh1Main>
    1708:	99 23       	and	r25, r25
    170a:	91 f0       	breq	.+36     	; 0x1730 <song_init+0xd4>
	{
		isCh1Intro = 0;
    170c:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <isCh1Intro>
		ch1Track = ch1MainTrack;
    1710:	20 91 6d 22 	lds	r18, 0x226D	; 0x80226d <ch1MainTrack>
    1714:	30 91 6e 22 	lds	r19, 0x226E	; 0x80226e <ch1MainTrack+0x1>
    1718:	20 93 71 22 	sts	0x2271, r18	; 0x802271 <ch1Track>
    171c:	30 93 72 22 	sts	0x2272, r19	; 0x802272 <ch1Track+0x1>
		ch1Ext = ch1MainExt;
    1720:	20 91 67 22 	lds	r18, 0x2267	; 0x802267 <ch1MainExt>
    1724:	30 91 68 22 	lds	r19, 0x2268	; 0x802268 <ch1MainExt+0x1>
    1728:	20 93 75 22 	sts	0x2275, r18	; 0x802275 <ch1Ext>
    172c:	30 93 76 22 	sts	0x2276, r19	; 0x802276 <ch1Ext+0x1>
	}

	noteCh1BeatCount = 0;
    1730:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <noteCh1BeatCount>
	noteCh1Index = 0;
    1734:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <noteCh1Index>
    1738:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <noteCh1Index+0x1>
	noteCh1ExtIndex = 0;
    173c:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <noteCh1ExtIndex>
    1740:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <noteCh1ExtIndex+0x1>
	noteCh1ExtBitPos = 0;
    1744:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <noteCh1ExtBitPos>
	
	if (hasCh0Intro || hasCh0Main)
    1748:	81 11       	cpse	r24, r1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <song_init+0xf6>
    174c:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <hasCh0Main>
    1750:	81 11       	cpse	r24, r1
	{
		set_ch0_note_and_beat();
    1752:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <set_ch0_note_and_beat>
	}
	
	if (hasCh1Intro || hasCh1Main)
    1756:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <hasCh1Intro>
    175a:	81 11       	cpse	r24, r1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <song_init+0x108>
    175e:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <hasCh1Main>
    1762:	81 11       	cpse	r24, r1
	{
		set_ch1_note_and_beat();
    1764:	0e 94 0b 0b 	call	0x1616	; 0x1616 <set_ch1_note_and_beat>
    1768:	08 95       	ret

0000176a <load_track_into_mem>:
	}
	
}

void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	6c 01       	movw	r12, r24
    1782:	7b 01       	movw	r14, r22
    1784:	8a 01       	movw	r16, r20
	*dest = (uint8_t *)malloc(size);
    1786:	ca 01       	movw	r24, r20
    1788:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <malloc>
    178c:	d7 01       	movw	r26, r14
    178e:	8d 93       	st	X+, r24
    1790:	9c 93       	st	X, r25
	volatile uint8_t temp;
	uint16_t i = 0;
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
	for(;i<size;i++)
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <load_track_into_mem+0x48>
	{
		temp =pgm_read_byte(source + i);
    1798:	f6 01       	movw	r30, r12
    179a:	e8 0f       	add	r30, r24
    179c:	f9 1f       	adc	r31, r25
    179e:	e4 91       	lpm	r30, Z
    17a0:	e9 83       	std	Y+1, r30	; 0x01
		(*dest)[i] = temp;
    17a2:	d7 01       	movw	r26, r14
    17a4:	ed 91       	ld	r30, X+
    17a6:	fc 91       	ld	r31, X
    17a8:	e8 0f       	add	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	29 81       	ldd	r18, Y+1	; 0x01
    17ae:	20 83       	st	Z, r18
void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
	*dest = (uint8_t *)malloc(size);
	volatile uint8_t temp;
	uint16_t i = 0;
	for(;i<size;i++)
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	80 17       	cp	r24, r16
    17b4:	91 07       	cpc	r25, r17
    17b6:	80 f3       	brcs	.-32     	; 0x1798 <load_track_into_mem+0x2e>
	{
		temp =pgm_read_byte(source + i);
		(*dest)[i] = temp;
	}
}
    17b8:	0f 90       	pop	r0
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	08 95       	ret

000017cc <song_player_init>:

void song_player_init(SongInitParams initParams, void (*update_display_cb)())
{
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	update_display_callback_ptr = update_display_cb;
    17d8:	89 a5       	ldd	r24, Y+41	; 0x29
    17da:	9a a5       	ldd	r25, Y+42	; 0x2a
    17dc:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <update_display_callback_ptr>
    17e0:	90 93 6a 22 	sts	0x226A, r25	; 0x80226a <update_display_callback_ptr+0x1>
	
	beat_timer_C4_init(initParams.bmp_period);
    17e4:	8f a1       	ldd	r24, Y+39	; 0x27
    17e6:	98 a5       	ldd	r25, Y+40	; 0x28
    17e8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <beat_timer_C4_init>
	note_0_timer_C5_init();
    17ec:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <note_0_timer_C5_init>
	note_1_timer_D5_init();	
    17f0:	0e 94 80 0a 	call	0x1500	; 0x1500 <note_1_timer_D5_init>
	
	if (initParams.ch0.main.track_data)
    17f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f6:	98 89       	ldd	r25, Y+16	; 0x10
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	d1 f0       	breq	.+52     	; 0x1830 <song_player_init+0x64>
	{
		hasCh0Main = 1;
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	20 93 a1 21 	sts	0x21A1, r18	; 0x8021a1 <hasCh0Main>
		load_track_into_mem(initParams.ch0.main.track_data, &ch0MainTrack, initParams.ch0.main.track_size);
    1802:	09 89       	ldd	r16, Y+17	; 0x11
    1804:	1a 89       	ldd	r17, Y+18	; 0x12
    1806:	a8 01       	movw	r20, r16
    1808:	63 e6       	ldi	r22, 0x63	; 99
    180a:	72 e2       	ldi	r23, 0x22	; 34
    180c:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.main.extension_data, &ch0MainExt, initParams.ch0.main.extension_size);
    1810:	4d 89       	ldd	r20, Y+21	; 0x15
    1812:	5e 89       	ldd	r21, Y+22	; 0x16
    1814:	6f e5       	ldi	r22, 0x5F	; 95
    1816:	72 e2       	ldi	r23, 0x22	; 34
    1818:	8b 89       	ldd	r24, Y+19	; 0x13
    181a:	9c 89       	ldd	r25, Y+20	; 0x14
    181c:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		ch0MainNoteCount = initParams.ch0.main.track_size;
    1820:	00 93 97 21 	sts	0x2197, r16	; 0x802197 <ch0MainNoteCount>
    1824:	10 93 98 21 	sts	0x2198, r17	; 0x802198 <ch0MainNoteCount+0x1>
		ch0NoteCount = ch0MainNoteCount;
    1828:	00 93 95 21 	sts	0x2195, r16	; 0x802195 <ch0NoteCount>
    182c:	10 93 96 21 	sts	0x2196, r17	; 0x802196 <ch0NoteCount+0x1>
	
	//Note: Checking the main track stuff first so that we can set values here that can be overwritten if intro track
	//information is present without the need for more conditionals	
	
	//First copy over data from progmem
	if (initParams.ch0.intro.track_data)
    1830:	8f 81       	ldd	r24, Y+7	; 0x07
    1832:	98 85       	ldd	r25, Y+8	; 0x08
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	d1 f0       	breq	.+52     	; 0x186c <song_player_init+0xa0>
	{
		hasCh0Intro = 1;
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	20 93 a2 21 	sts	0x21A2, r18	; 0x8021a2 <hasCh0Intro>
		load_track_into_mem(initParams.ch0.intro.track_data, &ch0IntroTrack, initParams.ch0.intro.track_size);
    183e:	09 85       	ldd	r16, Y+9	; 0x09
    1840:	1a 85       	ldd	r17, Y+10	; 0x0a
    1842:	a8 01       	movw	r20, r16
    1844:	65 e6       	ldi	r22, 0x65	; 101
    1846:	72 e2       	ldi	r23, 0x22	; 34
    1848:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.intro.extension_data, &ch0IntroExt, initParams.ch0.intro.extension_size);
    184c:	4d 85       	ldd	r20, Y+13	; 0x0d
    184e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1850:	6b e6       	ldi	r22, 0x6B	; 107
    1852:	72 e2       	ldi	r23, 0x22	; 34
    1854:	8b 85       	ldd	r24, Y+11	; 0x0b
    1856:	9c 85       	ldd	r25, Y+12	; 0x0c
    1858:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		ch0IntroNoteCount = initParams.ch0.intro.track_size;		
    185c:	00 93 99 21 	sts	0x2199, r16	; 0x802199 <ch0IntroNoteCount>
    1860:	10 93 9a 21 	sts	0x219A, r17	; 0x80219a <ch0IntroNoteCount+0x1>
		ch0NoteCount = ch0IntroNoteCount;
    1864:	00 93 95 21 	sts	0x2195, r16	; 0x802195 <ch0NoteCount>
    1868:	10 93 96 21 	sts	0x2196, r17	; 0x802196 <ch0NoteCount+0x1>
	}
	
	if (initParams.ch1.main.track_data)
    186c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    186e:	98 a1       	ldd	r25, Y+32	; 0x20
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	d1 f0       	breq	.+52     	; 0x18a8 <song_player_init+0xdc>
	{
		hasCh1Main = 1;
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	20 93 92 21 	sts	0x2192, r18	; 0x802192 <hasCh1Main>
		load_track_into_mem(initParams.ch1.main.track_data, &ch1MainTrack, initParams.ch1.main.track_size);
    187a:	09 a1       	ldd	r16, Y+33	; 0x21
    187c:	1a a1       	ldd	r17, Y+34	; 0x22
    187e:	a8 01       	movw	r20, r16
    1880:	6d e6       	ldi	r22, 0x6D	; 109
    1882:	72 e2       	ldi	r23, 0x22	; 34
    1884:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.main.extension_data, &ch1MainExt, initParams.ch1.main.extension_size);
    1888:	4d a1       	ldd	r20, Y+37	; 0x25
    188a:	5e a1       	ldd	r21, Y+38	; 0x26
    188c:	67 e6       	ldi	r22, 0x67	; 103
    188e:	72 e2       	ldi	r23, 0x22	; 34
    1890:	8b a1       	ldd	r24, Y+35	; 0x23
    1892:	9c a1       	ldd	r25, Y+36	; 0x24
    1894:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		ch1MainNoteCount = initParams.ch1.main.track_size;
    1898:	00 93 88 21 	sts	0x2188, r16	; 0x802188 <ch1MainNoteCount>
    189c:	10 93 89 21 	sts	0x2189, r17	; 0x802189 <ch1MainNoteCount+0x1>
		ch1NoteCount = ch1MainNoteCount;
    18a0:	00 93 86 21 	sts	0x2186, r16	; 0x802186 <ch1NoteCount>
    18a4:	10 93 87 21 	sts	0x2187, r17	; 0x802187 <ch1NoteCount+0x1>
	}
	
	if (initParams.ch1.intro.track_data)
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	d1 f0       	breq	.+52     	; 0x18e4 <song_player_init+0x118>
	{
		hasCh1Intro = 1;
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	20 93 93 21 	sts	0x2193, r18	; 0x802193 <hasCh1Intro>
		load_track_into_mem(initParams.ch1.intro.track_data, &ch1IntroTrack, initParams.ch1.intro.track_size);
    18b6:	09 8d       	ldd	r16, Y+25	; 0x19
    18b8:	1a 8d       	ldd	r17, Y+26	; 0x1a
    18ba:	a8 01       	movw	r20, r16
    18bc:	6f e6       	ldi	r22, 0x6F	; 111
    18be:	72 e2       	ldi	r23, 0x22	; 34
    18c0:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.intro.extension_data, &ch1IntroExt, initParams.ch1.intro.extension_size);
    18c4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    18c6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    18c8:	6d e5       	ldi	r22, 0x5D	; 93
    18ca:	72 e2       	ldi	r23, 0x22	; 34
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	0e 94 b5 0b 	call	0x176a	; 0x176a <load_track_into_mem>
		ch1IntroNoteCount = initParams.ch1.intro.track_size;		
    18d4:	00 93 8a 21 	sts	0x218A, r16	; 0x80218a <ch1IntroNoteCount>
    18d8:	10 93 8b 21 	sts	0x218B, r17	; 0x80218b <ch1IntroNoteCount+0x1>
		ch1NoteCount = ch1IntroNoteCount;
    18dc:	00 93 86 21 	sts	0x2186, r16	; 0x802186 <ch1NoteCount>
    18e0:	10 93 87 21 	sts	0x2187, r17	; 0x802187 <ch1NoteCount+0x1>
	}
	
		
	
	song_init();
    18e4:	0e 94 2e 0b 	call	0x165c	; 0x165c <song_init>
}
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <song_start>:

void song_start()
{
	TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
    18f8:	08 95       	ret

000018fa <song_interrupt_handler>:
}

void song_interrupt_handler(){
// 	PORTA.OUTSET = PIN2_bm;
	TCC4.INTFLAGS = TC4_OVFIF_bm;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteCh0BeatCount))
    1900:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <noteCh0BeatCount>
    1904:	81 11       	cpse	r24, r1
    1906:	3d c0       	rjmp	.+122    	; 0x1982 <song_interrupt_handler+0x88>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
    1908:	e0 e4       	ldi	r30, 0x40	; 64
    190a:	f8 e0       	ldi	r31, 0x08	; 8
    190c:	10 82       	st	Z, r1
		TCC5.CCA = 0;
    190e:	10 a6       	std	Z+40, r1	; 0x28
    1910:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh0Index >= ch0NoteCount)
    1912:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <noteCh0Index>
    1916:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <noteCh0Index+0x1>
    191a:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <ch0NoteCount>
    191e:	90 91 96 21 	lds	r25, 0x2196	; 0x802196 <ch0NoteCount+0x1>
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	50 f1       	brcs	.+84     	; 0x197c <song_interrupt_handler+0x82>
		{
			if (isCh0Intro)// && hasCh0Main)
    1928:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <isCh0Intro>
    192c:	88 23       	and	r24, r24
    192e:	d1 f0       	breq	.+52     	; 0x1964 <song_interrupt_handler+0x6a>
			{
				isCh0Intro = 0;
    1930:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <isCh0Intro>
				ch0NoteCount = ch0MainNoteCount;
    1934:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <ch0MainNoteCount>
    1938:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <ch0MainNoteCount+0x1>
    193c:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <ch0NoteCount>
    1940:	90 93 96 21 	sts	0x2196, r25	; 0x802196 <ch0NoteCount+0x1>
				ch0Track = ch0MainTrack;
    1944:	80 91 63 22 	lds	r24, 0x2263	; 0x802263 <ch0MainTrack>
    1948:	90 91 64 22 	lds	r25, 0x2264	; 0x802264 <ch0MainTrack+0x1>
    194c:	80 93 73 22 	sts	0x2273, r24	; 0x802273 <ch0Track>
    1950:	90 93 74 22 	sts	0x2274, r25	; 0x802274 <ch0Track+0x1>
				ch0Ext = ch0MainExt;
    1954:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <ch0MainExt>
    1958:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <ch0MainExt+0x1>
    195c:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <ch0Ext>
    1960:	90 93 62 22 	sts	0x2262, r25	; 0x802262 <ch0Ext+0x1>
			}
			
			noteCh0BeatCount = 0;
    1964:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <noteCh0BeatCount>
			noteCh0Index = 0;
    1968:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <noteCh0Index>
    196c:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <noteCh0Index+0x1>
			noteCh0ExtIndex = 0;
    1970:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <noteCh0ExtIndex>
    1974:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <noteCh0ExtIndex+0x1>
			noteCh0ExtBitPos = 0;
    1978:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <noteCh0ExtBitPos>
		}
		

		set_ch0_note_and_beat();
    197c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <set_ch0_note_and_beat>
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <song_interrupt_handler+0x8e>
		
	}
	else
	{
		noteCh0BeatCount--;
    1982:	81 50       	subi	r24, 0x01	; 1
    1984:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <noteCh0BeatCount>
	}
	
	if (!(noteCh1BeatCount))
    1988:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <noteCh1BeatCount>
    198c:	81 11       	cpse	r24, r1
    198e:	41 c0       	rjmp	.+130    	; 0x1a12 <song_interrupt_handler+0x118>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
    1990:	e0 e4       	ldi	r30, 0x40	; 64
    1992:	f9 e0       	ldi	r31, 0x09	; 9
    1994:	10 82       	st	Z, r1
		TCD5.CCA = 0;
    1996:	10 a6       	std	Z+40, r1	; 0x28
    1998:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh1Index >= ch1NoteCount)
    199a:	20 91 90 21 	lds	r18, 0x2190	; 0x802190 <noteCh1Index>
    199e:	30 91 91 21 	lds	r19, 0x2191	; 0x802191 <noteCh1Index+0x1>
    19a2:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <ch1NoteCount>
    19a6:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <ch1NoteCount+0x1>
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	70 f1       	brcs	.+92     	; 0x1a0c <song_interrupt_handler+0x112>
		{
			if (isCh1Intro && hasCh1Main)
    19b0:	80 91 85 21 	lds	r24, 0x2185	; 0x802185 <isCh1Intro>
    19b4:	88 23       	and	r24, r24
    19b6:	f1 f0       	breq	.+60     	; 0x19f4 <song_interrupt_handler+0xfa>
    19b8:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <hasCh1Main>
    19bc:	88 23       	and	r24, r24
    19be:	d1 f0       	breq	.+52     	; 0x19f4 <song_interrupt_handler+0xfa>
			{
				isCh1Intro = 0;
    19c0:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <isCh1Intro>
				ch1NoteCount = ch1MainNoteCount;
    19c4:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <ch1MainNoteCount>
    19c8:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <ch1MainNoteCount+0x1>
    19cc:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <ch1NoteCount>
    19d0:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <ch1NoteCount+0x1>
				ch1Track = ch1MainTrack;
    19d4:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <ch1MainTrack>
    19d8:	90 91 6e 22 	lds	r25, 0x226E	; 0x80226e <ch1MainTrack+0x1>
    19dc:	80 93 71 22 	sts	0x2271, r24	; 0x802271 <ch1Track>
    19e0:	90 93 72 22 	sts	0x2272, r25	; 0x802272 <ch1Track+0x1>
				ch1Ext = ch1MainExt;
    19e4:	80 91 67 22 	lds	r24, 0x2267	; 0x802267 <ch1MainExt>
    19e8:	90 91 68 22 	lds	r25, 0x2268	; 0x802268 <ch1MainExt+0x1>
    19ec:	80 93 75 22 	sts	0x2275, r24	; 0x802275 <ch1Ext>
    19f0:	90 93 76 22 	sts	0x2276, r25	; 0x802276 <ch1Ext+0x1>
			}
			
			noteCh1BeatCount = 0;
    19f4:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <noteCh1BeatCount>
			noteCh1Index = 0;
    19f8:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <noteCh1Index>
    19fc:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <noteCh1Index+0x1>
			noteCh1ExtIndex = 0;
    1a00:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <noteCh1ExtIndex>
    1a04:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <noteCh1ExtIndex+0x1>
			noteCh1ExtBitPos = 0;
    1a08:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <noteCh1ExtBitPos>
		}

		set_ch1_note_and_beat();
    1a0c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <set_ch1_note_and_beat>
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <song_interrupt_handler+0x11e>
	}
	else
	{
		noteCh1BeatCount--;
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <noteCh1BeatCount>
	}
	
	update_display_callback_ptr();
    1a18:	e0 91 69 22 	lds	r30, 0x2269	; 0x802269 <update_display_callback_ptr>
    1a1c:	f0 91 6a 22 	lds	r31, 0x226A	; 0x80226a <update_display_callback_ptr+0x1>
    1a20:	09 95       	icall
    1a22:	2f ef       	ldi	r18, 0xFF	; 255
    1a24:	83 ef       	ldi	r24, 0xF3	; 243
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	80 40       	sbci	r24, 0x00	; 0
    1a2c:	90 40       	sbci	r25, 0x00	; 0
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <song_interrupt_handler+0x12e>
    1a30:	00 c0       	rjmp	.+0      	; 0x1a32 <song_interrupt_handler+0x138>
    1a32:	00 00       	nop
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1a34:	84 e0       	ldi	r24, 0x04	; 4
    1a36:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    1a3a:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
    1a3e:	08 95       	ret

00001a40 <get_allow_portal>:
}

void set_allow_easter_egg(uint8_t allow)
{
	allow_easter_egg = allow;
	eeprom_write_byte((uint8_t *)3, allow_easter_egg ? ALLOW_VAL : 0);
    1a40:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <allow_portal>
    1a44:	08 95       	ret

00001a46 <get_allow_easter_egg>:
    1a46:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <allow_easter_egg>
    1a4a:	08 95       	ret

00001a4c <get_start_mode>:
}

uint8_t get_start_mode()
{
	return start_mode;
    1a4c:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
}
    1a50:	08 95       	ret

00001a52 <reset_start_mode_in_eeprom>:

void reset_start_mode_in_eeprom()
{
	eeprom_write_byte((uint8_t *)1, 0);
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>
    1a5c:	08 95       	ret

00001a5e <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
    1a5e:	88 ed       	ldi	r24, 0xD8	; 216
    1a60:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
    1a68:	08 95       	ret

00001a6a <start_mode_init>:
}

void start_mode_init()
{
	
	start_mode = eeprom_read_byte((uint8_t*)1);
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>
    1a72:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <start_mode>
	
	if (start_mode > BASE_MAX_MODE + 2)
    1a76:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1a7a:	87 30       	cpi	r24, 0x07	; 7
    1a7c:	20 f0       	brcs	.+8      	; 0x1a86 <start_mode_init+0x1c>
	{
		start_mode = 0;
    1a7e:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <start_mode>
		reset_start_mode_in_eeprom();
    1a82:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <reset_start_mode_in_eeprom>
	}
	
	allow_portal = eeprom_read_byte((uint8_t*)2);
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>
    1a8e:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <allow_portal>
	
	//TODO:Remove test case
	allow_portal = ALLOW_VAL;
    1a92:	85 e5       	ldi	r24, 0x55	; 85
    1a94:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <allow_portal>
	
	allow_easter_egg = eeprom_read_byte((uint8_t*)3);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>
    1aa0:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <allow_easter_egg>
    1aa4:	08 95       	ret

00001aa6 <next_start_mode>:
	
}

void next_start_mode()
{
	start_mode++;
    1aa6:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <start_mode>

	//If start mode is set to what "Allow Portal" would be, we need to see
	//if the mode can be set to "Allow Portal", or if it can be skipped and
	//go straight to "Easter Egg" mode, or we just roll back to "Standby"
	if (start_mode == BASE_MAX_MODE + 1)
    1ab0:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1ab4:	85 30       	cpi	r24, 0x05	; 5
    1ab6:	c9 f4       	brne	.+50     	; 0x1aea <next_start_mode+0x44>
	{
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))	
    1ab8:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <allow_portal>
    1abc:	85 35       	cpi	r24, 0x55	; 85
    1abe:	39 f0       	breq	.+14     	; 0x1ace <next_start_mode+0x28>
    1ac0:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <allow_easter_egg>
    1ac4:	85 35       	cpi	r24, 0x55	; 85
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <next_start_mode+0x28>
		{
			start_mode = 0;
    1ac8:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <start_mode>
    1acc:	1f c0       	rjmp	.+62     	; 0x1b0c <next_start_mode+0x66>
		}
		else if ((allow_portal != ALLOW_VAL) && (allow_easter_egg == ALLOW_VAL))
    1ace:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <allow_portal>
    1ad2:	85 35       	cpi	r24, 0x55	; 85
    1ad4:	d9 f0       	breq	.+54     	; 0x1b0c <next_start_mode+0x66>
    1ad6:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <allow_easter_egg>
    1ada:	85 35       	cpi	r24, 0x55	; 85
    1adc:	b9 f4       	brne	.+46     	; 0x1b0c <next_start_mode+0x66>
		{
			start_mode++;
    1ade:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <start_mode>
    1ae8:	11 c0       	rjmp	.+34     	; 0x1b0c <next_start_mode+0x66>
		}
	}
	else if (start_mode == BASE_MAX_MODE + 2)
    1aea:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1aee:	86 30       	cpi	r24, 0x06	; 6
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <next_start_mode+0x5a>
	{				
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
    1af2:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <allow_easter_egg>
    1af6:	85 35       	cpi	r24, 0x55	; 85
    1af8:	49 f0       	breq	.+18     	; 0x1b0c <next_start_mode+0x66>
		{
			start_mode = 0;
    1afa:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <start_mode>
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <next_start_mode+0x66>
		}
		
	}	
	else if (start_mode > BASE_MAX_MODE + 2)
    1b00:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <start_mode>
    1b04:	87 30       	cpi	r24, 0x07	; 7
    1b06:	10 f0       	brcs	.+4      	; 0x1b0c <next_start_mode+0x66>
	{
		//Our default restart state
		start_mode = 0;		
    1b08:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <start_mode>
	}
	
	eeprom_write_byte((uint8_t *)1, start_mode);
    1b0c:	60 91 a5 21 	lds	r22, 0x21A5	; 0x8021a5 <start_mode>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>
	enable_wdt();
    1b18:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <enable_wdt>
    1b1c:	ff cf       	rjmp	.-2      	; 0x1b1c <next_start_mode+0x76>

00001b1e <ws2812drv_init>:


void ws2812drv_init(void)
{                                                               
    // Setup EDMA channel 2(+1) 
    EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b1 e0       	ldi	r27, 0x01	; 1
    1b22:	80 eb       	ldi	r24, 0xB0	; 176
    1b24:	8c 93       	st	X, r24
    EDMA.CH2.CTRLB = 0;// EDMA_CH_INTLVL_OFF_gc;
    1b26:	d1 96       	adiw	r26, 0x31	; 49
    1b28:	1c 92       	st	X, r1
    1b2a:	d1 97       	sbiw	r26, 0x31	; 49
    EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	d2 96       	adiw	r26, 0x32	; 50
    1b30:	8c 93       	st	X, r24
    1b32:	d2 97       	sbiw	r26, 0x32	; 50
    EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    1b34:	d3 96       	adiw	r26, 0x33	; 51
    1b36:	1c 92       	st	X, r1
    1b38:	d3 97       	sbiw	r26, 0x33	; 51
    EDMA.CH2.DESTADDR = (uint16_t)&USARTD0.DATA;
    1b3a:	e0 ec       	ldi	r30, 0xC0	; 192
    1b3c:	f9 e0       	ldi	r31, 0x09	; 9
    1b3e:	dc 96       	adiw	r26, 0x3c	; 60
    1b40:	ed 93       	st	X+, r30
    1b42:	fc 93       	st	X, r31
    1b44:	dd 97       	sbiw	r26, 0x3d	; 61
    EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
    1b46:	9d e6       	ldi	r25, 0x6D	; 109
    1b48:	d4 96       	adiw	r26, 0x34	; 52
    1b4a:	9c 93       	st	X, r25
    // Setup port pins for TxD, XCK and LUT0OUT
    PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
    1b4c:	a0 e6       	ldi	r26, 0x60	; 96
    1b4e:	b6 e0       	ldi	r27, 0x06	; 6
    1b50:	50 96       	adiw	r26, 0x10	; 16
    1b52:	1c 92       	st	X, r1
    1b54:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
    1b56:	51 96       	adiw	r26, 0x11	; 17
    1b58:	8c 93       	st	X, r24
    1b5a:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	53 96       	adiw	r26, 0x13	; 19
    1b60:	8c 93       	st	X, r24
    1b62:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
    1b64:	9b e0       	ldi	r25, 0x0B	; 11
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	9c 93       	st	X, r25
	

    // Setup Event channel 0 to TxD (async)
    EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN3_gc;
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	b1 e0       	ldi	r27, 0x01	; 1
    1b6e:	9b e6       	ldi	r25, 0x6B	; 107
    1b70:	9c 93       	st	X, r25
    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    1b72:	18 96       	adiw	r26, 0x08	; 8
    1b74:	1c 92       	st	X, r1
    1b76:	18 97       	sbiw	r26, 0x08	; 8
    // Setup Event channel 6 to XCK rising edge
    EVSYS.CH6MUX = EVSYS_CHMUX_PORTD_PIN1_gc;
    1b78:	99 e6       	ldi	r25, 0x69	; 105
    1b7a:	16 96       	adiw	r26, 0x06	; 6
    1b7c:	9c 93       	st	X, r25
    1b7e:	16 97       	sbiw	r26, 0x06	; 6
    EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    1b80:	1e 96       	adiw	r26, 0x0e	; 14
    1b82:	1c 92       	st	X, r1

    // Setup USART in master SPI mode 1, MSB first
    USARTD0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
    1b84:	93 e1       	ldi	r25, 0x13	; 19
    1b86:	96 83       	std	Z+6, r25	; 0x06
    USARTD0.BAUDCTRLB = 0;
    1b88:	17 82       	std	Z+7, r1	; 0x07
    USARTD0.CTRLA = 0;// USART_RXSINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc;
    1b8a:	12 82       	std	Z+2, r1	; 0x02
    USARTD0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
    1b8c:	92 ec       	ldi	r25, 0xC2	; 194
    1b8e:	94 83       	std	Z+4, r25	; 0x04
    USARTD0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
    1b90:	15 82       	std	Z+5, r1	; 0x05
    USARTD0.CTRLB = USART_TXEN_bm;
    1b92:	98 e0       	ldi	r25, 0x08	; 8
    1b94:	93 83       	std	Z+3, r25	; 0x03

    // Setup XCL BTC0 timer to 1shot pwm generation
    XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
    1b96:	e0 e6       	ldi	r30, 0x60	; 96
    1b98:	f4 e0       	ldi	r31, 0x04	; 4
    1b9a:	91 e1       	ldi	r25, 0x11	; 17
    1b9c:	94 83       	std	Z+4, r25	; 0x04
    XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
    1b9e:	85 83       	std	Z+5, r24	; 0x05
    XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
    1ba0:	8e e9       	ldi	r24, 0x9E	; 158
    1ba2:	86 83       	std	Z+6, r24	; 0x06
    XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
    1ba4:	86 e1       	ldi	r24, 0x16	; 22
    1ba6:	86 87       	std	Z+14, r24	; 0x0e
    XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
    1ba8:	8d e0       	ldi	r24, 0x0D	; 13
    1baa:	84 87       	std	Z+12, r24	; 0x0c

    // Setup XCL LUT
    XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PD_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
    1bac:	84 e5       	ldi	r24, 0x54	; 84
    1bae:	80 83       	st	Z, r24
    XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
    1bb0:	80 e5       	ldi	r24, 0x50	; 80
    1bb2:	81 83       	std	Z+1, r24	; 0x01
    XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLYCONF_DISABLE_gc;      // Async inputs, no delay
    1bb4:	80 e4       	ldi	r24, 0x40	; 64
    1bb6:	82 83       	std	Z+2, r24	; 0x02
    XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
    1bb8:	80 ea       	ldi	r24, 0xA0	; 160
    1bba:	83 83       	std	Z+3, r24	; 0x03
    1bbc:	08 95       	ret

00001bbe <ws2812drv_start_transfer>:
}


void ws2812drv_start_transfer(ws2812drv_led_t *p, uint16_t cnt)
{
    EDMA.CH2.ADDR = (uint16_t)p;
    1bbe:	e0 e0       	ldi	r30, 0x00	; 0
    1bc0:	f1 e0       	ldi	r31, 0x01	; 1
    1bc2:	80 af       	std	Z+56, r24	; 0x38
    1bc4:	91 af       	std	Z+57, r25	; 0x39
    EDMA.CH2.TRFCNT = cnt * sizeof(ws2812drv_led_t);
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	68 0f       	add	r22, r24
    1bce:	79 1f       	adc	r23, r25
    1bd0:	66 ab       	std	Z+54, r22	; 0x36
    1bd2:	77 ab       	std	Z+55, r23	; 0x37
    EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
    1bd4:	84 e8       	ldi	r24, 0x84	; 132
    1bd6:	80 ab       	std	Z+48, r24	; 0x30
    1bd8:	08 95       	ret

00001bda <__divmodhi4>:
    1bda:	97 fb       	bst	r25, 7
    1bdc:	07 2e       	mov	r0, r23
    1bde:	16 f4       	brtc	.+4      	; 0x1be4 <__divmodhi4+0xa>
    1be0:	00 94       	com	r0
    1be2:	07 d0       	rcall	.+14     	; 0x1bf2 <__divmodhi4_neg1>
    1be4:	77 fd       	sbrc	r23, 7
    1be6:	09 d0       	rcall	.+18     	; 0x1bfa <__divmodhi4_neg2>
    1be8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
    1bec:	07 fc       	sbrc	r0, 7
    1bee:	05 d0       	rcall	.+10     	; 0x1bfa <__divmodhi4_neg2>
    1bf0:	3e f4       	brtc	.+14     	; 0x1c00 <__divmodhi4_exit>

00001bf2 <__divmodhi4_neg1>:
    1bf2:	90 95       	com	r25
    1bf4:	81 95       	neg	r24
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	08 95       	ret

00001bfa <__divmodhi4_neg2>:
    1bfa:	70 95       	com	r23
    1bfc:	61 95       	neg	r22
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255

00001c00 <__divmodhi4_exit>:
    1c00:	08 95       	ret

00001c02 <__tablejump2__>:
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	05 90       	lpm	r0, Z+
    1c08:	f4 91       	lpm	r31, Z
    1c0a:	e0 2d       	mov	r30, r0
    1c0c:	09 94       	ijmp

00001c0e <__udivmodhi4>:
    1c0e:	aa 1b       	sub	r26, r26
    1c10:	bb 1b       	sub	r27, r27
    1c12:	51 e1       	ldi	r21, 0x11	; 17
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <__udivmodhi4_ep>

00001c16 <__udivmodhi4_loop>:
    1c16:	aa 1f       	adc	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	a6 17       	cp	r26, r22
    1c1c:	b7 07       	cpc	r27, r23
    1c1e:	10 f0       	brcs	.+4      	; 0x1c24 <__udivmodhi4_ep>
    1c20:	a6 1b       	sub	r26, r22
    1c22:	b7 0b       	sbc	r27, r23

00001c24 <__udivmodhi4_ep>:
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	5a 95       	dec	r21
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__udivmodhi4_loop>
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	08 95       	ret

00001c36 <malloc>:
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	91 05       	cpc	r25, r1
    1c42:	10 f4       	brcc	.+4      	; 0x1c48 <malloc+0x12>
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	e0 91 79 22 	lds	r30, 0x2279	; 0x802279 <__flp>
    1c4c:	f0 91 7a 22 	lds	r31, 0x227A	; 0x80227a <__flp+0x1>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	19 f1       	breq	.+70     	; 0x1ca2 <malloc+0x6c>
    1c5c:	40 81       	ld	r20, Z
    1c5e:	51 81       	ldd	r21, Z+1	; 0x01
    1c60:	02 81       	ldd	r16, Z+2	; 0x02
    1c62:	13 81       	ldd	r17, Z+3	; 0x03
    1c64:	48 17       	cp	r20, r24
    1c66:	59 07       	cpc	r21, r25
    1c68:	c8 f0       	brcs	.+50     	; 0x1c9c <malloc+0x66>
    1c6a:	84 17       	cp	r24, r20
    1c6c:	95 07       	cpc	r25, r21
    1c6e:	69 f4       	brne	.+26     	; 0x1c8a <malloc+0x54>
    1c70:	10 97       	sbiw	r26, 0x00	; 0
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <malloc+0x4a>
    1c74:	12 96       	adiw	r26, 0x02	; 2
    1c76:	0c 93       	st	X, r16
    1c78:	12 97       	sbiw	r26, 0x02	; 2
    1c7a:	13 96       	adiw	r26, 0x03	; 3
    1c7c:	1c 93       	st	X, r17
    1c7e:	27 c0       	rjmp	.+78     	; 0x1cce <malloc+0x98>
    1c80:	00 93 79 22 	sts	0x2279, r16	; 0x802279 <__flp>
    1c84:	10 93 7a 22 	sts	0x227A, r17	; 0x80227a <__flp+0x1>
    1c88:	22 c0       	rjmp	.+68     	; 0x1cce <malloc+0x98>
    1c8a:	21 15       	cp	r18, r1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <malloc+0x60>
    1c90:	42 17       	cp	r20, r18
    1c92:	53 07       	cpc	r21, r19
    1c94:	18 f4       	brcc	.+6      	; 0x1c9c <malloc+0x66>
    1c96:	9a 01       	movw	r18, r20
    1c98:	bd 01       	movw	r22, r26
    1c9a:	ef 01       	movw	r28, r30
    1c9c:	df 01       	movw	r26, r30
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	db cf       	rjmp	.-74     	; 0x1c58 <malloc+0x22>
    1ca2:	21 15       	cp	r18, r1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	f9 f0       	breq	.+62     	; 0x1ce6 <malloc+0xb0>
    1ca8:	28 1b       	sub	r18, r24
    1caa:	39 0b       	sbc	r19, r25
    1cac:	24 30       	cpi	r18, 0x04	; 4
    1cae:	31 05       	cpc	r19, r1
    1cb0:	80 f4       	brcc	.+32     	; 0x1cd2 <malloc+0x9c>
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	61 15       	cp	r22, r1
    1cb8:	71 05       	cpc	r23, r1
    1cba:	21 f0       	breq	.+8      	; 0x1cc4 <malloc+0x8e>
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	82 83       	std	Z+2, r24	; 0x02
    1cc0:	93 83       	std	Z+3, r25	; 0x03
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <malloc+0x96>
    1cc4:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <__flp>
    1cc8:	90 93 7a 22 	sts	0x227A, r25	; 0x80227a <__flp+0x1>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	32 96       	adiw	r30, 0x02	; 2
    1cd0:	44 c0       	rjmp	.+136    	; 0x1d5a <malloc+0x124>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	81 93       	st	Z+, r24
    1cda:	91 93       	st	Z+, r25
    1cdc:	22 50       	subi	r18, 0x02	; 2
    1cde:	31 09       	sbc	r19, r1
    1ce0:	28 83       	st	Y, r18
    1ce2:	39 83       	std	Y+1, r19	; 0x01
    1ce4:	3a c0       	rjmp	.+116    	; 0x1d5a <malloc+0x124>
    1ce6:	20 91 77 22 	lds	r18, 0x2277	; 0x802277 <__brkval>
    1cea:	30 91 78 22 	lds	r19, 0x2278	; 0x802278 <__brkval+0x1>
    1cee:	23 2b       	or	r18, r19
    1cf0:	41 f4       	brne	.+16     	; 0x1d02 <malloc+0xcc>
    1cf2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1cf6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1cfa:	20 93 77 22 	sts	0x2277, r18	; 0x802277 <__brkval>
    1cfe:	30 93 78 22 	sts	0x2278, r19	; 0x802278 <__brkval+0x1>
    1d02:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1d06:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    1d0a:	21 15       	cp	r18, r1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	41 f4       	brne	.+16     	; 0x1d20 <malloc+0xea>
    1d10:	2d b7       	in	r18, 0x3d	; 61
    1d12:	3e b7       	in	r19, 0x3e	; 62
    1d14:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1d18:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1d1c:	24 1b       	sub	r18, r20
    1d1e:	35 0b       	sbc	r19, r21
    1d20:	e0 91 77 22 	lds	r30, 0x2277	; 0x802277 <__brkval>
    1d24:	f0 91 78 22 	lds	r31, 0x2278	; 0x802278 <__brkval+0x1>
    1d28:	e2 17       	cp	r30, r18
    1d2a:	f3 07       	cpc	r31, r19
    1d2c:	a0 f4       	brcc	.+40     	; 0x1d56 <malloc+0x120>
    1d2e:	2e 1b       	sub	r18, r30
    1d30:	3f 0b       	sbc	r19, r31
    1d32:	28 17       	cp	r18, r24
    1d34:	39 07       	cpc	r19, r25
    1d36:	78 f0       	brcs	.+30     	; 0x1d56 <malloc+0x120>
    1d38:	ac 01       	movw	r20, r24
    1d3a:	4e 5f       	subi	r20, 0xFE	; 254
    1d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3e:	24 17       	cp	r18, r20
    1d40:	35 07       	cpc	r19, r21
    1d42:	48 f0       	brcs	.+18     	; 0x1d56 <malloc+0x120>
    1d44:	4e 0f       	add	r20, r30
    1d46:	5f 1f       	adc	r21, r31
    1d48:	40 93 77 22 	sts	0x2277, r20	; 0x802277 <__brkval>
    1d4c:	50 93 78 22 	sts	0x2278, r21	; 0x802278 <__brkval+0x1>
    1d50:	81 93       	st	Z+, r24
    1d52:	91 93       	st	Z+, r25
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <malloc+0x124>
    1d56:	e0 e0       	ldi	r30, 0x00	; 0
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	08 95       	ret

00001d66 <free>:
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <free+0xa>
    1d6e:	81 c0       	rjmp	.+258    	; 0x1e72 <free+0x10c>
    1d70:	fc 01       	movw	r30, r24
    1d72:	32 97       	sbiw	r30, 0x02	; 2
    1d74:	12 82       	std	Z+2, r1	; 0x02
    1d76:	13 82       	std	Z+3, r1	; 0x03
    1d78:	a0 91 79 22 	lds	r26, 0x2279	; 0x802279 <__flp>
    1d7c:	b0 91 7a 22 	lds	r27, 0x227A	; 0x80227a <__flp+0x1>
    1d80:	10 97       	sbiw	r26, 0x00	; 0
    1d82:	81 f4       	brne	.+32     	; 0x1da4 <free+0x3e>
    1d84:	20 81       	ld	r18, Z
    1d86:	31 81       	ldd	r19, Z+1	; 0x01
    1d88:	82 0f       	add	r24, r18
    1d8a:	93 1f       	adc	r25, r19
    1d8c:	20 91 77 22 	lds	r18, 0x2277	; 0x802277 <__brkval>
    1d90:	30 91 78 22 	lds	r19, 0x2278	; 0x802278 <__brkval+0x1>
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	51 f5       	brne	.+84     	; 0x1dee <free+0x88>
    1d9a:	e0 93 77 22 	sts	0x2277, r30	; 0x802277 <__brkval>
    1d9e:	f0 93 78 22 	sts	0x2278, r31	; 0x802278 <__brkval+0x1>
    1da2:	67 c0       	rjmp	.+206    	; 0x1e72 <free+0x10c>
    1da4:	ed 01       	movw	r28, r26
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	ce 17       	cp	r28, r30
    1dac:	df 07       	cpc	r29, r31
    1dae:	40 f4       	brcc	.+16     	; 0x1dc0 <free+0x5a>
    1db0:	4a 81       	ldd	r20, Y+2	; 0x02
    1db2:	5b 81       	ldd	r21, Y+3	; 0x03
    1db4:	9e 01       	movw	r18, r28
    1db6:	41 15       	cp	r20, r1
    1db8:	51 05       	cpc	r21, r1
    1dba:	f1 f0       	breq	.+60     	; 0x1df8 <free+0x92>
    1dbc:	ea 01       	movw	r28, r20
    1dbe:	f5 cf       	rjmp	.-22     	; 0x1daa <free+0x44>
    1dc0:	c2 83       	std	Z+2, r28	; 0x02
    1dc2:	d3 83       	std	Z+3, r29	; 0x03
    1dc4:	40 81       	ld	r20, Z
    1dc6:	51 81       	ldd	r21, Z+1	; 0x01
    1dc8:	84 0f       	add	r24, r20
    1dca:	95 1f       	adc	r25, r21
    1dcc:	c8 17       	cp	r28, r24
    1dce:	d9 07       	cpc	r29, r25
    1dd0:	59 f4       	brne	.+22     	; 0x1de8 <free+0x82>
    1dd2:	88 81       	ld	r24, Y
    1dd4:	99 81       	ldd	r25, Y+1	; 0x01
    1dd6:	84 0f       	add	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	02 96       	adiw	r24, 0x02	; 2
    1ddc:	80 83       	st	Z, r24
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	82 83       	std	Z+2, r24	; 0x02
    1de6:	93 83       	std	Z+3, r25	; 0x03
    1de8:	21 15       	cp	r18, r1
    1dea:	31 05       	cpc	r19, r1
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <free+0x92>
    1dee:	e0 93 79 22 	sts	0x2279, r30	; 0x802279 <__flp>
    1df2:	f0 93 7a 22 	sts	0x227A, r31	; 0x80227a <__flp+0x1>
    1df6:	3d c0       	rjmp	.+122    	; 0x1e72 <free+0x10c>
    1df8:	e9 01       	movw	r28, r18
    1dfa:	ea 83       	std	Y+2, r30	; 0x02
    1dfc:	fb 83       	std	Y+3, r31	; 0x03
    1dfe:	49 91       	ld	r20, Y+
    1e00:	59 91       	ld	r21, Y+
    1e02:	c4 0f       	add	r28, r20
    1e04:	d5 1f       	adc	r29, r21
    1e06:	ec 17       	cp	r30, r28
    1e08:	fd 07       	cpc	r31, r29
    1e0a:	61 f4       	brne	.+24     	; 0x1e24 <free+0xbe>
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	84 0f       	add	r24, r20
    1e12:	95 1f       	adc	r25, r21
    1e14:	02 96       	adiw	r24, 0x02	; 2
    1e16:	e9 01       	movw	r28, r18
    1e18:	88 83       	st	Y, r24
    1e1a:	99 83       	std	Y+1, r25	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	9b 83       	std	Y+3, r25	; 0x03
    1e24:	e0 e0       	ldi	r30, 0x00	; 0
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	12 96       	adiw	r26, 0x02	; 2
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9c 91       	ld	r25, X
    1e2e:	13 97       	sbiw	r26, 0x03	; 3
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <free+0xd4>
    1e34:	fd 01       	movw	r30, r26
    1e36:	dc 01       	movw	r26, r24
    1e38:	f7 cf       	rjmp	.-18     	; 0x1e28 <free+0xc2>
    1e3a:	8d 91       	ld	r24, X+
    1e3c:	9c 91       	ld	r25, X
    1e3e:	11 97       	sbiw	r26, 0x01	; 1
    1e40:	9d 01       	movw	r18, r26
    1e42:	2e 5f       	subi	r18, 0xFE	; 254
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	82 0f       	add	r24, r18
    1e48:	93 1f       	adc	r25, r19
    1e4a:	20 91 77 22 	lds	r18, 0x2277	; 0x802277 <__brkval>
    1e4e:	30 91 78 22 	lds	r19, 0x2278	; 0x802278 <__brkval+0x1>
    1e52:	28 17       	cp	r18, r24
    1e54:	39 07       	cpc	r19, r25
    1e56:	69 f4       	brne	.+26     	; 0x1e72 <free+0x10c>
    1e58:	30 97       	sbiw	r30, 0x00	; 0
    1e5a:	29 f4       	brne	.+10     	; 0x1e66 <free+0x100>
    1e5c:	10 92 79 22 	sts	0x2279, r1	; 0x802279 <__flp>
    1e60:	10 92 7a 22 	sts	0x227A, r1	; 0x80227a <__flp+0x1>
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <free+0x104>
    1e66:	12 82       	std	Z+2, r1	; 0x02
    1e68:	13 82       	std	Z+3, r1	; 0x03
    1e6a:	a0 93 77 22 	sts	0x2277, r26	; 0x802277 <__brkval>
    1e6e:	b0 93 78 22 	sts	0x2278, r27	; 0x802278 <__brkval+0x1>
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret

00001e78 <do_rand>:
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
    1e8e:	68 81       	ld	r22, Y
    1e90:	79 81       	ldd	r23, Y+1	; 0x01
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	61 15       	cp	r22, r1
    1e98:	71 05       	cpc	r23, r1
    1e9a:	81 05       	cpc	r24, r1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <do_rand+0x30>
    1ea0:	64 e2       	ldi	r22, 0x24	; 36
    1ea2:	79 ed       	ldi	r23, 0xD9	; 217
    1ea4:	8b e5       	ldi	r24, 0x5B	; 91
    1ea6:	97 e0       	ldi	r25, 0x07	; 7
    1ea8:	2d e1       	ldi	r18, 0x1D	; 29
    1eaa:	33 ef       	ldi	r19, 0xF3	; 243
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__divmodsi4>
    1eb4:	49 01       	movw	r8, r18
    1eb6:	5a 01       	movw	r10, r20
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	a7 ea       	ldi	r26, 0xA7	; 167
    1ebe:	b1 e4       	ldi	r27, 0x41	; 65
    1ec0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__muluhisi3>
    1ec4:	6b 01       	movw	r12, r22
    1ec6:	7c 01       	movw	r14, r24
    1ec8:	ac ee       	ldi	r26, 0xEC	; 236
    1eca:	b4 ef       	ldi	r27, 0xF4	; 244
    1ecc:	a5 01       	movw	r20, r10
    1ece:	94 01       	movw	r18, r8
    1ed0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulohisi3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8c 0d       	add	r24, r12
    1eda:	9d 1d       	adc	r25, r13
    1edc:	ae 1d       	adc	r26, r14
    1ede:	bf 1d       	adc	r27, r15
    1ee0:	b7 ff       	sbrs	r27, 7
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <do_rand+0x72>
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	a1 09       	sbc	r26, r1
    1ee8:	b0 48       	sbci	r27, 0x80	; 128
    1eea:	88 83       	st	Y, r24
    1eec:	99 83       	std	Y+1, r25	; 0x01
    1eee:	aa 83       	std	Y+2, r26	; 0x02
    1ef0:	bb 83       	std	Y+3, r27	; 0x03
    1ef2:	9f 77       	andi	r25, 0x7F	; 127
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	08 95       	ret

00001f0a <rand_r>:
    1f0a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <do_rand>
    1f0e:	08 95       	ret

00001f10 <rand>:
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	90 e2       	ldi	r25, 0x20	; 32
    1f14:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <do_rand>
    1f18:	08 95       	ret

00001f1a <srand>:
    1f1a:	a0 e0       	ldi	r26, 0x00	; 0
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <next>
    1f22:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <next+0x1>
    1f26:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <next+0x2>
    1f2a:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <next+0x3>
    1f2e:	08 95       	ret

00001f30 <eeprom_read_byte>:
    1f30:	03 d0       	rcall	.+6      	; 0x1f38 <eeprom_mapen>
    1f32:	80 81       	ld	r24, Z
    1f34:	99 27       	eor	r25, r25
    1f36:	08 95       	ret

00001f38 <eeprom_mapen>:
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e0 50       	subi	r30, 0x00	; 0
    1f3c:	f0 4f       	sbci	r31, 0xF0	; 240
    1f3e:	08 95       	ret

00001f40 <eeprom_write_byte>:
    1f40:	26 2f       	mov	r18, r22

00001f42 <eeprom_write_r18>:
    1f42:	af 93       	push	r26
    1f44:	bf 93       	push	r27
    1f46:	e0 ec       	ldi	r30, 0xC0	; 192
    1f48:	f1 e0       	ldi	r31, 0x01	; 1
    1f4a:	37 85       	ldd	r19, Z+15	; 0x0f
    1f4c:	37 fd       	sbrc	r19, 7
    1f4e:	fd cf       	rjmp	.-6      	; 0x1f4a <eeprom_write_r18+0x8>
    1f50:	dc 01       	movw	r26, r24
    1f52:	a0 50       	subi	r26, 0x00	; 0
    1f54:	b0 4f       	sbci	r27, 0xF0	; 240
    1f56:	2c 93       	st	X, r18
    1f58:	25 e3       	ldi	r18, 0x35	; 53
    1f5a:	22 87       	std	Z+10, r18	; 0x0a
    1f5c:	28 ed       	ldi	r18, 0xD8	; 216
    1f5e:	31 e0       	ldi	r19, 0x01	; 1
    1f60:	24 bf       	out	0x34, r18	; 52
    1f62:	33 87       	std	Z+11, r19	; 0x0b
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	bf 91       	pop	r27
    1f68:	af 91       	pop	r26
    1f6a:	08 95       	ret

00001f6c <__divmodsi4>:
    1f6c:	05 2e       	mov	r0, r21
    1f6e:	97 fb       	bst	r25, 7
    1f70:	1e f4       	brtc	.+6      	; 0x1f78 <__divmodsi4+0xc>
    1f72:	00 94       	com	r0
    1f74:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__negsi2>
    1f78:	57 fd       	sbrc	r21, 7
    1f7a:	07 d0       	rcall	.+14     	; 0x1f8a <__divmodsi4_neg2>
    1f7c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivmodsi4>
    1f80:	07 fc       	sbrc	r0, 7
    1f82:	03 d0       	rcall	.+6      	; 0x1f8a <__divmodsi4_neg2>
    1f84:	4e f4       	brtc	.+18     	; 0x1f98 <__divmodsi4_exit>
    1f86:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__negsi2>

00001f8a <__divmodsi4_neg2>:
    1f8a:	50 95       	com	r21
    1f8c:	40 95       	com	r20
    1f8e:	30 95       	com	r19
    1f90:	21 95       	neg	r18
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	4f 4f       	sbci	r20, 0xFF	; 255
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255

00001f98 <__divmodsi4_exit>:
    1f98:	08 95       	ret

00001f9a <__negsi2>:
    1f9a:	90 95       	com	r25
    1f9c:	80 95       	com	r24
    1f9e:	70 95       	com	r23
    1fa0:	61 95       	neg	r22
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	08 95       	ret

00001faa <__muluhisi3>:
    1faa:	0e 94 0a 10 	call	0x2014	; 0x2014 <__umulhisi3>
    1fae:	a5 9f       	mul	r26, r21
    1fb0:	90 0d       	add	r25, r0
    1fb2:	b4 9f       	mul	r27, r20
    1fb4:	90 0d       	add	r25, r0
    1fb6:	a4 9f       	mul	r26, r20
    1fb8:	80 0d       	add	r24, r0
    1fba:	91 1d       	adc	r25, r1
    1fbc:	11 24       	eor	r1, r1
    1fbe:	08 95       	ret

00001fc0 <__mulshisi3>:
    1fc0:	b7 ff       	sbrs	r27, 7
    1fc2:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__muluhisi3>

00001fc6 <__mulohisi3>:
    1fc6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__muluhisi3>
    1fca:	82 1b       	sub	r24, r18
    1fcc:	93 0b       	sbc	r25, r19
    1fce:	08 95       	ret

00001fd0 <__udivmodsi4>:
    1fd0:	a1 e2       	ldi	r26, 0x21	; 33
    1fd2:	1a 2e       	mov	r1, r26
    1fd4:	aa 1b       	sub	r26, r26
    1fd6:	bb 1b       	sub	r27, r27
    1fd8:	fd 01       	movw	r30, r26
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <__udivmodsi4_ep>

00001fdc <__udivmodsi4_loop>:
    1fdc:	aa 1f       	adc	r26, r26
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	ee 1f       	adc	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	a2 17       	cp	r26, r18
    1fe6:	b3 07       	cpc	r27, r19
    1fe8:	e4 07       	cpc	r30, r20
    1fea:	f5 07       	cpc	r31, r21
    1fec:	20 f0       	brcs	.+8      	; 0x1ff6 <__udivmodsi4_ep>
    1fee:	a2 1b       	sub	r26, r18
    1ff0:	b3 0b       	sbc	r27, r19
    1ff2:	e4 0b       	sbc	r30, r20
    1ff4:	f5 0b       	sbc	r31, r21

00001ff6 <__udivmodsi4_ep>:
    1ff6:	66 1f       	adc	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	1a 94       	dec	r1
    2000:	69 f7       	brne	.-38     	; 0x1fdc <__udivmodsi4_loop>
    2002:	60 95       	com	r22
    2004:	70 95       	com	r23
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	9b 01       	movw	r18, r22
    200c:	ac 01       	movw	r20, r24
    200e:	bd 01       	movw	r22, r26
    2010:	cf 01       	movw	r24, r30
    2012:	08 95       	ret

00002014 <__umulhisi3>:
    2014:	a2 9f       	mul	r26, r18
    2016:	b0 01       	movw	r22, r0
    2018:	b3 9f       	mul	r27, r19
    201a:	c0 01       	movw	r24, r0
    201c:	a3 9f       	mul	r26, r19
    201e:	70 0d       	add	r23, r0
    2020:	81 1d       	adc	r24, r1
    2022:	11 24       	eor	r1, r1
    2024:	91 1d       	adc	r25, r1
    2026:	b2 9f       	mul	r27, r18
    2028:	70 0d       	add	r23, r0
    202a:	81 1d       	adc	r24, r1
    202c:	11 24       	eor	r1, r1
    202e:	91 1d       	adc	r25, r1
    2030:	08 95       	ret

00002032 <_exit>:
    2032:	f8 94       	cli

00002034 <__stop_program>:
    2034:	ff cf       	rjmp	.-2      	; 0x2034 <__stop_program>
