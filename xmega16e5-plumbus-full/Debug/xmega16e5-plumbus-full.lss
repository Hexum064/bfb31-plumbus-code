
xmega16e5-plumbus-full.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00802000  0000283e  000028d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010e  008021a0  008021a0  00002a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008544  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b99  00000000  00000000  0000b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000279a  00000000  00000000  0000df55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  000106f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041d2  00000000  00000000  00010f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001608  00000000  00000000  0001513a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00016742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      2c:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_11>
      30:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__vector_12>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_38>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	00 00       	nop
      ae:	00 80       	ld	r0, Z

000000b0 <easterEggMainBass>:
      b0:	68 61 61 61 68 61 61 61 68 61 61 61 68 61 61 61     haaahaaahaaahaaa
      c0:	6d 66 66 66 6d 66 66 66 6d 66 66 66 6d 66 66 2d     mfffmfffmfffmff-

000000d0 <easterEggIntroExtBass>:
	...

000000d1 <easterEggIntroBass>:
      d1:	80                                                  .

000000d2 <easterEggMainExtTreble>:
      d2:	00 00 00                                            ...

000000d5 <easterEggMainTreble>:
      d5:	5c 58 96 5c 58 96 5c 58 56 51 93 56 55 56 5a dd     \X.\X.\XVQ.VUVZ.
      e5:	40 5f 5d 5a 7d                                      @_]Z}

000000ea <easterEggIntroExtTreble>:
	...

000000eb <easterEggIntroTreble>:
      eb:	80                                                  .

000000ec <portalMainExtBass>:
	...

00000102 <portalMainBass>:
     102:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     112:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     122:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     132:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     142:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     152:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     162:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     172:	63 5f 5c 57 c0 a8 40 68 a1 40 61 a3 40 63 a8 a1     c_\W..@h.@a.@c..
     182:	a8 40 68 a1 40 61 a3 40 63 a8 9c e3 e1 9c 9d 9f     .@h.@a.@c.......
     192:	a1 e3 a4 b0 ab 40 6b ae 40 6e ab 40 6b ae 40 6e     .....@k.@n.@k.@n
     1a2:	ab 40 6b ae 40 6e ab 40 6b ee                       .@k.@n.@k.

000001ac <portalIntroExtBass>:
	...

000001ad <portalIntroBass>:
     1ad:	c0                                                  .

000001ae <portalMainExtTreble>:
     1ae:	02 00 00 04 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000001c0 <portalMainTreble>:
     1c0:	cf 00 4e 4f 51 91 8f 40 93 51 d8 c0 58 91 4f 8e     ..NOQ..@.Q..X.O.
     1d0:	40 51 94 93 40 91 58 98 8f 40 00 4e 4f 51 51 cf     @Q..@.X..@.NOQQ.
     1e0:	00 4e 4f 51 91 40 4f 93 40 51 d8 40 c0 91 4f 8e     .NOQ.@O.@Q.@..O.
     1f0:	40 51 94 40 53 91 58 53 51 50 51 53 55 80 58 57     @Q.@S.XSQPQSU.XW
     200:	95 90 51 53 53 55 53 55 55 40 95 58 57 95 90 4e     ..QSSUSUU@.XW..N
     210:	50 51 53 53 51 90 90 4e 4c 4b 4b 8c 8e 50 4e 4c     PQSSQ..NLKK..PNL
     220:	4c 8e 90 53 55 53 50 50 51 40 51 4f 4f 40 5f 5b     L..SUSPPQ@QOO@_[
     230:	5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f 64 5f 5b     _b_[_d_[_b_[_d_[
     240:	5f 62 5f 5b 5f 64 5f 5b 58 4e 4f 51 51              _b_[_d_[XNOQQ

0000024d <portalIntroExtTreble>:
	...

0000024e <portalIntroTreble>:
     24e:	4e 4f 51 51                                         NOQQ

00000252 <nyanMainExtBass>:
     252:	00 00 00                                            ...

00000255 <nyanMainBass>:
     255:	75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e 7a 78     uisgvjqexlsg:.zx
     265:	76                                                  v

00000266 <nyanIntroExtBass>:
     266:	03                                                  .

00000267 <nyanIntroBass>:
	...

00000269 <nyanMainExtTreble>:
	...

00000284 <nyanMainTreble>:
     284:	4f 4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12     OM.R...VVTS.....
     294:	0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12     .........RO.....
     2a4:	16 15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16     .......S........
     2b4:	54 56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14     TVTOM.R...VVTS..
     2c4:	16 14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12     ............RO..
     2d4:	0f 14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14     ..........S.....
     2e4:	13 14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16     ...TVVV..V......
     2f4:	11 12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e     ....VV..........
     304:	1d 1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b     ..V..V..........
     314:	56 16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19     V..........VWV..
     324:	56 1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16     V..........VV...
     334:	1b 11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16     .........V..V...
     344:	16 14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12     .......V........
     354:	11 0f 56 54                                         ..VT

00000358 <nyanIntroExtTreble>:
     358:	00 00 00 00                                         ....

0000035c <nyanIntroTreble>:
     35c:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
     36c:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 00     ......J.........

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	cd bf       	out	0x3d, r28	; 61
     384:	d7 e2       	ldi	r29, 0x27	; 39
     386:	de bf       	out	0x3e, r29	; 62

00000388 <__do_copy_data>:
     388:	11 e2       	ldi	r17, 0x21	; 33
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e2       	ldi	r27, 0x20	; 32
     38e:	ee e3       	ldi	r30, 0x3E	; 62
     390:	f8 e2       	ldi	r31, 0x28	; 40
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	a0 3a       	cpi	r26, 0xA0	; 160
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	22 e2       	ldi	r18, 0x22	; 34
     3a0:	a0 ea       	ldi	r26, 0xA0	; 160
     3a2:	b1 e2       	ldi	r27, 0x21	; 33
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	ae 3a       	cpi	r26, 0xAE	; 174
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <main>
     3b2:	0c 94 1d 14 	jmp	0x283a	; 0x283a <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <game_won_easy>:
uint8_t * start_size;


void game_won_easy()
{
	play_lights_won_easy_game();
     3ba:	0e 94 3b 09 	call	0x1276	; 0x1276 <play_lights_won_easy_game>
		
	if (!(note_player_playing()))
     3be:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     3c2:	81 11       	cpse	r24, r1
     3c4:	2f c0       	rjmp	.+94     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if (play_index < sizeof(easy_won_notes))
     3c6:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <play_index>
     3ca:	ec 30       	cpi	r30, 0x0C	; 12
     3cc:	78 f4       	brcc	.+30     	; 0x3ec <game_won_easy+0x32>
		{
			timer_counter = 0;
     3ce:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     3d2:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
			note_play(easy_won_notes[play_index++]);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	8e 0f       	add	r24, r30
     3da:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	e2 5f       	subi	r30, 0xF2	; 242
     3e2:	ff 4d       	sbci	r31, 0xDF	; 223
     3e4:	80 81       	ld	r24, Z
     3e6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
     3ea:	08 95       	ret
		}
		else
		{
			if (timer_counter++ > STEP_PAUSE)
     3ec:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     3f0:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     3f4:	9c 01       	movw	r18, r24
     3f6:	2f 5f       	subi	r18, 0xFF	; 255
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     3fe:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     402:	06 97       	sbiw	r24, 0x06	; 6
     404:	78 f0       	brcs	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			{
				play_index = 0;
     406:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
				timer_counter = 0;
     40a:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     40e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				sequence_initialized = 0;
     412:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <sequence_initialized>
				game_state = game_start;
     416:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <__data_end>
				play_lights_game(expander_read_ports(), 0);
     41a:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
     424:	08 95       	ret

00000426 <game_won_hard>:
	}
}

void game_won_hard()
{
	if (timer_counter++ < STEP_PAUSE)
     426:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     42a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     42e:	9c 01       	movw	r18, r24
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     438:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     43c:	05 97       	sbiw	r24, 0x05	; 5
     43e:	30 f0       	brcs	.+12     	; 0x44c <game_won_hard+0x26>
	{
		return;
	}
	
	set_allow_portal(ALLOW_VAL);
     440:	85 e5       	ldi	r24, 0x55	; 85
     442:	0e 94 18 11 	call	0x2230	; 0x2230 <set_allow_portal>
	set_start_mode(PORTAL_sm);
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	0e 94 5f 11 	call	0x22be	; 0x22be <set_start_mode>
     44c:	08 95       	ret

0000044e <get_seed>:
}


uint16_t get_seed()
{
	ADCA.CTRLB|=ADC_CURRLIMIT1_bm|ADC_CONMODE_bm; //medium current consumption, maximum sampling speed 150ksps, resolution 12-bit right adjusted, signed mode
     44e:	e0 e0       	ldi	r30, 0x00	; 0
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	80 65       	ori	r24, 0x50	; 80
     456:	81 83       	std	Z+1, r24	; 0x01
 
	ADCA.REFCTRL|=ADC_REFSEL0_bm; //INTVCC2 i.e. Vcc/1.6 is selected as reference voltage
     458:	82 81       	ldd	r24, Z+2	; 0x02
     45a:	80 61       	ori	r24, 0x10	; 16
     45c:	82 83       	std	Z+2, r24	; 0x02
 
	ADCA.EVCTRL=0x00;               //no event channel input is selected
     45e:	13 82       	std	Z+3, r1	; 0x03
 
	ADCA.PRESCALER|=ADC_PRESCALER2_bm; //prescaler 64 is selected and peripheral clock is 8MHz
     460:	84 81       	ldd	r24, Z+4	; 0x04
     462:	84 60       	ori	r24, 0x04	; 4
     464:	84 83       	std	Z+4, r24	; 0x04
 
	ADCA.INTFLAGS=ADC_CH0IF_bm; //clear interrupt flag by writing one to it
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	86 83       	std	Z+6, r24	; 0x06
 
	ADCA.CH0.CTRL|=ADC_CH_INPUTMODE0_bm; //signed mode, single ended positive input selected
     46a:	80 a1       	ldd	r24, Z+32	; 0x20
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 a3       	std	Z+32, r24	; 0x20
 
	ADCA.CH0.MUXCTRL|=ADC_CH_MUXPOS1_bm; //select PIN1 as input for ADC
     470:	81 a1       	ldd	r24, Z+33	; 0x21
     472:	80 61       	ori	r24, 0x10	; 16
     474:	81 a3       	std	Z+33, r24	; 0x21
 
	ADCA.CTRLA=ADC_ENABLE_bm | ADC_START_bm; //enable ADC and start
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	80 83       	st	Z, r24
	
	while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     47a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fb206>
     47e:	80 ff       	sbrs	r24, 0
     480:	fc cf       	rjmp	.-8      	; 0x47a <get_seed+0x2c>
	
	ADCA.INTFLAGS=ADC_CH0IF_bm;  //clear flag immediately after conversion
     482:	e0 e0       	ldi	r30, 0x00	; 0
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	86 83       	std	Z+6, r24	; 0x06
	
	uint16_t result = ADCA.CH0.RES;
     48a:	84 a1       	ldd	r24, Z+36	; 0x24
     48c:	95 a1       	ldd	r25, Z+37	; 0x25
	
	ADCA.CTRLA = 0;
     48e:	10 82       	st	Z, r1
	return result;
}
     490:	08 95       	ret

00000492 <easy_sequence_init>:

void easy_sequence_init()
{
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
	sequence_len = EASY_LENGTH;
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <sequence_len>
	sequence = (uint8_t *)malloc(EASY_LENGTH);
     49e:	8a e0       	ldi	r24, 0x0A	; 10
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 1f 12 	call	0x243e	; 0x243e <malloc>
     4a6:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <sequence>
     4aa:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <sequence+0x1>
	srand(get_seed());
     4ae:	0e 94 27 02 	call	0x44e	; 0x44e <get_seed>
     4b2:	0e 94 91 13 	call	0x2722	; 0x2722 <srand>
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	18 c0       	rjmp	.+48     	; 0x4ea <easy_sequence_init+0x58>
	{
		sequence[i] = 0x01 << (rand() % 4);
     4ba:	00 91 d1 21 	lds	r16, 0x21D1	; 0x8021d1 <sequence>
     4be:	10 91 d2 21 	lds	r17, 0x21D2	; 0x8021d2 <sequence+0x1>
     4c2:	0c 0f       	add	r16, r28
     4c4:	11 1d       	adc	r17, r1
     4c6:	0e 94 8c 13 	call	0x2718	; 0x2718 <rand>
     4ca:	83 70       	andi	r24, 0x03	; 3
     4cc:	90 78       	andi	r25, 0x80	; 128
     4ce:	99 23       	and	r25, r25
     4d0:	24 f4       	brge	.+8      	; 0x4da <easy_sequence_init+0x48>
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	8c 6f       	ori	r24, 0xFC	; 252
     4d6:	9f 6f       	ori	r25, 0xFF	; 255
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <easy_sequence_init+0x4e>
     4de:	99 0f       	add	r25, r25
     4e0:	8a 95       	dec	r24
     4e2:	ea f7       	brpl	.-6      	; 0x4de <easy_sequence_init+0x4c>
     4e4:	f8 01       	movw	r30, r16
     4e6:	90 83       	st	Z, r25
void easy_sequence_init()
{
	sequence_len = EASY_LENGTH;
	sequence = (uint8_t *)malloc(EASY_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     4e8:	cf 5f       	subi	r28, 0xFF	; 255
     4ea:	ca 30       	cpi	r28, 0x0A	; 10
     4ec:	30 f3       	brcs	.-52     	; 0x4ba <easy_sequence_init+0x28>
	{
		sequence[i] = 0x01 << (rand() % 4);
	}
	
}
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <hard_sequence_init>:

void hard_sequence_init()
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
	sequence_len = HARD_LENGTH;
     4fc:	8f e0       	ldi	r24, 0x0F	; 15
     4fe:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <sequence_len>
	sequence = (uint8_t *)malloc(HARD_LENGTH);
     502:	8f e0       	ldi	r24, 0x0F	; 15
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 1f 12 	call	0x243e	; 0x243e <malloc>
     50a:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <sequence>
     50e:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <sequence+0x1>
	srand(get_seed());
     512:	0e 94 27 02 	call	0x44e	; 0x44e <get_seed>
     516:	0e 94 91 13 	call	0x2722	; 0x2722 <srand>
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     51a:	c0 e0       	ldi	r28, 0x00	; 0
     51c:	10 c0       	rjmp	.+32     	; 0x53e <hard_sequence_init+0x48>
	{
		sequence[i] = (rand() % 15) + 1;
     51e:	00 91 d1 21 	lds	r16, 0x21D1	; 0x8021d1 <sequence>
     522:	10 91 d2 21 	lds	r17, 0x21D2	; 0x8021d2 <sequence+0x1>
     526:	0c 0f       	add	r16, r28
     528:	11 1d       	adc	r17, r1
     52a:	0e 94 8c 13 	call	0x2718	; 0x2718 <rand>
     52e:	6f e0       	ldi	r22, 0x0F	; 15
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodhi4>
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	f8 01       	movw	r30, r16
     53a:	80 83       	st	Z, r24
void hard_sequence_init()
{
	sequence_len = HARD_LENGTH;
	sequence = (uint8_t *)malloc(HARD_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     53c:	cf 5f       	subi	r28, 0xFF	; 255
     53e:	cf 30       	cpi	r28, 0x0F	; 15
     540:	70 f3       	brcs	.-36     	; 0x51e <hard_sequence_init+0x28>
	{
		sequence[i] = (rand() % 15) + 1;
	}
}
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <games_init>:

void games_init(GameModes mode)
{

	if (mode == easy)
     54a:	81 11       	cpse	r24, r1
     54c:	19 c0       	rjmp	.+50     	; 0x580 <games_init+0x36>
	{
		sequence_init = easy_sequence_init;
     54e:	89 e4       	ldi	r24, 0x49	; 73
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <sequence_init>
     556:	90 93 da 21 	sts	0x21DA, r25	; 0x8021da <sequence_init+0x1>
		handle_game_won_state = game_won_easy;
     55a:	8d ed       	ldi	r24, 0xDD	; 221
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <handle_game_won_state>
     562:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <handle_game_won_state+0x1>
		start_notes = easy_game_start_notes;
     566:	8e e1       	ldi	r24, 0x1E	; 30
     568:	90 e2       	ldi	r25, 0x20	; 32
     56a:	80 93 d7 21 	sts	0x21D7, r24	; 0x8021d7 <start_notes>
     56e:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <start_notes+0x1>
		start_size = sizeof(easy_game_start_notes);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <start_size>
     57a:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <start_size+0x1>
     57e:	08 95       	ret
	}
	else
	{
		sequence_init = hard_sequence_init;
     580:	8b e7       	ldi	r24, 0x7B	; 123
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <sequence_init>
     588:	90 93 da 21 	sts	0x21DA, r25	; 0x8021da <sequence_init+0x1>
		handle_game_won_state = game_won_hard;
     58c:	83 e1       	ldi	r24, 0x13	; 19
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <handle_game_won_state>
     594:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <handle_game_won_state+0x1>
		start_notes = hard_game_start_notes;
     598:	8a e1       	ldi	r24, 0x1A	; 26
     59a:	90 e2       	ldi	r25, 0x20	; 32
     59c:	80 93 d7 21 	sts	0x21D7, r24	; 0x8021d7 <start_notes>
     5a0:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <start_notes+0x1>
		start_size = sizeof(hard_game_start_notes);
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <start_size>
     5ac:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <start_size+0x1>
     5b0:	08 95       	ret

000005b2 <games_step>:
	
	
}

void games_step(uint8_t buttons)
{
     5b2:	cf 93       	push	r28
     5b4:	c8 2f       	mov	r28, r24
	switch (game_state)
     5b6:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <__data_end>
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <games_step+0xe>
     5be:	ab c0       	rjmp	.+342    	; 0x716 <games_step+0x164>
     5c0:	30 f4       	brcc	.+12     	; 0x5ce <games_step+0x1c>
     5c2:	88 23       	and	r24, r24
     5c4:	59 f0       	breq	.+22     	; 0x5dc <games_step+0x2a>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	09 f4       	brne	.+2      	; 0x5cc <games_step+0x1a>
     5ca:	4c c0       	rjmp	.+152    	; 0x664 <games_step+0xb2>
     5cc:	46 c1       	rjmp	.+652    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <games_step+0x22>
     5d2:	08 c1       	rjmp	.+528    	; 0x7e4 <games_step+0x232>
     5d4:	84 30       	cpi	r24, 0x04	; 4
     5d6:	09 f4       	brne	.+2      	; 0x5da <games_step+0x28>
     5d8:	0b c1       	rjmp	.+534    	; 0x7f0 <games_step+0x23e>
     5da:	3f c1       	rjmp	.+638    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	{
		case game_start:
		
			if (!(sequence_initialized))
     5dc:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <sequence_initialized>
     5e0:	81 11       	cpse	r24, r1
     5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <games_step+0x42>
			{
				sequence_init();
     5e4:	e0 91 d9 21 	lds	r30, 0x21D9	; 0x8021d9 <sequence_init>
     5e8:	f0 91 da 21 	lds	r31, 0x21DA	; 0x8021da <sequence_init+0x1>
     5ec:	09 95       	icall
				sequence_initialized = 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <sequence_initialized>
			}		
		
			play_lights_game(expander_read_ports(), 0);
     5f4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
			if (play_index == start_size && !(note_player_playing()))
     5fe:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	20 91 d3 21 	lds	r18, 0x21D3	; 0x8021d3 <start_size>
     608:	30 91 d4 21 	lds	r19, 0x21D4	; 0x8021d4 <start_size+0x1>
     60c:	82 17       	cp	r24, r18
     60e:	93 07       	cpc	r25, r19
     610:	a9 f4       	brne	.+42     	; 0x63c <games_step+0x8a>
     612:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     616:	81 11       	cpse	r24, r1
     618:	11 c0       	rjmp	.+34     	; 0x63c <games_step+0x8a>
			{
				play_lights_game(expander_read_ports(), 0);
     61a:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
				game_state = play_sequence;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     62a:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     62e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     632:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
				progress_index = 1;
     636:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <progress_index>
				break;
     63a:	0f c1       	rjmp	.+542    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
			
			if (!(note_player_playing()))
     63c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     640:	81 11       	cpse	r24, r1
     642:	0b c1       	rjmp	.+534    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				note_play(start_notes[play_index++]);
     644:	e0 91 d7 21 	lds	r30, 0x21D7	; 0x8021d7 <start_notes>
     648:	f0 91 d8 21 	lds	r31, 0x21D8	; 0x8021d8 <start_notes+0x1>
     64c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	98 0f       	add	r25, r24
     654:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <play_index>
     658:	e8 0f       	add	r30, r24
     65a:	f1 1d       	adc	r31, r1
     65c:	80 81       	ld	r24, Z
     65e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
     662:	fb c0       	rjmp	.+502    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			

			break;
		case play_sequence:
		
			if (timer_counter < STEP_PAUSE)
     664:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     668:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	91 05       	cpc	r25, r1
     670:	30 f4       	brcc	.+12     	; 0x67e <games_step+0xcc>
			{
				timer_counter++;
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <timer_counter>
     678:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <timer_counter+0x1>
				break;
     67c:	ee c0       	rjmp	.+476    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (timer_counter < NOTE_PAUSE)
     67e:	08 97       	sbiw	r24, 0x08	; 8
     680:	78 f4       	brcc	.+30     	; 0x6a0 <games_step+0xee>
			{
				play_lights_game(expander_read_ports(), 0);
     682:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
				timer_counter++;
     68c:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     690:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <timer_counter>
     69a:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <timer_counter+0x1>
				break;
     69e:	dd c0       	rjmp	.+442    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (play_index == progress_index)
     6a0:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <play_index>
     6a4:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <progress_index>
     6a8:	98 13       	cpse	r25, r24
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <games_step+0x118>
			{
			
				play_lights_game(expander_read_ports(), 0);
     6ac:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
				game_state = get_input;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     6bc:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     6c0:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     6c4:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>

				break;
     6c8:	c8 c0       	rjmp	.+400    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (!(note_player_playing()))
     6ca:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     6ce:	81 11       	cpse	r24, r1
     6d0:	c4 c0       	rjmp	.+392    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				play_lights_game(expander_read_ports(), sequence[play_index]);
     6d2:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     6d6:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     6da:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	c0 81       	ld	r28, Z
     6e4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     6e8:	6c 2f       	mov	r22, r28
     6ea:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
				note_play(sequence[play_index++]);
     6ee:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     6f2:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     6f6:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	98 0f       	add	r25, r24
     6fe:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <play_index>
     702:	e8 0f       	add	r30, r24
     704:	f1 1d       	adc	r31, r1
     706:	80 81       	ld	r24, Z
     708:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
				timer_counter = 0;
     70c:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     710:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
     714:	a2 c0       	rjmp	.+324    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		
		
			break;
		case get_input:
		
			play_lights_game(expander_read_ports(), buttons);
     716:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     71a:	6c 2f       	mov	r22, r28
     71c:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
		
			if (timer_counter++ > INPUT_TIMEOUT && !(note_player_playing()))
     720:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     724:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     728:	9c 01       	movw	r18, r24
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     732:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     736:	45 97       	sbiw	r24, 0x15	; 21
     738:	98 f0       	brcs	.+38     	; 0x760 <games_step+0x1ae>
     73a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     73e:	81 11       	cpse	r24, r1
     740:	0f c0       	rjmp	.+30     	; 0x760 <games_step+0x1ae>
			{
				play_lights_game(expander_read_ports(), 0);
     742:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
				game_state = game_lost;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     752:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     756:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     75a:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>

				break;
     75e:	7d c0       	rjmp	.+250    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}

		
			if (buttons && expander_get_val_changed() && !(note_player_playing()))
     760:	cc 23       	and	r28, r28
     762:	09 f4       	brne	.+2      	; 0x766 <games_step+0x1b4>
     764:	7a c0       	rjmp	.+244    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     766:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <expander_get_val_changed>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <games_step+0x1be>
     76e:	75 c0       	rjmp	.+234    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     770:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     774:	81 11       	cpse	r24, r1
     776:	71 c0       	rjmp	.+226    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				timer_counter = 0;
     778:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     77c:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
			
				if (buttons == sequence[play_index])
     780:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     784:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     788:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     78c:	e8 0f       	add	r30, r24
     78e:	f1 1d       	adc	r31, r1
     790:	80 81       	ld	r24, Z
     792:	c8 13       	cpse	r28, r24
     794:	21 c0       	rjmp	.+66     	; 0x7d8 <games_step+0x226>
				{
					note_play(buttons);
     796:	8c 2f       	mov	r24, r28
     798:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
					play_index++;
     79c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
				

					if (play_index == progress_index)
     7a6:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <progress_index>
     7aa:	89 13       	cpse	r24, r25
     7ac:	56 c0       	rjmp	.+172    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					{
						progress_index++;
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <progress_index>
					
						if (progress_index > sequence_len)
     7b4:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <sequence_len>
     7b8:	89 17       	cp	r24, r25
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <games_step+0x212>
						{
							game_state = game_won;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <games_step+0x218>
						}
						else
						{
							game_state = play_sequence;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
						}
					
						timer_counter = 0;
     7ca:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     7ce:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
						play_index = 0;
     7d2:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
						break;
     7d6:	41 c0       	rjmp	.+130    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					}
				}
				else
				{
					game_state = game_lost;
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
					timer_counter = 0;
					play_index = 0;
     7de:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
					break;
     7e2:	3b c0       	rjmp	.+118    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				}
			}
		
			break;
		case game_won:
			handle_game_won_state();
     7e4:	e0 91 d5 21 	lds	r30, 0x21D5	; 0x8021d5 <handle_game_won_state>
     7e8:	f0 91 d6 21 	lds	r31, 0x21D6	; 0x8021d6 <handle_game_won_state+0x1>
     7ec:	09 95       	icall
			break;
     7ee:	35 c0       	rjmp	.+106    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		case game_lost:
		
			play_lights_game_over();
     7f0:	0e 94 09 09 	call	0x1212	; 0x1212 <play_lights_game_over>
			if (!(note_player_playing()))
     7f4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
     7f8:	81 11       	cpse	r24, r1
     7fa:	2f c0       	rjmp	.+94     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				if (play_index < sizeof(game_lost_notes))
     7fc:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <play_index>
     800:	e4 30       	cpi	r30, 0x04	; 4
     802:	78 f4       	brcc	.+30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
				{
					timer_counter = 0;
     804:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     808:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
					note_play(game_lost_notes[play_index++]);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	8e 0f       	add	r24, r30
     810:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	e6 5f       	subi	r30, 0xF6	; 246
     818:	ff 4d       	sbci	r31, 0xDF	; 223
     81a:	80 81       	ld	r24, Z
     81c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
     820:	1c c0       	rjmp	.+56     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				}
				else
				{
					if (timer_counter++ > STEP_PAUSE)
     822:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     826:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     82a:	9c 01       	movw	r18, r24
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     834:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     838:	06 97       	sbiw	r24, 0x06	; 6
     83a:	78 f0       	brcs	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					{
						play_index = 0;
     83c:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
						timer_counter = 0;
     840:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     844:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
						sequence_initialized = 0;
     848:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <sequence_initialized>
						game_state = game_start;
     84c:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <__data_end>
						play_lights_game(expander_read_ports(), 0);
     850:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	0e 94 be 08 	call	0x117c	; 0x117c <play_lights_game>
			}

			break;
	}
	
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
	
	while(twi_transfer_complete!=1);

	return 0;
}
     85e:	84 e9       	ldi	r24, 0x94	; 148
     860:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
     864:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
     868:	e1 e8       	ldi	r30, 0x81	; 129
     86a:	f4 e0       	ldi	r31, 0x04	; 4
     86c:	80 81       	ld	r24, Z
     86e:	88 6f       	ori	r24, 0xF8	; 248
     870:	80 83       	st	Z, r24
     872:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
     876:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
     87a:	e4 e8       	ldi	r30, 0x84	; 132
     87c:	f4 e0       	ldi	r31, 0x04	; 4
     87e:	80 81       	ld	r24, Z
     880:	8d 6c       	ori	r24, 0xCD	; 205
     882:	80 83       	st	Z, r24
     884:	08 95       	ret

00000886 <twi_read>:
     886:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <twi_no_of_bytes>
     88a:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <twi_no_of_bytes+0x1>
     88e:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <twi_data_count>
     892:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <twi_data_count+0x1>
     896:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <twi_transfer_complete>
     89a:	60 93 e5 21 	sts	0x21E5, r22	; 0x8021e5 <twi_data>
     89e:	70 93 e6 21 	sts	0x21E6, r23	; 0x8021e6 <twi_data+0x1>
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
     8ae:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <twi_read+0x28>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	08 95       	ret

000008ba <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     8ba:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     8be:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <twi_no_of_bytes>
     8c2:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     8c6:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <twi_data_count>
     8ca:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     8ce:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <twi_transfer_complete>
	
	twi_data=data;
     8d2:	60 93 e5 21 	sts	0x21E5, r22	; 0x8021e5 <twi_data>
     8d6:	70 93 e6 21 	sts	0x21E6, r23	; 0x8021e6 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     8da:	88 0f       	add	r24, r24
     8dc:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     8e0:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <twi_write+0x26>
	
	return 0;
}
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret

000008ec <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     906:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     90a:	83 ff       	sbrs	r24, 3
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     914:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     918:	82 fd       	sbrc	r24, 2
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__vector_11+0x38>
     91c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     920:	84 ff       	sbrs	r24, 4
     922:	08 c0       	rjmp	.+16     	; 0x934 <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     924:	e3 e8       	ldi	r30, 0x83	; 131
     926:	f4 e0       	ldi	r31, 0x04	; 4
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     930:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     934:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     938:	88 23       	and	r24, r24
     93a:	31 f0       	breq	.+12     	; 0x948 <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     93c:	e4 e8       	ldi	r30, 0x84	; 132
     93e:	f4 e0       	ldi	r31, 0x04	; 4
     940:	80 81       	ld	r24, Z
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 83       	st	Z, r24
		return;
     946:	79 c0       	rjmp	.+242    	; 0xa3a <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     948:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     94c:	86 ff       	sbrs	r24, 6
     94e:	47 c0       	rjmp	.+142    	; 0x9de <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     950:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     954:	84 fd       	sbrc	r24, 4
     956:	43 c0       	rjmp	.+134    	; 0x9de <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     958:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <twi_repeat_mode>
     95c:	88 23       	and	r24, r24
     95e:	c9 f0       	breq	.+50     	; 0x992 <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     960:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <twi_repeat_cmd_sent>
     964:	88 23       	and	r24, r24
     966:	69 f0       	breq	.+26     	; 0x982 <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     968:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <twi_repeat_data>
     96c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     970:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     974:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	80 93 e1 21 	sts	0x21E1, r24	; 0x8021e1 <twi_data_count>
     97e:	90 93 e2 21 	sts	0x21E2, r25	; 0x8021e2 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     982:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <twi_repeat_cmd>
     986:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <twi_repeat_cmd_sent>
     990:	15 c0       	rjmp	.+42     	; 0x9bc <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     992:	20 91 e5 21 	lds	r18, 0x21E5	; 0x8021e5 <twi_data>
     996:	30 91 e6 21 	lds	r19, 0x21E6	; 0x8021e6 <twi_data+0x1>
     99a:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     99e:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     9a2:	ac 01       	movw	r20, r24
     9a4:	4f 5f       	subi	r20, 0xFF	; 255
     9a6:	5f 4f       	sbci	r21, 0xFF	; 255
     9a8:	40 93 e1 21 	sts	0x21E1, r20	; 0x8021e1 <twi_data_count>
     9ac:	50 93 e2 21 	sts	0x21E2, r21	; 0x8021e2 <twi_data_count+0x1>
     9b0:	f9 01       	movw	r30, r18
     9b2:	e8 0f       	add	r30, r24
     9b4:	f9 1f       	adc	r31, r25
     9b6:	80 81       	ld	r24, Z
     9b8:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     9bc:	20 91 e1 21 	lds	r18, 0x21E1	; 0x8021e1 <twi_data_count>
     9c0:	30 91 e2 21 	lds	r19, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     9c4:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <twi_no_of_bytes>
     9c8:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <twi_no_of_bytes+0x1>
     9cc:	28 17       	cp	r18, r24
     9ce:	39 07       	cpc	r19, r25
     9d0:	31 f4       	brne	.+12     	; 0x9de <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     9de:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     9e2:	88 23       	and	r24, r24
     9e4:	54 f5       	brge	.+84     	; 0xa3a <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     9e6:	20 91 e5 21 	lds	r18, 0x21E5	; 0x8021e5 <twi_data>
     9ea:	30 91 e6 21 	lds	r19, 0x21E6	; 0x8021e6 <twi_data+0x1>
     9ee:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     9f2:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     9f6:	ac 01       	movw	r20, r24
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	40 93 e1 21 	sts	0x21E1, r20	; 0x8021e1 <twi_data_count>
     a00:	50 93 e2 21 	sts	0x21E2, r21	; 0x8021e2 <twi_data_count+0x1>
     a04:	f9 01       	movw	r30, r18
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     a0e:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     a10:	20 91 e1 21 	lds	r18, 0x21E1	; 0x8021e1 <twi_data_count>
     a14:	30 91 e2 21 	lds	r19, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     a18:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <twi_no_of_bytes>
     a1c:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <twi_no_of_bytes+0x1>
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	39 f4       	brne	.+14     	; 0xa34 <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <expander_read_port>:
	twi_write(addr, cmd, 3);
	last_val = expander_read_ports();
}

uint8_t expander_read_port(uint8_t portAddr)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <expander_read_port+0x6>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     a5e:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	6e 5f       	subi	r22, 0xFE	; 254
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <twi_write>
	
	twi_read(addr, &port_val, 1);
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	0e 94 43 04 	call	0x886	; 0x886 <twi_read>
	
	return port_val;
	
}
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <expander_read_ports>:

uint16_t expander_read_ports()
{
     a8c:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 2a 05 	call	0xa54	; 0xa54 <expander_read_port>
     a94:	c8 2f       	mov	r28, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 2a 05 	call	0xa54	; 0xa54 <expander_read_port>
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	98 2f       	mov	r25, r24
     aa0:	88 27       	eor	r24, r24
	return port_data;
	
}
     aa2:	8c 0f       	add	r24, r28
     aa4:	91 1d       	adc	r25, r1
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <expander_init>:
#include "i2c.h"

volatile uint16_t last_val = 0;

void expander_init()
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <expander_init+0x6>
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     ab6:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_init>
	
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	8a 83       	std	Y+2, r24	; 0x02
     ac2:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     ac4:	43 e0       	ldi	r20, 0x03	; 3
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	80 e2       	ldi	r24, 0x20	; 32
     ad0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <twi_write>
	last_val = expander_read_ports();
     ad4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     ad8:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     adc:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
}
     ae0:	23 96       	adiw	r28, 0x03	; 3
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <expander_get_last_value>:
	
}

uint16_t expander_get_last_value()
{
	return last_val;
     aec:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <last_val>
     af0:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <last_val+0x1>
}
     af4:	08 95       	ret

00000af6 <expander_get_val_changed>:

uint8_t expander_get_val_changed()
{
	uint16_t val = expander_read_ports();
     af6:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
	
	if (val == last_val)
     afa:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <last_val>
     afe:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <last_val+0x1>
     b02:	82 17       	cp	r24, r18
     b04:	93 07       	cpc	r25, r19
     b06:	99 f0       	breq	.+38     	; 0xb2e <expander_get_val_changed+0x38>
	{
		return 0;
	}
	
	if (val > last_val)
     b08:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <last_val>
     b0c:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <last_val+0x1>
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	30 f4       	brcc	.+12     	; 0xb22 <expander_get_val_changed+0x2c>
	{
		last_val = val;
     b16:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     b1a:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
		return 2;		
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	08 95       	ret
	}
	
	last_val = val;
     b22:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     b26:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
	return 1;	
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	08 95       	ret
{
	uint16_t val = expander_read_ports();
	
	if (val == last_val)
	{
		return 0;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
		return 2;		
	}
	
	last_val = val;
	return 1;	
     b30:	08 95       	ret

00000b32 <play_lights_overlay_note_button_leds>:
	}
};

void play_lights_overlay_note_button_leds(uint8_t buttons)
{
	if (buttons & 0x01)
     b32:	80 ff       	sbrs	r24, 0
     b34:	12 c0       	rjmp	.+36     	; 0xb5a <play_lights_overlay_note_button_leds+0x28>
	{
		leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
     b36:	e8 e7       	ldi	r30, 0x78	; 120
     b38:	f2 e2       	ldi	r31, 0x22	; 34
     b3a:	10 82       	st	Z, r1
     b3c:	90 e4       	ldi	r25, 0x40	; 64
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	12 82       	std	Z+2, r1	; 0x02
     b42:	10 82       	st	Z, r1
     b44:	91 83       	std	Z+1, r25	; 0x01
     b46:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
     b48:	eb e7       	ldi	r30, 0x7B	; 123
     b4a:	f2 e2       	ldi	r31, 0x22	; 34
     b4c:	10 82       	st	Z, r1
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	10 82       	st	Z, r1
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	12 82       	std	Z+2, r1	; 0x02
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <play_lights_overlay_note_button_leds+0x48>
	}
	else
	{
		leds[GRUMBO_LED_COUNT] = game_colors[LED_OFF];
     b5a:	e8 e7       	ldi	r30, 0x78	; 120
     b5c:	f2 e2       	ldi	r31, 0x22	; 34
     b5e:	10 82       	st	Z, r1
     b60:	11 82       	std	Z+1, r1	; 0x01
     b62:	12 82       	std	Z+2, r1	; 0x02
     b64:	10 82       	st	Z, r1
     b66:	11 82       	std	Z+1, r1	; 0x01
     b68:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[LED_OFF];
     b6a:	eb e7       	ldi	r30, 0x7B	; 123
     b6c:	f2 e2       	ldi	r31, 0x22	; 34
     b6e:	10 82       	st	Z, r1
     b70:	11 82       	std	Z+1, r1	; 0x01
     b72:	12 82       	std	Z+2, r1	; 0x02
     b74:	10 82       	st	Z, r1
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x02)
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <play_lights_overlay_note_button_leds+0x70>
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
     b7e:	ee e7       	ldi	r30, 0x7E	; 126
     b80:	f2 e2       	ldi	r31, 0x22	; 34
     b82:	90 e4       	ldi	r25, 0x40	; 64
     b84:	90 83       	st	Z, r25
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	12 82       	std	Z+2, r1	; 0x02
     b8a:	90 83       	st	Z, r25
     b8c:	11 82       	std	Z+1, r1	; 0x01
     b8e:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
     b90:	e1 e8       	ldi	r30, 0x81	; 129
     b92:	f2 e2       	ldi	r31, 0x22	; 34
     b94:	90 83       	st	Z, r25
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	12 82       	std	Z+2, r1	; 0x02
     b9a:	90 83       	st	Z, r25
     b9c:	11 82       	std	Z+1, r1	; 0x01
     b9e:	12 82       	std	Z+2, r1	; 0x02
     ba0:	10 c0       	rjmp	.+32     	; 0xbc2 <play_lights_overlay_note_button_leds+0x90>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[LED_OFF];
     ba2:	ee e7       	ldi	r30, 0x7E	; 126
     ba4:	f2 e2       	ldi	r31, 0x22	; 34
     ba6:	10 82       	st	Z, r1
     ba8:	11 82       	std	Z+1, r1	; 0x01
     baa:	12 82       	std	Z+2, r1	; 0x02
     bac:	10 82       	st	Z, r1
     bae:	11 82       	std	Z+1, r1	; 0x01
     bb0:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[LED_OFF];
     bb2:	e1 e8       	ldi	r30, 0x81	; 129
     bb4:	f2 e2       	ldi	r31, 0x22	; 34
     bb6:	10 82       	st	Z, r1
     bb8:	11 82       	std	Z+1, r1	; 0x01
     bba:	12 82       	std	Z+2, r1	; 0x02
     bbc:	10 82       	st	Z, r1
     bbe:	11 82       	std	Z+1, r1	; 0x01
     bc0:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x04)
     bc2:	82 ff       	sbrs	r24, 2
     bc4:	12 c0       	rjmp	.+36     	; 0xbea <play_lights_overlay_note_button_leds+0xb8>
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
     bc6:	e4 e8       	ldi	r30, 0x84	; 132
     bc8:	f2 e2       	ldi	r31, 0x22	; 34
     bca:	10 82       	st	Z, r1
     bcc:	11 82       	std	Z+1, r1	; 0x01
     bce:	90 e4       	ldi	r25, 0x40	; 64
     bd0:	92 83       	std	Z+2, r25	; 0x02
     bd2:	10 82       	st	Z, r1
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	92 83       	std	Z+2, r25	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
     bd8:	e7 e8       	ldi	r30, 0x87	; 135
     bda:	f2 e2       	ldi	r31, 0x22	; 34
     bdc:	10 82       	st	Z, r1
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	92 83       	std	Z+2, r25	; 0x02
     be2:	10 82       	st	Z, r1
     be4:	11 82       	std	Z+1, r1	; 0x01
     be6:	92 83       	std	Z+2, r25	; 0x02
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <play_lights_overlay_note_button_leds+0xd8>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[LED_OFF];
     bea:	e4 e8       	ldi	r30, 0x84	; 132
     bec:	f2 e2       	ldi	r31, 0x22	; 34
     bee:	10 82       	st	Z, r1
     bf0:	11 82       	std	Z+1, r1	; 0x01
     bf2:	12 82       	std	Z+2, r1	; 0x02
     bf4:	10 82       	st	Z, r1
     bf6:	11 82       	std	Z+1, r1	; 0x01
     bf8:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[LED_OFF];
     bfa:	e7 e8       	ldi	r30, 0x87	; 135
     bfc:	f2 e2       	ldi	r31, 0x22	; 34
     bfe:	10 82       	st	Z, r1
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	12 82       	std	Z+2, r1	; 0x02
     c04:	10 82       	st	Z, r1
     c06:	11 82       	std	Z+1, r1	; 0x01
     c08:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x08)
     c0a:	83 ff       	sbrs	r24, 3
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <play_lights_overlay_note_button_leds+0x100>
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
     c0e:	ea e8       	ldi	r30, 0x8A	; 138
     c10:	f2 e2       	ldi	r31, 0x22	; 34
     c12:	80 e2       	ldi	r24, 0x20	; 32
     c14:	80 83       	st	Z, r24
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	12 82       	std	Z+2, r1	; 0x02
     c1a:	80 83       	st	Z, r24
     c1c:	81 83       	std	Z+1, r24	; 0x01
     c1e:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
     c20:	ed e8       	ldi	r30, 0x8D	; 141
     c22:	f2 e2       	ldi	r31, 0x22	; 34
     c24:	80 83       	st	Z, r24
     c26:	81 83       	std	Z+1, r24	; 0x01
     c28:	12 82       	std	Z+2, r1	; 0x02
     c2a:	80 83       	st	Z, r24
     c2c:	81 83       	std	Z+1, r24	; 0x01
     c2e:	12 82       	std	Z+2, r1	; 0x02
     c30:	08 95       	ret
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[LED_OFF];
     c32:	ea e8       	ldi	r30, 0x8A	; 138
     c34:	f2 e2       	ldi	r31, 0x22	; 34
     c36:	10 82       	st	Z, r1
     c38:	11 82       	std	Z+1, r1	; 0x01
     c3a:	12 82       	std	Z+2, r1	; 0x02
     c3c:	10 82       	st	Z, r1
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[LED_OFF];
     c42:	ed e8       	ldi	r30, 0x8D	; 141
     c44:	f2 e2       	ldi	r31, 0x22	; 34
     c46:	10 82       	st	Z, r1
     c48:	11 82       	std	Z+1, r1	; 0x01
     c4a:	12 82       	std	Z+2, r1	; 0x02
     c4c:	10 82       	st	Z, r1
     c4e:	11 82       	std	Z+1, r1	; 0x01
     c50:	12 82       	std	Z+2, r1	; 0x02
     c52:	08 95       	ret

00000c54 <overlay_dingle_pos>:
	}
}
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	bc 01       	movw	r22, r24
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	42 c0       	rjmp	.+132    	; 0xce2 <overlay_dingle_pos+0x8e>
	{
		if (!(dingle_pos & (0x01 << i)))
     c5e:	8d 2f       	mov	r24, r29
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	0d 2e       	mov	r0, r29
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <overlay_dingle_pos+0x1a>
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <overlay_dingle_pos+0x16>
     c72:	26 23       	and	r18, r22
     c74:	37 23       	and	r19, r23
     c76:	23 2b       	or	r18, r19
     c78:	99 f5       	brne	.+102    	; 0xce0 <overlay_dingle_pos+0x8c>
			//if i is 0, since we are using unsigned ints, we have to manually calc the starting index
			//in the LED array
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
     c7a:	dd 23       	and	r29, r29
     c7c:	29 f0       	breq	.+10     	; 0xc88 <overlay_dingle_pos+0x34>
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
			}
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	98 2f       	mov	r25, r24
     c82:	99 0f       	add	r25, r25
     c84:	89 0f       	add	r24, r25
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <overlay_dingle_pos+0x36>
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
     c88:	8d e2       	ldi	r24, 0x2D	; 45
     c8a:	c0 e0       	ldi	r28, 0x00	; 0
     c8c:	27 c0       	rjmp	.+78     	; 0xcdc <overlay_dingle_pos+0x88>
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
			{				
				leds[led_i % GRUMBO_LED_COUNT] = pos_leds[j];
     c8e:	9b ea       	ldi	r25, 0xAB	; 171
     c90:	89 9f       	mul	r24, r25
     c92:	91 2d       	mov	r25, r1
     c94:	11 24       	eor	r1, r1
     c96:	92 95       	swap	r25
     c98:	96 95       	lsr	r25
     c9a:	97 70       	andi	r25, 0x07	; 7
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e3       	ldi	r19, 0x30	; 48
     ca0:	93 9f       	mul	r25, r19
     ca2:	20 19       	sub	r18, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4c 2f       	mov	r20, r28
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	f9 01       	movw	r30, r18
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	2e 0f       	add	r18, r30
     cb4:	3f 1f       	adc	r19, r31
     cb6:	f9 01       	movw	r30, r18
     cb8:	e8 51       	subi	r30, 0x18	; 24
     cba:	fe 4d       	sbci	r31, 0xDE	; 222
     cbc:	da 01       	movw	r26, r20
     cbe:	aa 0f       	add	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	4a 0f       	add	r20, r26
     cc4:	5b 1f       	adc	r21, r27
     cc6:	da 01       	movw	r26, r20
     cc8:	a2 5a       	subi	r26, 0xA2	; 162
     cca:	bf 4d       	sbci	r27, 0xDF	; 223
     ccc:	2d 91       	ld	r18, X+
     cce:	3d 91       	ld	r19, X+
     cd0:	4c 91       	ld	r20, X
     cd2:	20 83       	st	Z, r18
     cd4:	31 83       	std	Z+1, r19	; 0x01
     cd6:	42 83       	std	Z+2, r20	; 0x02
				led_i++;
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
     cda:	cf 5f       	subi	r28, 0xFF	; 255
     cdc:	c7 30       	cpi	r28, 0x07	; 7
     cde:	b8 f2       	brcs	.-82     	; 0xc8e <overlay_dingle_pos+0x3a>
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     ce0:	df 5f       	subi	r29, 0xFF	; 255
     ce2:	d0 31       	cpi	r29, 0x10	; 16
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <overlay_dingle_pos+0x94>
     ce6:	bb cf       	rjmp	.-138    	; 0xc5e <overlay_dingle_pos+0xa>
				led_i++;
			}
		}
		
	}
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <play_lights_standby>:
uint8_t red = MAX_BRIGHTNESS/16;
uint8_t green = MAX_BRIGHTNESS/16;
uint8_t blue = MAX_BRIGHTNESS/16;

void play_lights_standby()
{
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
	ws2812drv_led_t color = {.r = red, .g = green, .b = blue};
     cf4:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <green>
     cf8:	c2 2e       	mov	r12, r18
     cfa:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <red>
     cfe:	d9 2e       	mov	r13, r25
     d00:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <blue>
     d04:	e8 2e       	mov	r14, r24
	blue++;
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <blue>
	if (blue >= MAX_BRIGHTNESS / 4)
     d0c:	80 31       	cpi	r24, 0x10	; 16
     d0e:	88 f0       	brcs	.+34     	; 0xd32 <play_lights_standby+0x44>
	{
		blue = MAX_BRIGHTNESS/16;
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <blue>
		red++;
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <red>
		if (red >= MAX_BRIGHTNESS / 4)
     d1c:	90 31       	cpi	r25, 0x10	; 16
     d1e:	48 f0       	brcs	.+18     	; 0xd32 <play_lights_standby+0x44>
		{
			red = MAX_BRIGHTNESS/16;
     d20:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <red>
			green++;
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	20 93 23 20 	sts	0x2023, r18	; 0x802023 <green>
			if (green >= MAX_BRIGHTNESS / 4)
     d2a:	20 31       	cpi	r18, 0x10	; 16
     d2c:	10 f0       	brcs	.+4      	; 0xd32 <play_lights_standby+0x44>
			{
				green = MAX_BRIGHTNESS/16;
     d2e:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <green>
uint8_t red = MAX_BRIGHTNESS/16;
uint8_t green = MAX_BRIGHTNESS/16;
uint8_t blue = MAX_BRIGHTNESS/16;

void play_lights_standby()
{
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	0e c0       	rjmp	.+28     	; 0xd52 <play_lights_standby+0x64>
	
	
	
	for (uint8_t i = 0; i < LED_COUNT; i++)
	{
		leds[i] = color;
     d36:	82 2f       	mov	r24, r18
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	8e 0f       	add	r24, r30
     d42:	9f 1f       	adc	r25, r31
     d44:	fc 01       	movw	r30, r24
     d46:	e8 51       	subi	r30, 0x18	; 24
     d48:	fe 4d       	sbci	r31, 0xDE	; 222
     d4a:	c0 82       	st	Z, r12
     d4c:	d1 82       	std	Z+1, r13	; 0x01
     d4e:	e2 82       	std	Z+2, r14	; 0x02
		}
	}
	
	
	
	for (uint8_t i = 0; i < LED_COUNT; i++)
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	28 33       	cpi	r18, 0x38	; 56
     d54:	80 f3       	brcs	.-32     	; 0xd36 <play_lights_standby+0x48>
	{
		leds[i] = color;
	}

	ws2812drv_start_transfer(leds, LED_COUNT);
     d56:	68 e3       	ldi	r22, 0x38	; 56
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	88 ee       	ldi	r24, 0xE8	; 232
     d5c:	91 e2       	ldi	r25, 0x21	; 33
     d5e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	08 95       	ret

00000d6a <play_lights_free_play>:

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	36 c0       	rjmp	.+108    	; 0xde8 <play_lights_free_play+0x7e>
	{
		leds[(i + offset) % GRUMBO_LED_COUNT] = rainbow_leds[i % RAINBOW_LED_COUNT];
     d7c:	00 91 a9 21 	lds	r16, 0x21A9	; 0x8021a9 <offset>
     d80:	80 2f       	mov	r24, r16
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	81 0f       	add	r24, r17
     d86:	91 1d       	adc	r25, r1
     d88:	60 e3       	ldi	r22, 0x30	; 48
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodhi4>
     d90:	ac 01       	movw	r20, r24
     d92:	9b ea       	ldi	r25, 0xAB	; 171
     d94:	19 9f       	mul	r17, r25
     d96:	91 2d       	mov	r25, r1
     d98:	11 24       	eor	r1, r1
     d9a:	96 95       	lsr	r25
     d9c:	96 95       	lsr	r25
     d9e:	96 95       	lsr	r25
     da0:	89 2f       	mov	r24, r25
     da2:	88 0f       	add	r24, r24
     da4:	98 0f       	add	r25, r24
     da6:	89 2f       	mov	r24, r25
     da8:	88 0f       	add	r24, r24
     daa:	88 0f       	add	r24, r24
     dac:	21 2f       	mov	r18, r17
     dae:	28 1b       	sub	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	da 01       	movw	r26, r20
     db4:	aa 0f       	add	r26, r26
     db6:	bb 1f       	adc	r27, r27
     db8:	4a 0f       	add	r20, r26
     dba:	5b 1f       	adc	r21, r27
     dbc:	da 01       	movw	r26, r20
     dbe:	a8 51       	subi	r26, 0x18	; 24
     dc0:	be 4d       	sbci	r27, 0xDE	; 222
     dc2:	f9 01       	movw	r30, r18
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	2e 0f       	add	r18, r30
     dca:	3f 1f       	adc	r19, r31
     dcc:	f9 01       	movw	r30, r18
     dce:	e6 5c       	subi	r30, 0xC6	; 198
     dd0:	ff 4d       	sbci	r31, 0xDF	; 223
     dd2:	20 81       	ld	r18, Z
     dd4:	31 81       	ldd	r19, Z+1	; 0x01
     dd6:	42 81       	ldd	r20, Z+2	; 0x02
     dd8:	2d 93       	st	X+, r18
     dda:	3d 93       	st	X+, r19
     ddc:	4c 93       	st	X, r20
		
		if (offset == GRUMBO_LED_COUNT)
     dde:	00 33       	cpi	r16, 0x30	; 48
     de0:	11 f4       	brne	.+4      	; 0xde6 <play_lights_free_play+0x7c>
		{
			offset = 0;
     de2:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     de6:	1f 5f       	subi	r17, 0xFF	; 255
     de8:	10 33       	cpi	r17, 0x30	; 48
     dea:	40 f2       	brcs	.-112    	; 0xd7c <play_lights_free_play+0x12>
		if (offset == GRUMBO_LED_COUNT)
		{
			offset = 0;
		}
	}
	offset++;
     dec:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
		
	play_lights_overlay_note_button_leds(buttons);
     df6:	8f 2d       	mov	r24, r15
     df8:	0e 94 99 05 	call	0xb32	; 0xb32 <play_lights_overlay_note_button_leds>
	overlay_dingle_pos(dingle_pos);
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 2a 06 	call	0xc54	; 0xc54 <overlay_dingle_pos>
	ws2812drv_start_transfer(leds, LED_COUNT);
     e02:	68 e3       	ldi	r22, 0x38	; 56
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	88 ee       	ldi	r24, 0xE8	; 232
     e08:	91 e2       	ldi	r25, 0x21	; 33
     e0a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	08 95       	ret

00000e1a <play_lights_nyan>:



void play_lights_nyan()
{
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	uint8_t j = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	uint8_t margin = ((half - RAINBOW_LED_COUNT) / 2);
	
	
	if (!(offset % 2))
     e2a:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     e2e:	80 fd       	sbrc	r24, 0
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <play_lights_nyan+0x2e>
	{
		
		if (bump > 0)
     e32:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
     e36:	18 16       	cp	r1, r24
     e38:	24 f4       	brge	.+8      	; 0xe42 <play_lights_nyan+0x28>
		{
			bump = -1;
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <bump>
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <play_lights_nyan+0x2e>
		}
		else
		{
			bump = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <bump>
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	77 c0       	rjmp	.+238    	; 0xf3c <play_lights_nyan+0x122>
		}
	}
	
	for (i = 0; i < half; i++)
	{
		if (i < margin || i >= half - margin)
     e4e:	96 30       	cpi	r25, 0x06	; 6
     e50:	28 f0       	brcs	.+10     	; 0xe5c <play_lights_nyan+0x42>
     e52:	a9 2f       	mov	r26, r25
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	a2 31       	cpi	r26, 0x12	; 18
     e58:	b1 05       	cpc	r27, r1
     e5a:	7c f1       	brlt	.+94     	; 0xeba <play_lights_nyan+0xa0>
		{
			
			leds[i + bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     e5c:	e9 2f       	mov	r30, r25
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	60 91 25 20 	lds	r22, 0x2025	; 0x802025 <bump>
     e64:	06 2e       	mov	r0, r22
     e66:	00 0c       	add	r0, r0
     e68:	77 0b       	sbc	r23, r23
     e6a:	df 01       	movw	r26, r30
     e6c:	a6 0f       	add	r26, r22
     e6e:	b7 1f       	adc	r27, r23
     e70:	ed 01       	movw	r28, r26
     e72:	cc 0f       	add	r28, r28
     e74:	dd 1f       	adc	r29, r29
     e76:	ac 0f       	add	r26, r28
     e78:	bd 1f       	adc	r27, r29
     e7a:	a8 51       	subi	r26, 0x18	; 24
     e7c:	be 4d       	sbci	r27, 0xDE	; 222
     e7e:	1c 92       	st	X, r1
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	1c 92       	st	X, r1
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	12 96       	adiw	r26, 0x02	; 2
     e88:	1c 92       	st	X, r1
     e8a:	12 97       	sbiw	r26, 0x02	; 2
     e8c:	1c 92       	st	X, r1
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	1c 92       	st	X, r1
     e92:	11 97       	sbiw	r26, 0x01	; 1
     e94:	12 96       	adiw	r26, 0x02	; 2
     e96:	1c 92       	st	X, r1
			leds[i + half - bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     e98:	78 96       	adiw	r30, 0x18	; 24
     e9a:	e6 1b       	sub	r30, r22
     e9c:	f7 0b       	sbc	r31, r23
     e9e:	bf 01       	movw	r22, r30
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	e6 0f       	add	r30, r22
     ea6:	f7 1f       	adc	r31, r23
     ea8:	e8 51       	subi	r30, 0x18	; 24
     eaa:	fe 4d       	sbci	r31, 0xDE	; 222
     eac:	10 82       	st	Z, r1
     eae:	11 82       	std	Z+1, r1	; 0x01
     eb0:	12 82       	std	Z+2, r1	; 0x02
     eb2:	10 82       	st	Z, r1
     eb4:	11 82       	std	Z+1, r1	; 0x01
     eb6:	12 82       	std	Z+2, r1	; 0x02
     eb8:	40 c0       	rjmp	.+128    	; 0xf3a <play_lights_nyan+0x120>
		}
		else
		{
			
			leds[i + bump] = 	
     eba:	c0 91 25 20 	lds	r28, 0x2025	; 0x802025 <bump>
     ebe:	0c 2e       	mov	r0, r28
     ec0:	00 0c       	add	r0, r0
     ec2:	dd 0b       	sbc	r29, r29
     ec4:	bd 01       	movw	r22, r26
     ec6:	6c 0f       	add	r22, r28
     ec8:	7d 1f       	adc	r23, r29
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e1       	ldi	r19, 0x10	; 16
     ece:	40 e1       	ldi	r20, 0x10	; 16
     ed0:	fb 01       	movw	r30, r22
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	6e 0f       	add	r22, r30
     ed8:	7f 1f       	adc	r23, r31
     eda:	fb 01       	movw	r30, r22
     edc:	e8 51       	subi	r30, 0x18	; 24
     ede:	fe 4d       	sbci	r31, 0xDE	; 222
     ee0:	20 83       	st	Z, r18
     ee2:	31 83       	std	Z+1, r19	; 0x01
     ee4:	42 83       	std	Z+2, r20	; 0x02
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     ee6:	58 96       	adiw	r26, 0x18	; 24
     ee8:	ac 1b       	sub	r26, r28
     eea:	bd 0b       	sbc	r27, r29
     eec:	8b ea       	ldi	r24, 0xAB	; 171
     eee:	58 9f       	mul	r21, r24
     ef0:	81 2d       	mov	r24, r1
     ef2:	11 24       	eor	r1, r1
     ef4:	86 95       	lsr	r24
     ef6:	86 95       	lsr	r24
     ef8:	86 95       	lsr	r24
     efa:	68 2f       	mov	r22, r24
     efc:	66 0f       	add	r22, r22
     efe:	86 0f       	add	r24, r22
     f00:	68 2f       	mov	r22, r24
     f02:	66 0f       	add	r22, r22
     f04:	66 0f       	add	r22, r22
     f06:	85 2f       	mov	r24, r21
     f08:	86 1b       	sub	r24, r22
     f0a:	68 2f       	mov	r22, r24
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	fd 01       	movw	r30, r26
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ae 0f       	add	r26, r30
     f16:	bf 1f       	adc	r27, r31
     f18:	a8 51       	subi	r26, 0x18	; 24
     f1a:	be 4d       	sbci	r27, 0xDE	; 222
     f1c:	fb 01       	movw	r30, r22
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	6e 0f       	add	r22, r30
     f24:	7f 1f       	adc	r23, r31
     f26:	fb 01       	movw	r30, r22
     f28:	e6 5c       	subi	r30, 0xC6	; 198
     f2a:	ff 4d       	sbci	r31, 0xDF	; 223
     f2c:	60 80       	ld	r6, Z
     f2e:	71 80       	ldd	r7, Z+1	; 0x01
     f30:	82 80       	ldd	r8, Z+2	; 0x02
     f32:	6d 92       	st	X+, r6
     f34:	7d 92       	st	X+, r7
     f36:	8c 92       	st	X, r8
     f38:	5f 5f       	subi	r21, 0xFF	; 255
		{
			bump = 1;
		}
	}
	
	for (i = 0; i < half; i++)
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	98 31       	cpi	r25, 0x18	; 24
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <play_lights_nyan+0x128>
     f40:	86 cf       	rjmp	.-244    	; 0xe4e <play_lights_nyan+0x34>
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
		}
				
	}
	
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f42:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
     f46:	08 2e       	mov	r0, r24
     f48:	00 0c       	add	r0, r0
     f4a:	99 0b       	sbc	r25, r25
     f4c:	9c 01       	movw	r18, r24
     f4e:	2a 5f       	subi	r18, 0xFA	; 250
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	f9 01       	movw	r30, r18
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	e8 51       	subi	r30, 0x18	; 24
     f5e:	fe 4d       	sbci	r31, 0xDE	; 222
     f60:	20 e1       	ldi	r18, 0x10	; 16
     f62:	20 83       	st	Z, r18
     f64:	21 83       	std	Z+1, r18	; 0x01
     f66:	22 83       	std	Z+2, r18	; 0x02
     f68:	20 83       	st	Z, r18
     f6a:	21 83       	std	Z+1, r18	; 0x01
     f6c:	22 83       	std	Z+2, r18	; 0x02
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f6e:	41 96       	adiw	r24, 0x11	; 17
     f70:	fc 01       	movw	r30, r24
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	e8 0f       	add	r30, r24
     f78:	f9 1f       	adc	r31, r25
     f7a:	e8 51       	subi	r30, 0x18	; 24
     f7c:	fe 4d       	sbci	r31, 0xDE	; 222
     f7e:	20 83       	st	Z, r18
     f80:	21 83       	std	Z+1, r18	; 0x01
     f82:	22 83       	std	Z+2, r18	; 0x02
     f84:	20 83       	st	Z, r18
     f86:	21 83       	std	Z+1, r18	; 0x01
     f88:	22 83       	std	Z+2, r18	; 0x02
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     f8a:	20 e3       	ldi	r18, 0x30	; 48
     f8c:	36 c0       	rjmp	.+108    	; 0xffa <play_lights_nyan+0x1e0>
	{

		if (offset % 23)
     f8e:	30 91 a9 21 	lds	r19, 0x21A9	; 0x8021a9 <offset>
     f92:	85 e6       	ldi	r24, 0x65	; 101
     f94:	38 9f       	mul	r19, r24
     f96:	91 2d       	mov	r25, r1
     f98:	11 24       	eor	r1, r1
     f9a:	83 2f       	mov	r24, r19
     f9c:	89 1b       	sub	r24, r25
     f9e:	86 95       	lsr	r24
     fa0:	89 0f       	add	r24, r25
     fa2:	82 95       	swap	r24
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	97 e1       	ldi	r25, 0x17	; 23
     fa8:	89 9f       	mul	r24, r25
     faa:	30 19       	sub	r19, r0
     fac:	11 24       	eor	r1, r1
     fae:	33 23       	and	r19, r19
     fb0:	99 f0       	breq	.+38     	; 0xfd8 <play_lights_nyan+0x1be>
		{
			leds[i] = (ws2812drv_led_t){ .r=0, .g=0, .b = MAX_BRIGHTNESS};
     fb2:	82 2f       	mov	r24, r18
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	c1 2c       	mov	r12, r1
     fb8:	d1 2c       	mov	r13, r1
     fba:	68 94       	set
     fbc:	ee 24       	eor	r14, r14
     fbe:	e6 f8       	bld	r14, 6
     fc0:	fc 01       	movw	r30, r24
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	8e 0f       	add	r24, r30
     fc8:	9f 1f       	adc	r25, r31
     fca:	fc 01       	movw	r30, r24
     fcc:	e8 51       	subi	r30, 0x18	; 24
     fce:	fe 4d       	sbci	r31, 0xDE	; 222
     fd0:	c0 82       	st	Z, r12
     fd2:	d1 82       	std	Z+1, r13	; 0x01
     fd4:	e2 82       	std	Z+2, r14	; 0x02
     fd6:	10 c0       	rjmp	.+32     	; 0xff8 <play_lights_nyan+0x1de>
		}
		else
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     fd8:	e2 2f       	mov	r30, r18
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	cf 01       	movw	r24, r30
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	e8 0f       	add	r30, r24
     fe4:	f9 1f       	adc	r31, r25
     fe6:	e8 51       	subi	r30, 0x18	; 24
     fe8:	fe 4d       	sbci	r31, 0xDE	; 222
     fea:	80 e1       	ldi	r24, 0x10	; 16
     fec:	80 83       	st	Z, r24
     fee:	81 83       	std	Z+1, r24	; 0x01
     ff0:	82 83       	std	Z+2, r24	; 0x02
     ff2:	80 83       	st	Z, r24
     ff4:	81 83       	std	Z+1, r24	; 0x01
     ff6:	82 83       	std	Z+2, r24	; 0x02
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	28 33       	cpi	r18, 0x38	; 56
     ffc:	40 f2       	brcs	.-112    	; 0xf8e <play_lights_nyan+0x174>
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
		}
	}
	
	offset++;
     ffe:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
    1008:	68 e3       	ldi	r22, 0x38	; 56
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	88 ee       	ldi	r24, 0xE8	; 232
    100e:	91 e2       	ldi	r25, 0x21	; 33
    1010:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	08 95       	ret

00001026 <play_lights_portal>:

void play_lights_portal()
{
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	
	if (offset <= 16)
    1036:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    103a:	81 31       	cpi	r24, 0x11	; 17
    103c:	30 f4       	brcc	.+12     	; 0x104a <play_lights_portal+0x24>
	{
		bump += 4;
    103e:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <bump>
    1042:	9c 5f       	subi	r25, 0xFC	; 252
    1044:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <bump>
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <play_lights_portal+0x2e>
	}
	else
	{
		bump -= 4;
    104a:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <bump>
    104e:	94 50       	subi	r25, 0x04	; 4
    1050:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <bump>
	}
	
	if (offset == 32)
    1054:	80 32       	cpi	r24, 0x20	; 32
    1056:	11 f4       	brne	.+4      	; 0x105c <play_lights_portal+0x36>
	{
		offset = 0;
    1058:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <offset>
	offset++;
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_portal()
{
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	34 c0       	rjmp	.+104    	; 0x10c8 <play_lights_portal+0xa2>
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
			.r = 0,
			.g = ((i * 2) + bump) / 8,
    1060:	2a 2f       	mov	r18, r26
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
    106e:	68 2f       	mov	r22, r24
    1070:	88 0f       	add	r24, r24
    1072:	77 0b       	sbc	r23, r23
    1074:	46 0f       	add	r20, r22
    1076:	57 1f       	adc	r21, r23
    1078:	55 23       	and	r21, r21
    107a:	14 f4       	brge	.+4      	; 0x1080 <play_lights_portal+0x5a>
    107c:	49 5f       	subi	r20, 0xF9	; 249
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	55 95       	asr	r21
    108a:	47 95       	ror	r20
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
    108c:	80 e2       	ldi	r24, 0x20	; 32
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	82 1b       	sub	r24, r18
    1092:	93 0b       	sbc	r25, r19
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	86 0f       	add	r24, r22
    109a:	97 1f       	adc	r25, r23
    109c:	99 23       	and	r25, r25
    109e:	0c f4       	brge	.+2      	; 0x10a2 <play_lights_portal+0x7c>
    10a0:	03 96       	adiw	r24, 0x03	; 3
    10a2:	95 95       	asr	r25
    10a4:	87 95       	ror	r24
    10a6:	95 95       	asr	r25
    10a8:	87 95       	ror	r24
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
    10aa:	64 2e       	mov	r6, r20
    10ac:	71 2c       	mov	r7, r1
    10ae:	88 2e       	mov	r8, r24
    10b0:	f9 01       	movw	r30, r18
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	2e 0f       	add	r18, r30
    10b8:	3f 1f       	adc	r19, r31
    10ba:	f9 01       	movw	r30, r18
    10bc:	e8 51       	subi	r30, 0x18	; 24
    10be:	fe 4d       	sbci	r31, 0xDE	; 222
    10c0:	60 82       	st	Z, r6
    10c2:	71 82       	std	Z+1, r7	; 0x01
    10c4:	82 82       	std	Z+2, r8	; 0x02
	if (offset == 32)
	{
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
    10c6:	af 5f       	subi	r26, 0xFF	; 255
    10c8:	a8 31       	cpi	r26, 0x18	; 24
    10ca:	50 f2       	brcs	.-108    	; 0x1060 <play_lights_portal+0x3a>
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <play_lights_portal+0x128>
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    10d0:	6a 2f       	mov	r22, r26
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	9b 01       	movw	r18, r22
    10d6:	28 5e       	subi	r18, 0xE8	; 232
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	86 1b       	sub	r24, r22
    10e0:	97 0b       	sbc	r25, r23
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <bump>
    10ea:	84 0f       	add	r24, r20
    10ec:	91 1d       	adc	r25, r1
    10ee:	47 fd       	sbrc	r20, 7
    10f0:	9a 95       	dec	r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	99 23       	and	r25, r25
    10f6:	0c f4       	brge	.+2      	; 0x10fa <play_lights_portal+0xd4>
    10f8:	33 96       	adiw	r30, 0x03	; 3
    10fa:	f5 95       	asr	r31
    10fc:	e7 95       	ror	r30
    10fe:	f5 95       	asr	r31
    1100:	e7 95       	ror	r30
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
    1102:	ac 01       	movw	r20, r24
    1104:	99 23       	and	r25, r25
    1106:	14 f4       	brge	.+4      	; 0x110c <play_lights_portal+0xe6>
    1108:	4f 5f       	subi	r20, 0xFF	; 255
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
			.b = (half-i)/16
    1110:	88 e1       	ldi	r24, 0x18	; 24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	ec 01       	movw	r28, r24
    1116:	c6 1b       	sub	r28, r22
    1118:	d7 0b       	sbc	r29, r23
    111a:	ce 01       	movw	r24, r28
    111c:	0a f4       	brpl	.+2      	; 0x1120 <play_lights_portal+0xfa>
    111e:	0f 96       	adiw	r24, 0x0f	; 15
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	95 95       	asr	r25
    112a:	87 95       	ror	r24
    112c:	95 95       	asr	r25
    112e:	87 95       	ror	r24
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    1130:	ce 2e       	mov	r12, r30
    1132:	d4 2e       	mov	r13, r20
    1134:	e8 2e       	mov	r14, r24
    1136:	f9 01       	movw	r30, r18
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	2e 0f       	add	r18, r30
    113e:	3f 1f       	adc	r19, r31
    1140:	f9 01       	movw	r30, r18
    1142:	e8 51       	subi	r30, 0x18	; 24
    1144:	fe 4d       	sbci	r31, 0xDE	; 222
    1146:	c0 82       	st	Z, r12
    1148:	d1 82       	std	Z+1, r13	; 0x01
    114a:	e2 82       	std	Z+2, r14	; 0x02
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
		};
		
	}
	
	for (i = 0; i < half; i++)
    114c:	af 5f       	subi	r26, 0xFF	; 255
    114e:	a8 31       	cpi	r26, 0x18	; 24
    1150:	08 f4       	brcc	.+2      	; 0x1154 <play_lights_portal+0x12e>
    1152:	be cf       	rjmp	.-132    	; 0x10d0 <play_lights_portal+0xaa>
			.b = (half-i)/16
		};
			
	}
	
	offset++;
    1154:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
    115e:	68 e3       	ldi	r22, 0x38	; 56
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	88 ee       	ldi	r24, 0xE8	; 232
    1164:	91 e2       	ldi	r25, 0x21	; 33
    1166:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	08 95       	ret

0000117c <play_lights_game>:

void play_lights_game(uint16_t dingle_pos, uint8_t buttons)
{
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	cf 93       	push	r28
    1184:	c6 2f       	mov	r28, r22
	uint8_t i = 0;
    1186:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    1188:	32 c0       	rjmp	.+100    	; 0x11ee <play_lights_game+0x72>
	{
		b_i = i/quarter;
    118a:	eb ea       	ldi	r30, 0xAB	; 171
    118c:	4e 9f       	mul	r20, r30
    118e:	e1 2d       	mov	r30, r1
    1190:	11 24       	eor	r1, r1
    1192:	e6 95       	lsr	r30
    1194:	e6 95       	lsr	r30
    1196:	e6 95       	lsr	r30
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
    1198:	24 2f       	mov	r18, r20
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	bf 01       	movw	r22, r30
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	e6 0f       	add	r30, r22
    11a6:	f7 1f       	adc	r31, r23
    11a8:	ed 58       	subi	r30, 0x8D	; 141
    11aa:	ff 4d       	sbci	r31, 0xDF	; 223
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	60 81       	ld	r22, Z
    11b0:	52 81       	ldd	r21, Z+2	; 0x02
    11b2:	c7 2e       	mov	r12, r23
    11b4:	c6 94       	lsr	r12
    11b6:	c6 94       	lsr	r12
    11b8:	c6 94       	lsr	r12
    11ba:	c6 94       	lsr	r12
    11bc:	c6 94       	lsr	r12
    11be:	d6 2e       	mov	r13, r22
    11c0:	d6 94       	lsr	r13
    11c2:	d6 94       	lsr	r13
    11c4:	d6 94       	lsr	r13
    11c6:	d6 94       	lsr	r13
    11c8:	d6 94       	lsr	r13
    11ca:	e5 2e       	mov	r14, r21
    11cc:	e6 94       	lsr	r14
    11ce:	e6 94       	lsr	r14
    11d0:	e6 94       	lsr	r14
    11d2:	e6 94       	lsr	r14
    11d4:	e6 94       	lsr	r14
    11d6:	f9 01       	movw	r30, r18
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	2e 0f       	add	r18, r30
    11de:	3f 1f       	adc	r19, r31
    11e0:	f9 01       	movw	r30, r18
    11e2:	e8 51       	subi	r30, 0x18	; 24
    11e4:	fe 4d       	sbci	r31, 0xDE	; 222
    11e6:	c0 82       	st	Z, r12
    11e8:	d1 82       	std	Z+1, r13	; 0x01
    11ea:	e2 82       	std	Z+2, r14	; 0x02
{
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    11ec:	4f 5f       	subi	r20, 0xFF	; 255
    11ee:	40 33       	cpi	r20, 0x30	; 48
    11f0:	60 f2       	brcs	.-104    	; 0x118a <play_lights_game+0xe>
	{
		b_i = i/quarter;
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
	}	
	
	overlay_dingle_pos(dingle_pos);	
    11f2:	0e 94 2a 06 	call	0xc54	; 0xc54 <overlay_dingle_pos>
	play_lights_overlay_note_button_leds(buttons);
    11f6:	8c 2f       	mov	r24, r28
    11f8:	0e 94 99 05 	call	0xb32	; 0xb32 <play_lights_overlay_note_button_leds>
	ws2812drv_start_transfer(leds, LED_COUNT);
    11fc:	68 e3       	ldi	r22, 0x38	; 56
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	88 ee       	ldi	r24, 0xE8	; 232
    1202:	91 e2       	ldi	r25, 0x21	; 33
    1204:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    1208:	cf 91       	pop	r28
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	08 95       	ret

00001212 <play_lights_game_over>:

void play_lights_game_over()
{
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
	uint8_t i = 0;
	ws2812drv_led_t color;
	
	if (!(offset++ % 4))
    1218:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	98 0f       	add	r25, r24
    1220:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <offset>
    1224:	83 70       	andi	r24, 0x03	; 3
    1226:	49 f4       	brne	.+18     	; 0x123a <play_lights_game_over+0x28>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
    1228:	c1 2c       	mov	r12, r1
    122a:	d1 2c       	mov	r13, r1
    122c:	e1 2c       	mov	r14, r1
    122e:	68 94       	set
    1230:	dd 24       	eor	r13, r13
    1232:	d6 f8       	bld	r13, 6
    1234:	e1 2c       	mov	r14, r1
	play_lights_overlay_note_button_leds(buttons);
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_game_over()
{
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	12 c0       	rjmp	.+36     	; 0x125e <play_lights_game_over+0x4c>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
	}
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
    123a:	c1 2c       	mov	r12, r1
    123c:	d1 2c       	mov	r13, r1
    123e:	e1 2c       	mov	r14, r1
    1240:	fa cf       	rjmp	.-12     	; 0x1236 <play_lights_game_over+0x24>
	}
	
	for (i = 0; i < LED_COUNT; i++)
	{
		leds[i] = color;
    1242:	82 2f       	mov	r24, r18
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	fc 01       	movw	r30, r24
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	8e 0f       	add	r24, r30
    124e:	9f 1f       	adc	r25, r31
    1250:	fc 01       	movw	r30, r24
    1252:	e8 51       	subi	r30, 0x18	; 24
    1254:	fe 4d       	sbci	r31, 0xDE	; 222
    1256:	c0 82       	st	Z, r12
    1258:	d1 82       	std	Z+1, r13	; 0x01
    125a:	e2 82       	std	Z+2, r14	; 0x02
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
	}
	
	for (i = 0; i < LED_COUNT; i++)
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	28 33       	cpi	r18, 0x38	; 56
    1260:	80 f3       	brcs	.-32     	; 0x1242 <play_lights_game_over+0x30>
	{
		leds[i] = color;
	}
	ws2812drv_start_transfer(leds, LED_COUNT);
    1262:	68 e3       	ldi	r22, 0x38	; 56
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	88 ee       	ldi	r24, 0xE8	; 232
    1268:	91 e2       	ldi	r25, 0x21	; 33
    126a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	08 95       	ret

00001276 <play_lights_won_easy_game>:

void play_lights_won_easy_game()
{
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
	
	uint8_t i = 0;
    127c:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    127e:	25 c0       	rjmp	.+74     	; 0x12ca <play_lights_won_easy_game+0x54>
	{
		b_i = i/quarter;
    1280:	8b ea       	ldi	r24, 0xAB	; 171
    1282:	48 9f       	mul	r20, r24
    1284:	81 2d       	mov	r24, r1
    1286:	11 24       	eor	r1, r1
    1288:	86 95       	lsr	r24
    128a:	86 95       	lsr	r24
    128c:	86 95       	lsr	r24
		b_i += offset;
    128e:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <offset>
    1292:	89 0f       	add	r24, r25
		b_i %= 4;
    1294:	83 70       	andi	r24, 0x03	; 3
			
		leds[i] = game_colors[b_i];
    1296:	24 2f       	mov	r18, r20
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	d9 01       	movw	r26, r18
    129e:	aa 0f       	add	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	2a 0f       	add	r18, r26
    12a4:	3b 1f       	adc	r19, r27
    12a6:	d9 01       	movw	r26, r18
    12a8:	a8 51       	subi	r26, 0x18	; 24
    12aa:	be 4d       	sbci	r27, 0xDE	; 222
    12ac:	fc 01       	movw	r30, r24
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	8e 0f       	add	r24, r30
    12b4:	9f 1f       	adc	r25, r31
    12b6:	fc 01       	movw	r30, r24
    12b8:	ed 58       	subi	r30, 0x8D	; 141
    12ba:	ff 4d       	sbci	r31, 0xDF	; 223
    12bc:	c0 80       	ld	r12, Z
    12be:	d1 80       	ldd	r13, Z+1	; 0x01
    12c0:	e2 80       	ldd	r14, Z+2	; 0x02
    12c2:	cd 92       	st	X+, r12
    12c4:	dd 92       	st	X+, r13
    12c6:	ec 92       	st	X, r14
{
	
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    12c8:	4f 5f       	subi	r20, 0xFF	; 255
    12ca:	40 33       	cpi	r20, 0x30	; 48
    12cc:	c8 f2       	brcs	.-78     	; 0x1280 <play_lights_won_easy_game+0xa>
		b_i %= 4;
			
		leds[i] = game_colors[b_i];
	}
	
	offset++;
    12ce:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	
	leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
    12d8:	e8 e7       	ldi	r30, 0x78	; 120
    12da:	f2 e2       	ldi	r31, 0x22	; 34
    12dc:	10 82       	st	Z, r1
    12de:	80 e4       	ldi	r24, 0x40	; 64
    12e0:	81 83       	std	Z+1, r24	; 0x01
    12e2:	12 82       	std	Z+2, r1	; 0x02
    12e4:	10 82       	st	Z, r1
    12e6:	81 83       	std	Z+1, r24	; 0x01
    12e8:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
    12ea:	eb e7       	ldi	r30, 0x7B	; 123
    12ec:	f2 e2       	ldi	r31, 0x22	; 34
    12ee:	10 82       	st	Z, r1
    12f0:	81 83       	std	Z+1, r24	; 0x01
    12f2:	12 82       	std	Z+2, r1	; 0x02
    12f4:	10 82       	st	Z, r1
    12f6:	81 83       	std	Z+1, r24	; 0x01
    12f8:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
    12fa:	ee e7       	ldi	r30, 0x7E	; 126
    12fc:	f2 e2       	ldi	r31, 0x22	; 34
    12fe:	80 83       	st	Z, r24
    1300:	11 82       	std	Z+1, r1	; 0x01
    1302:	12 82       	std	Z+2, r1	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	11 82       	std	Z+1, r1	; 0x01
    1308:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
    130a:	e1 e8       	ldi	r30, 0x81	; 129
    130c:	f2 e2       	ldi	r31, 0x22	; 34
    130e:	80 83       	st	Z, r24
    1310:	11 82       	std	Z+1, r1	; 0x01
    1312:	12 82       	std	Z+2, r1	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	11 82       	std	Z+1, r1	; 0x01
    1318:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
    131a:	e4 e8       	ldi	r30, 0x84	; 132
    131c:	f2 e2       	ldi	r31, 0x22	; 34
    131e:	10 82       	st	Z, r1
    1320:	11 82       	std	Z+1, r1	; 0x01
    1322:	82 83       	std	Z+2, r24	; 0x02
    1324:	10 82       	st	Z, r1
    1326:	11 82       	std	Z+1, r1	; 0x01
    1328:	82 83       	std	Z+2, r24	; 0x02
	leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
    132a:	e7 e8       	ldi	r30, 0x87	; 135
    132c:	f2 e2       	ldi	r31, 0x22	; 34
    132e:	10 82       	st	Z, r1
    1330:	11 82       	std	Z+1, r1	; 0x01
    1332:	82 83       	std	Z+2, r24	; 0x02
    1334:	10 82       	st	Z, r1
    1336:	11 82       	std	Z+1, r1	; 0x01
    1338:	82 83       	std	Z+2, r24	; 0x02

	leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
    133a:	ea e8       	ldi	r30, 0x8A	; 138
    133c:	f2 e2       	ldi	r31, 0x22	; 34
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	80 83       	st	Z, r24
    1342:	81 83       	std	Z+1, r24	; 0x01
    1344:	12 82       	std	Z+2, r1	; 0x02
    1346:	80 83       	st	Z, r24
    1348:	81 83       	std	Z+1, r24	; 0x01
    134a:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
    134c:	ed e8       	ldi	r30, 0x8D	; 141
    134e:	f2 e2       	ldi	r31, 0x22	; 34
    1350:	80 83       	st	Z, r24
    1352:	81 83       	std	Z+1, r24	; 0x01
    1354:	12 82       	std	Z+2, r1	; 0x02
    1356:	80 83       	st	Z, r24
    1358:	81 83       	std	Z+1, r24	; 0x01
    135a:	12 82       	std	Z+2, r1	; 0x02


	ws2812drv_start_transfer(leds, LED_COUNT);
    135c:	68 e3       	ldi	r22, 0x38	; 56
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	88 ee       	ldi	r24, 0xE8	; 232
    1362:	91 e2       	ldi	r25, 0x21	; 33
    1364:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	08 95       	ret

00001370 <play_lights_easter_egg>:

void play_lights_easter_egg(uint16_t dingle_pos, uint8_t buttons)
{
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ac 01       	movw	r20, r24
    1376:	d6 2f       	mov	r29, r22
		uint8_t i = 0;
    1378:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t half = GRUMBO_LED_COUNT / 2;		
		
		for (;i<LED_COUNT; i++)
    137a:	11 c0       	rjmp	.+34     	; 0x139e <play_lights_easter_egg+0x2e>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS / 2, .g = MAX_BRIGHTNESS / 4, .b = 0};			
    137c:	29 2f       	mov	r18, r25
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	a0 e1       	ldi	r26, 0x10	; 16
    1382:	b0 e2       	ldi	r27, 0x20	; 32
    1384:	c0 e0       	ldi	r28, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	2e 0f       	add	r18, r30
    138e:	3f 1f       	adc	r19, r31
    1390:	f9 01       	movw	r30, r18
    1392:	e8 51       	subi	r30, 0x18	; 24
    1394:	fe 4d       	sbci	r31, 0xDE	; 222
    1396:	a0 83       	st	Z, r26
    1398:	b1 83       	std	Z+1, r27	; 0x01
    139a:	c2 83       	std	Z+2, r28	; 0x02
void play_lights_easter_egg(uint16_t dingle_pos, uint8_t buttons)
{
		uint8_t i = 0;
		uint8_t half = GRUMBO_LED_COUNT / 2;		
		
		for (;i<LED_COUNT; i++)
    139c:	9f 5f       	subi	r25, 0xFF	; 255
    139e:	98 33       	cpi	r25, 0x38	; 56
    13a0:	68 f3       	brcs	.-38     	; 0x137c <play_lights_easter_egg+0xc>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS / 2, .g = MAX_BRIGHTNESS / 4, .b = 0};			
		}
		
		if (!(offset % GRUMBO_LED_COUNT))
    13a2:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <offset>
    13a6:	8b ea       	ldi	r24, 0xAB	; 171
    13a8:	28 9f       	mul	r18, r24
    13aa:	81 2d       	mov	r24, r1
    13ac:	11 24       	eor	r1, r1
    13ae:	82 95       	swap	r24
    13b0:	86 95       	lsr	r24
    13b2:	87 70       	andi	r24, 0x07	; 7
    13b4:	92 2f       	mov	r25, r18
    13b6:	30 e3       	ldi	r19, 0x30	; 48
    13b8:	83 9f       	mul	r24, r19
    13ba:	90 19       	sub	r25, r0
    13bc:	11 24       	eor	r1, r1
    13be:	91 11       	cpse	r25, r1
    13c0:	0a c0       	rjmp	.+20     	; 0x13d6 <play_lights_easter_egg+0x66>
		{
			leds[0] = game_colors[LED_MAX_ON];
    13c2:	e8 ee       	ldi	r30, 0xE8	; 232
    13c4:	f1 e2       	ldi	r31, 0x21	; 33
    13c6:	80 e1       	ldi	r24, 0x10	; 16
    13c8:	80 83       	st	Z, r24
    13ca:	81 83       	std	Z+1, r24	; 0x01
    13cc:	82 83       	std	Z+2, r24	; 0x02
    13ce:	80 83       	st	Z, r24
    13d0:	81 83       	std	Z+1, r24	; 0x01
    13d2:	82 83       	std	Z+2, r24	; 0x02
    13d4:	39 c0       	rjmp	.+114    	; 0x1448 <play_lights_easter_egg+0xd8>
		}
		else if (!(offset % half))
    13d6:	8b ea       	ldi	r24, 0xAB	; 171
    13d8:	28 9f       	mul	r18, r24
    13da:	81 2d       	mov	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	82 95       	swap	r24
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	92 2f       	mov	r25, r18
    13e4:	38 e1       	ldi	r19, 0x18	; 24
    13e6:	83 9f       	mul	r24, r19
    13e8:	90 19       	sub	r25, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	91 11       	cpse	r25, r1
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <play_lights_easter_egg+0x94>
		{
			//bottom center
			leds[half] = game_colors[LED_MAX_ON];
    13f0:	e0 e3       	ldi	r30, 0x30	; 48
    13f2:	f2 e2       	ldi	r31, 0x22	; 34
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	80 83       	st	Z, r24
    13f8:	81 83       	std	Z+1, r24	; 0x01
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	81 83       	std	Z+1, r24	; 0x01
    1400:	82 83       	std	Z+2, r24	; 0x02
    1402:	22 c0       	rjmp	.+68     	; 0x1448 <play_lights_easter_egg+0xd8>
		}		
		else
		{
			leds[half - (offset % half)] = game_colors[LED_MAX_ON];
    1404:	89 2f       	mov	r24, r25
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	68 e1       	ldi	r22, 0x18	; 24
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	68 1b       	sub	r22, r24
    140e:	79 0b       	sbc	r23, r25
    1410:	fb 01       	movw	r30, r22
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e6 0f       	add	r30, r22
    1418:	f7 1f       	adc	r31, r23
    141a:	e8 51       	subi	r30, 0x18	; 24
    141c:	fe 4d       	sbci	r31, 0xDE	; 222
    141e:	30 e1       	ldi	r19, 0x10	; 16
    1420:	30 83       	st	Z, r19
    1422:	31 83       	std	Z+1, r19	; 0x01
    1424:	32 83       	std	Z+2, r19	; 0x02
    1426:	30 83       	st	Z, r19
    1428:	31 83       	std	Z+1, r19	; 0x01
    142a:	32 83       	std	Z+2, r19	; 0x02
			leds[half + (offset % half)] = game_colors[LED_MAX_ON];
    142c:	48 96       	adiw	r24, 0x18	; 24
    142e:	fc 01       	movw	r30, r24
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	e8 51       	subi	r30, 0x18	; 24
    143a:	fe 4d       	sbci	r31, 0xDE	; 222
    143c:	30 83       	st	Z, r19
    143e:	31 83       	std	Z+1, r19	; 0x01
    1440:	32 83       	std	Z+2, r19	; 0x02
    1442:	30 83       	st	Z, r19
    1444:	31 83       	std	Z+1, r19	; 0x01
    1446:	32 83       	std	Z+2, r19	; 0x02
		}
		
		offset++;
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	20 93 a9 21 	sts	0x21A9, r18	; 0x8021a9 <offset>
		
		overlay_dingle_pos(dingle_pos);
    144e:	ca 01       	movw	r24, r20
    1450:	0e 94 2a 06 	call	0xc54	; 0xc54 <overlay_dingle_pos>
		play_lights_overlay_note_button_leds(buttons);
    1454:	8d 2f       	mov	r24, r29
    1456:	0e 94 99 05 	call	0xb32	; 0xb32 <play_lights_overlay_note_button_leds>
		ws2812drv_start_transfer(leds, LED_COUNT);
    145a:	68 e3       	ldi	r22, 0x38	; 56
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	88 ee       	ldi	r24, 0xE8	; 232
    1460:	91 e2       	ldi	r25, 0x21	; 33
    1462:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <play_lights_easter_egg_intro>:

void play_lights_easter_egg_intro()
{
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	uint8_t i = 0;
    1476:	20 e0       	ldi	r18, 0x00	; 0
	
	for (;i<GRUMBO_LED_COUNT; i++)
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <play_lights_easter_egg_intro+0x34>
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
    147a:	82 2f       	mov	r24, r18
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	68 94       	set
    1480:	cc 24       	eor	r12, r12
    1482:	c6 f8       	bld	r12, 6
    1484:	d1 2c       	mov	r13, r1
    1486:	e1 2c       	mov	r14, r1
    1488:	fc 01       	movw	r30, r24
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	8e 0f       	add	r24, r30
    1490:	9f 1f       	adc	r25, r31
    1492:	fc 01       	movw	r30, r24
    1494:	e8 51       	subi	r30, 0x18	; 24
    1496:	fe 4d       	sbci	r31, 0xDE	; 222
    1498:	c0 82       	st	Z, r12
    149a:	d1 82       	std	Z+1, r13	; 0x01
    149c:	e2 82       	std	Z+2, r14	; 0x02

void play_lights_easter_egg_intro()
{
	uint8_t i = 0;
	
	for (;i<GRUMBO_LED_COUNT; i++)
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	20 33       	cpi	r18, 0x30	; 48
    14a2:	58 f3       	brcs	.-42     	; 0x147a <play_lights_easter_egg_intro+0xe>
    14a4:	24 c0       	rjmp	.+72     	; 0x14ee <play_lights_easter_egg_intro+0x82>
		
	}

	for (;i < LED_COUNT; i++)
	{
		if (i%2)
    14a6:	20 ff       	sbrs	r18, 0
    14a8:	11 c0       	rjmp	.+34     	; 0x14cc <play_lights_easter_egg_intro+0x60>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = 0, .b = MAX_BRIGHTNESS};
    14aa:	82 2f       	mov	r24, r18
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e4       	ldi	r27, 0x40	; 64
    14b2:	c0 e4       	ldi	r28, 0x40	; 64
    14b4:	fc 01       	movw	r30, r24
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	8e 0f       	add	r24, r30
    14bc:	9f 1f       	adc	r25, r31
    14be:	fc 01       	movw	r30, r24
    14c0:	e8 51       	subi	r30, 0x18	; 24
    14c2:	fe 4d       	sbci	r31, 0xDE	; 222
    14c4:	a0 83       	st	Z, r26
    14c6:	b1 83       	std	Z+1, r27	; 0x01
    14c8:	c2 83       	std	Z+2, r28	; 0x02
    14ca:	10 c0       	rjmp	.+32     	; 0x14ec <play_lights_easter_egg_intro+0x80>
		}
		else
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
    14cc:	82 2f       	mov	r24, r18
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	40 e4       	ldi	r20, 0x40	; 64
    14d2:	50 e4       	ldi	r21, 0x40	; 64
    14d4:	60 e4       	ldi	r22, 0x40	; 64
    14d6:	fc 01       	movw	r30, r24
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	8e 0f       	add	r24, r30
    14de:	9f 1f       	adc	r25, r31
    14e0:	fc 01       	movw	r30, r24
    14e2:	e8 51       	subi	r30, 0x18	; 24
    14e4:	fe 4d       	sbci	r31, 0xDE	; 222
    14e6:	40 83       	st	Z, r20
    14e8:	51 83       	std	Z+1, r21	; 0x01
    14ea:	62 83       	std	Z+2, r22	; 0x02
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
		
	}

	for (;i < LED_COUNT; i++)
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	28 33       	cpi	r18, 0x38	; 56
    14f0:	d0 f2       	brcs	.-76     	; 0x14a6 <play_lights_easter_egg_intro+0x3a>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
		}
	}

	offset += 3;
    14f2:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <offset>
    14f6:	2d 5f       	subi	r18, 0xFD	; 253
    14f8:	20 93 a9 21 	sts	0x21A9, r18	; 0x8021a9 <offset>

	leds[offset % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    14fc:	8b ea       	ldi	r24, 0xAB	; 171
    14fe:	28 9f       	mul	r18, r24
    1500:	81 2d       	mov	r24, r1
    1502:	11 24       	eor	r1, r1
    1504:	82 95       	swap	r24
    1506:	86 95       	lsr	r24
    1508:	87 70       	andi	r24, 0x07	; 7
    150a:	42 2f       	mov	r20, r18
    150c:	90 e3       	ldi	r25, 0x30	; 48
    150e:	89 9f       	mul	r24, r25
    1510:	40 19       	sub	r20, r0
    1512:	11 24       	eor	r1, r1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	80 e4       	ldi	r24, 0x40	; 64
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	90 e4       	ldi	r25, 0x40	; 64
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	fa 01       	movw	r30, r20
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	4e 0f       	add	r20, r30
    1528:	5f 1f       	adc	r21, r31
    152a:	fa 01       	movw	r30, r20
    152c:	e8 51       	subi	r30, 0x18	; 24
    152e:	fe 4d       	sbci	r31, 0xDE	; 222
    1530:	80 83       	st	Z, r24
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	a2 83       	std	Z+2, r26	; 0x02
	leds[(offset + 1) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	c9 01       	movw	r24, r18
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	c0 e3       	ldi	r28, 0x30	; 48
    153e:	d0 e0       	ldi	r29, 0x00	; 0
    1540:	be 01       	movw	r22, r28
    1542:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodhi4>
    1546:	68 94       	set
    1548:	cc 24       	eor	r12, r12
    154a:	c6 f8       	bld	r12, 6
    154c:	d1 2c       	mov	r13, r1
    154e:	e1 2c       	mov	r14, r1
    1550:	68 94       	set
    1552:	dd 24       	eor	r13, r13
    1554:	d6 f8       	bld	r13, 6
    1556:	e1 2c       	mov	r14, r1
    1558:	fc 01       	movw	r30, r24
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	8e 0f       	add	r24, r30
    1560:	9f 1f       	adc	r25, r31
    1562:	fc 01       	movw	r30, r24
    1564:	e8 51       	subi	r30, 0x18	; 24
    1566:	fe 4d       	sbci	r31, 0xDE	; 222
    1568:	c0 82       	st	Z, r12
    156a:	d1 82       	std	Z+1, r13	; 0x01
    156c:	e2 82       	std	Z+2, r14	; 0x02
	leds[(offset + 2) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};	
    156e:	c9 01       	movw	r24, r18
    1570:	02 96       	adiw	r24, 0x02	; 2
    1572:	be 01       	movw	r22, r28
    1574:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodhi4>
    1578:	20 e4       	ldi	r18, 0x40	; 64
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	30 e4       	ldi	r19, 0x40	; 64
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	8e 0f       	add	r24, r30
    158a:	9f 1f       	adc	r25, r31
    158c:	fc 01       	movw	r30, r24
    158e:	e8 51       	subi	r30, 0x18	; 24
    1590:	fe 4d       	sbci	r31, 0xDE	; 222
    1592:	20 83       	st	Z, r18
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	42 83       	std	Z+2, r20	; 0x02
		
	ws2812drv_start_transfer(leds, LED_COUNT);
    1598:	68 e3       	ldi	r22, 0x38	; 56
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	88 ee       	ldi	r24, 0xE8	; 232
    159e:	91 e2       	ldi	r25, 0x21	; 33
    15a0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <ws2812drv_start_transfer>
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <clk_init>:
	
}

void clk_init()
{
	CCP = CCP_IOREG_gc;
    15b0:	88 ed       	ldi	r24, 0xD8	; 216
    15b2:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
    15ba:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
    15be:	81 ff       	sbrs	r24, 1
    15c0:	fc cf       	rjmp	.-8      	; 0x15ba <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
    15c2:	88 ed       	ldi	r24, 0xD8	; 216
    15c4:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
    15cc:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
    15ce:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
    15d2:	08 95       	ret

000015d4 <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    15d4:	87 e0       	ldi	r24, 0x07	; 7
    15d6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
    15da:	08 95       	ret

000015dc <io_init>:

void io_init()
{
	
	//Mode change pin
	PORTA.DIRCLR = PIN0_bm;
    15dc:	e0 e0       	ldi	r30, 0x00	; 0
    15de:	f6 e0       	ldi	r31, 0x06	; 6
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc;
    15e4:	88 e1       	ldi	r24, 0x18	; 24
    15e6:	80 8b       	std	Z+16, r24	; 0x10

	//Mode indication lights (all off by default)
	PORTD.DIRSET = PIN5_bm | PIN6_bm | PIN7_bm;
    15e8:	a0 e6       	ldi	r26, 0x60	; 96
    15ea:	b6 e0       	ldi	r27, 0x06	; 6
    15ec:	80 ee       	ldi	r24, 0xE0	; 224
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	8c 93       	st	X, r24
    15f2:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTCLR = PIN5_bm | PIN6_bm | PIN7_bm;
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	8c 93       	st	X, r24
	
	//Hall sensor enable (off by default)
	PORTC.DIRSET = PIN7_bm;
    15f8:	a0 e4       	ldi	r26, 0x40	; 64
    15fa:	b6 e0       	ldi	r27, 0x06	; 6
    15fc:	80 e8       	ldi	r24, 0x80	; 128
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8c 93       	st	X, r24
    1602:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.OUTCLR = PIN7_bm;
    1604:	16 96       	adiw	r26, 0x06	; 6
    1606:	8c 93       	st	X, r24
	
	//DACA0 out
	PORTA.DIRSET = PIN2_bm;
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	81 83       	std	Z+1, r24	; 0x01
    160c:	08 95       	ret

0000160e <note_buttons_init>:
}

void note_buttons_init()
{
	//Turn on hall sensors
	PORTC.OUTSET = PIN7_bm;
    160e:	80 e8       	ldi	r24, 0x80	; 128
    1610:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
	
	//note button
	PORTA.DIRCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1614:	e0 e0       	ldi	r30, 0x00	; 0
    1616:	f6 e0       	ldi	r31, 0x06	; 6
    1618:	80 ef       	ldi	r24, 0xF0	; 240
    161a:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
    161c:	88 e1       	ldi	r24, 0x18	; 24
    161e:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_OPC_PULLUP_gc;
    1620:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLUP_gc;
    1622:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLUP_gc;
    1624:	87 8b       	std	Z+23, r24	; 0x17
    1626:	08 95       	ret

00001628 <dingle_input_init>:
}

void dingle_input_init()
{
	expander_init();
    1628:	0e 94 55 05 	call	0xaaa	; 0xaaa <expander_init>
    162c:	08 95       	ret

0000162e <song_out_init>:
}

void song_out_init()
{
	//TCC5 and TCD5 out 
	PORTC.DIRSET = PIN4_bm; 	
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	PORTD.DIRSET = PIN4_bm;
    1634:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	//Force dac0 output high 
	PORTA.OUTSET = PIN2_bm;
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
    163e:	08 95       	ret

00001640 <start_up>:
}

void start_up(uint8_t mode)
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	a2 97       	sbiw	r28, 0x22	; 34
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	de bf       	out	0x3e, r29	; 62
	SongInitParams params;
	
	switch(mode)
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	81 f1       	breq	.+96     	; 0x16b2 <start_up+0x72>
    1652:	20 f4       	brcc	.+8      	; 0x165c <start_up+0x1c>
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 f0       	breq	.+36     	; 0x167c <start_up+0x3c>
    1658:	60 f0       	brcs	.+24     	; 0x1672 <start_up+0x32>
    165a:	1c c0       	rjmp	.+56     	; 0x1694 <start_up+0x54>
    165c:	85 30       	cpi	r24, 0x05	; 5
    165e:	09 f4       	brne	.+2      	; 0x1662 <start_up+0x22>
    1660:	99 c0       	rjmp	.+306    	; 0x1794 <start_up+0x154>
    1662:	b0 f1       	brcs	.+108    	; 0x16d0 <start_up+0x90>
    1664:	86 30       	cpi	r24, 0x06	; 6
    1666:	09 f4       	brne	.+2      	; 0x166a <start_up+0x2a>
    1668:	f8 c0       	rjmp	.+496    	; 0x185a <start_up+0x21a>
    166a:	8f 3e       	cpi	r24, 0xEF	; 239
    166c:	09 f4       	brne	.+2      	; 0x1670 <start_up+0x30>
    166e:	03 c1       	rjmp	.+518    	; 0x1876 <start_up+0x236>
    1670:	5f c1       	rjmp	.+702    	; 0x1930 <start_up+0x2f0>
	{
		case STANDBY_sm:
			sys_timer_D5_init();
    1672:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <sys_timer_D5_init>
			ws2812drv_init();
    1676:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			break;
    167a:	5a c1       	rjmp	.+692    	; 0x1930 <start_up+0x2f0>
		case FREEPLAY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    167c:	80 e1       	ldi	r24, 0x10	; 16
    167e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    1682:	0e 94 07 0b 	call	0x160e	; 0x160e <note_buttons_init>
			note_player_init();
    1686:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <note_player_init>
			dingle_input_init();
    168a:	0e 94 14 0b 	call	0x1628	; 0x1628 <dingle_input_init>
			ws2812drv_init();
    168e:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			
			break;
    1692:	4e c1       	rjmp	.+668    	; 0x1930 <start_up+0x2f0>
		case GAME_EASY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    1694:	80 e1       	ldi	r24, 0x10	; 16
    1696:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    169a:	0e 94 07 0b 	call	0x160e	; 0x160e <note_buttons_init>
			note_player_init();
    169e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <note_player_init>
			dingle_input_init();
    16a2:	0e 94 14 0b 	call	0x1628	; 0x1628 <dingle_input_init>
			games_init(easy);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 a5 02 	call	0x54a	; 0x54a <games_init>
			ws2812drv_init();
    16ac:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			
			break;
    16b0:	3f c1       	rjmp	.+638    	; 0x1930 <start_up+0x2f0>
		case GAME_HARD_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;		
    16b2:	80 e1       	ldi	r24, 0x10	; 16
    16b4:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    16b8:	0e 94 07 0b 	call	0x160e	; 0x160e <note_buttons_init>
			note_player_init();
    16bc:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <note_player_init>
			dingle_input_init();
    16c0:	0e 94 14 0b 	call	0x1628	; 0x1628 <dingle_input_init>
			games_init(hard);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 a5 02 	call	0x54a	; 0x54a <games_init>
			ws2812drv_init();
    16ca:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			
			break;
    16ce:	30 c1       	rjmp	.+608    	; 0x1930 <start_up+0x2f0>
		case NYAN_sm:
			
			song_out_init();
    16d0:	0e 94 17 0b 	call	0x162e	; 0x162e <song_out_init>
			ws2812drv_init();
    16d4:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			params.bmp_period = nyanBPMPeriod;
    16d8:	8b ed       	ldi	r24, 0xDB	; 219
    16da:	95 e3       	ldi	r25, 0x35	; 53
    16dc:	89 a3       	std	Y+33, r24	; 0x21
    16de:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = nyanIntroTreble;
    16e0:	8c e5       	ldi	r24, 0x5C	; 92
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(nyanIntroTreble);
    16e8:	8f e1       	ldi	r24, 0x1F	; 31
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    16ee:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = nyanIntroExtTreble;
    16f0:	88 e5       	ldi	r24, 0x58	; 88
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	8d 83       	std	Y+5, r24	; 0x05
    16f6:	9e 83       	std	Y+6, r25	; 0x06
			params.ch0.intro.extension_size = sizeof(nyanIntroExtTreble);
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	8f 83       	std	Y+7, r24	; 0x07
    16fe:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = nyanMainTreble;
    1700:	84 e8       	ldi	r24, 0x84	; 132
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	89 87       	std	Y+9, r24	; 0x09
    1706:	9a 87       	std	Y+10, r25	; 0x0a
			params.ch0.main.track_size = sizeof(nyanMainTreble);
    1708:	84 ed       	ldi	r24, 0xD4	; 212
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	8b 87       	std	Y+11, r24	; 0x0b
    170e:	9c 87       	std	Y+12, r25	; 0x0c
			params.ch0.main.extension_data = nyanMainExtTreble;
    1710:	89 e6       	ldi	r24, 0x69	; 105
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	8d 87       	std	Y+13, r24	; 0x0d
    1716:	9e 87       	std	Y+14, r25	; 0x0e
			params.ch0.main.extension_size = sizeof(nyanMainExtTreble);
    1718:	8b e1       	ldi	r24, 0x1B	; 27
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	8f 87       	std	Y+15, r24	; 0x0f
    171e:	98 8b       	std	Y+16, r25	; 0x10
			params.ch1.intro.track_data = nyanIntroBass;
    1720:	87 e6       	ldi	r24, 0x67	; 103
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	89 8b       	std	Y+17, r24	; 0x11
    1726:	9a 8b       	std	Y+18, r25	; 0x12
			params.ch1.intro.track_size = sizeof(nyanIntroBass);
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	8b 8b       	std	Y+19, r24	; 0x13
    172e:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = nyanIntroExtBass;
    1730:	86 e6       	ldi	r24, 0x66	; 102
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	8d 8b       	std	Y+21, r24	; 0x15
    1736:	9e 8b       	std	Y+22, r25	; 0x16
			params.ch1.intro.extension_size = sizeof(nyanIntroExtBass);			
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	8f 8b       	std	Y+23, r24	; 0x17
    173e:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = nyanMainBass;
    1740:	85 e5       	ldi	r24, 0x55	; 85
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	89 8f       	std	Y+25, r24	; 0x19
    1746:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(nyanMainBass);
    1748:	81 e1       	ldi	r24, 0x11	; 17
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	8b 8f       	std	Y+27, r24	; 0x1b
    174e:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = nyanMainExtBass;
    1750:	82 e5       	ldi	r24, 0x52	; 82
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	8d 8f       	std	Y+29, r24	; 0x1d
    1756:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(nyanMainExtBass);
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	8f 8f       	std	Y+31, r24	; 0x1f
    175e:	98 a3       	std	Y+32, r25	; 0x20
			
			song_player_init(params, play_lights_nyan);
    1760:	8d e0       	ldi	r24, 0x0D	; 13
    1762:	97 e0       	ldi	r25, 0x07	; 7
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	82 97       	sbiw	r24, 0x22	; 34
    176e:	8d bf       	out	0x3d, r24	; 61
    1770:	9e bf       	out	0x3e, r25	; 62
    1772:	ad b7       	in	r26, 0x3d	; 61
    1774:	be b7       	in	r27, 0x3e	; 62
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	82 e2       	ldi	r24, 0x22	; 34
    177a:	fe 01       	movw	r30, r28
    177c:	31 96       	adiw	r30, 0x01	; 1
    177e:	01 90       	ld	r0, Z+
    1780:	0d 92       	st	X+, r0
    1782:	8a 95       	dec	r24
    1784:	e1 f7       	brne	.-8      	; 0x177e <start_up+0x13e>
    1786:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <song_player_init>
			song_start();
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <song_start>
			
			
			break;
    1792:	ce c0       	rjmp	.+412    	; 0x1930 <start_up+0x2f0>
		case PORTAL_sm:		
			if (get_allow_portal())
    1794:	0e 94 15 11 	call	0x222a	; 0x222a <get_allow_portal>
    1798:	88 23       	and	r24, r24
    179a:	09 f4       	brne	.+2      	; 0x179e <start_up+0x15e>
    179c:	c9 c0       	rjmp	.+402    	; 0x1930 <start_up+0x2f0>
			{
				song_out_init();
    179e:	0e 94 17 0b 	call	0x162e	; 0x162e <song_out_init>
				ws2812drv_init();
    17a2:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
				params.bmp_period = portalBPMPeriod;
    17a6:	89 e0       	ldi	r24, 0x09	; 9
    17a8:	9d e3       	ldi	r25, 0x3D	; 61
    17aa:	89 a3       	std	Y+33, r24	; 0x21
    17ac:	9a a3       	std	Y+34, r25	; 0x22
				params.ch0.intro.track_data = portalIntroTreble;
    17ae:	8e e4       	ldi	r24, 0x4E	; 78
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	9a 83       	std	Y+2, r25	; 0x02
				params.ch0.intro.track_size = sizeof(portalIntroTreble);
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	9c 83       	std	Y+4, r25	; 0x04
				params.ch0.intro.extension_data = portalIntroExtTreble;
    17be:	8d e4       	ldi	r24, 0x4D	; 77
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	9e 83       	std	Y+6, r25	; 0x06
				params.ch0.intro.extension_size = sizeof(portalIntroExtTreble);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	8f 83       	std	Y+7, r24	; 0x07
    17cc:	98 87       	std	Y+8, r25	; 0x08
				params.ch0.main.track_data = portalMainTreble;
    17ce:	20 ec       	ldi	r18, 0xC0	; 192
    17d0:	31 e0       	ldi	r19, 0x01	; 1
    17d2:	29 87       	std	Y+9, r18	; 0x09
    17d4:	3a 87       	std	Y+10, r19	; 0x0a
				params.ch0.main.track_size = sizeof(portalMainTreble);
    17d6:	2d e8       	ldi	r18, 0x8D	; 141
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	2b 87       	std	Y+11, r18	; 0x0b
    17dc:	3c 87       	std	Y+12, r19	; 0x0c
				params.ch0.main.extension_data = portalMainExtTreble;
    17de:	2e ea       	ldi	r18, 0xAE	; 174
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	2d 87       	std	Y+13, r18	; 0x0d
    17e4:	3e 87       	std	Y+14, r19	; 0x0e
				params.ch0.main.extension_size = sizeof(portalMainExtTreble);
    17e6:	22 e1       	ldi	r18, 0x12	; 18
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	2f 87       	std	Y+15, r18	; 0x0f
    17ec:	38 8b       	std	Y+16, r19	; 0x10
				params.ch1.intro.track_data = portalIntroBass;
    17ee:	2d ea       	ldi	r18, 0xAD	; 173
    17f0:	31 e0       	ldi	r19, 0x01	; 1
    17f2:	29 8b       	std	Y+17, r18	; 0x11
    17f4:	3a 8b       	std	Y+18, r19	; 0x12
				params.ch1.intro.track_size = sizeof(portalIntroBass);
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
				params.ch1.intro.extension_data = portalIntroExtBass;
    17fa:	2c ea       	ldi	r18, 0xAC	; 172
    17fc:	31 e0       	ldi	r19, 0x01	; 1
    17fe:	2d 8b       	std	Y+21, r18	; 0x15
    1800:	3e 8b       	std	Y+22, r19	; 0x16
				params.ch1.intro.extension_size = sizeof(portalIntroExtBass);
    1802:	8f 8b       	std	Y+23, r24	; 0x17
    1804:	98 8f       	std	Y+24, r25	; 0x18
				params.ch1.main.track_data = portalMainBass;
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	89 8f       	std	Y+25, r24	; 0x19
    180c:	9a 8f       	std	Y+26, r25	; 0x1a
				params.ch1.main.track_size = sizeof(portalMainBass);
    180e:	8a ea       	ldi	r24, 0xAA	; 170
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	8b 8f       	std	Y+27, r24	; 0x1b
    1814:	9c 8f       	std	Y+28, r25	; 0x1c
				params.ch1.main.extension_data = portalMainExtBass;
    1816:	8c ee       	ldi	r24, 0xEC	; 236
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	8d 8f       	std	Y+29, r24	; 0x1d
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
				params.ch1.main.extension_size = sizeof(portalMainExtBass);
    181e:	86 e1       	ldi	r24, 0x16	; 22
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
    1824:	98 a3       	std	Y+32, r25	; 0x20
			
				song_player_init(params, play_lights_portal);
    1826:	83 e1       	ldi	r24, 0x13	; 19
    1828:	98 e0       	ldi	r25, 0x08	; 8
    182a:	9f 93       	push	r25
    182c:	8f 93       	push	r24
    182e:	8d b7       	in	r24, 0x3d	; 61
    1830:	9e b7       	in	r25, 0x3e	; 62
    1832:	82 97       	sbiw	r24, 0x22	; 34
    1834:	8d bf       	out	0x3d, r24	; 61
    1836:	9e bf       	out	0x3e, r25	; 62
    1838:	ad b7       	in	r26, 0x3d	; 61
    183a:	be b7       	in	r27, 0x3e	; 62
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	82 e2       	ldi	r24, 0x22	; 34
    1840:	fe 01       	movw	r30, r28
    1842:	31 96       	adiw	r30, 0x01	; 1
    1844:	01 90       	ld	r0, Z+
    1846:	0d 92       	st	X+, r0
    1848:	8a 95       	dec	r24
    184a:	e1 f7       	brne	.-8      	; 0x1844 <start_up+0x204>
    184c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <song_player_init>
				song_start();
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0e 94 59 10 	call	0x20b2	; 0x20b2 <song_start>
    1858:	6b c0       	rjmp	.+214    	; 0x1930 <start_up+0x2f0>
						
			}
			break;
		case EASTER_EGG_sm:
			if (get_allow_easter_egg())
    185a:	0e 94 23 11 	call	0x2246	; 0x2246 <get_allow_easter_egg>
    185e:	88 23       	and	r24, r24
    1860:	09 f4       	brne	.+2      	; 0x1864 <start_up+0x224>
    1862:	66 c0       	rjmp	.+204    	; 0x1930 <start_up+0x2f0>
			{
				sys_timer_D5_init();
    1864:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <sys_timer_D5_init>
				ws2812drv_init();
    1868:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
				note_buttons_init();
    186c:	0e 94 07 0b 	call	0x160e	; 0x160e <note_buttons_init>
				dingle_input_init();
    1870:	0e 94 14 0b 	call	0x1628	; 0x1628 <dingle_input_init>
    1874:	5d c0       	rjmp	.+186    	; 0x1930 <start_up+0x2f0>
			}
			break;
		case EASTER_EGG_START_sm:
			
			song_out_init();
    1876:	0e 94 17 0b 	call	0x162e	; 0x162e <song_out_init>
			ws2812drv_init();
    187a:	0e 94 99 11 	call	0x2332	; 0x2332 <ws2812drv_init>
			params.bmp_period = easterEggBPMPeriod;
    187e:	89 e0       	ldi	r24, 0x09	; 9
    1880:	9d e3       	ldi	r25, 0x3D	; 61
    1882:	89 a3       	std	Y+33, r24	; 0x21
    1884:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = easterEggIntroTreble;
    1886:	8b ee       	ldi	r24, 0xEB	; 235
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(easterEggIntroTreble);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = easterEggIntroExtTreble;
    1896:	2a ee       	ldi	r18, 0xEA	; 234
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	2d 83       	std	Y+5, r18	; 0x05
    189c:	3e 83       	std	Y+6, r19	; 0x06
			params.ch0.intro.extension_size = sizeof(easterEggIntroExtTreble);
    189e:	8f 83       	std	Y+7, r24	; 0x07
    18a0:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = easterEggMainTreble;
    18a2:	25 ed       	ldi	r18, 0xD5	; 213
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	29 87       	std	Y+9, r18	; 0x09
    18a8:	3a 87       	std	Y+10, r19	; 0x0a
			params.ch0.main.track_size = sizeof(easterEggMainTreble);
    18aa:	25 e1       	ldi	r18, 0x15	; 21
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	2b 87       	std	Y+11, r18	; 0x0b
    18b0:	3c 87       	std	Y+12, r19	; 0x0c
			params.ch0.main.extension_data = easterEggMainExtTreble;
    18b2:	22 ed       	ldi	r18, 0xD2	; 210
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	2d 87       	std	Y+13, r18	; 0x0d
    18b8:	3e 87       	std	Y+14, r19	; 0x0e
			params.ch0.main.extension_size = sizeof(easterEggMainExtTreble);
    18ba:	23 e0       	ldi	r18, 0x03	; 3
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	2f 87       	std	Y+15, r18	; 0x0f
    18c0:	38 8b       	std	Y+16, r19	; 0x10
			params.ch1.intro.track_data = easterEggIntroBass;
    18c2:	21 ed       	ldi	r18, 0xD1	; 209
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	29 8b       	std	Y+17, r18	; 0x11
    18c8:	3a 8b       	std	Y+18, r19	; 0x12
			params.ch1.intro.track_size = sizeof(easterEggIntroBass);
    18ca:	8b 8b       	std	Y+19, r24	; 0x13
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = easterEggIntroExtBass;
    18ce:	20 ed       	ldi	r18, 0xD0	; 208
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	2d 8b       	std	Y+21, r18	; 0x15
    18d4:	3e 8b       	std	Y+22, r19	; 0x16
			params.ch1.intro.extension_size = sizeof(easterEggIntroExtBass);
    18d6:	8f 8b       	std	Y+23, r24	; 0x17
    18d8:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = easterEggMainBass;
    18da:	80 eb       	ldi	r24, 0xB0	; 176
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	89 8f       	std	Y+25, r24	; 0x19
    18e0:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(easterEggMainBass);
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	8b 8f       	std	Y+27, r24	; 0x1b
    18e8:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = easterEggMainExtBass;
    18ea:	8c ea       	ldi	r24, 0xAC	; 172
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
    18f0:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(easterEggMainExtBass);
    18f2:	84 e0       	ldi	r24, 0x04	; 4
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	8f 8f       	std	Y+31, r24	; 0x1f
    18f8:	98 a3       	std	Y+32, r25	; 0x20
				
			song_player_init(params, play_lights_easter_egg_intro);
    18fa:	86 e3       	ldi	r24, 0x36	; 54
    18fc:	9a e0       	ldi	r25, 0x0A	; 10
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	8d b7       	in	r24, 0x3d	; 61
    1904:	9e b7       	in	r25, 0x3e	; 62
    1906:	82 97       	sbiw	r24, 0x22	; 34
    1908:	8d bf       	out	0x3d, r24	; 61
    190a:	9e bf       	out	0x3e, r25	; 62
    190c:	ad b7       	in	r26, 0x3d	; 61
    190e:	be b7       	in	r27, 0x3e	; 62
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	82 e2       	ldi	r24, 0x22	; 34
    1914:	fe 01       	movw	r30, r28
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	01 90       	ld	r0, Z+
    191a:	0d 92       	st	X+, r0
    191c:	8a 95       	dec	r24
    191e:	e1 f7       	brne	.-8      	; 0x1918 <start_up+0x2d8>
    1920:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <song_player_init>
			//song_start();
			song_play_once(next_start_mode);
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	80 e9       	ldi	r24, 0x90	; 144
    192a:	91 e1       	ldi	r25, 0x11	; 17
    192c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <song_play_once>
			break;		
	}	
}
    1930:	a2 96       	adiw	r28, 0x22	; 34
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <check_start_mode_pin>:


void check_start_mode_pin()
{
	if (!(PORTA.IN & PIN0_bm))
    193c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1940:	80 fd       	sbrc	r24, 0
    1942:	13 c0       	rjmp	.+38     	; 0x196a <check_start_mode_pin+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	80 e7       	ldi	r24, 0x70	; 112
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	21 50       	subi	r18, 0x01	; 1
    194c:	80 40       	sbci	r24, 0x00	; 0
    194e:	90 40       	sbci	r25, 0x00	; 0
    1950:	e1 f7       	brne	.-8      	; 0x194a <check_start_mode_pin+0xe>
    1952:	00 c0       	rjmp	.+0      	; 0x1954 <check_start_mode_pin+0x18>
    1954:	00 00       	nop
	{
		//Simple blocking debounce
		_delay_ms(25);
		if(!(PORTA.IN & PIN0_bm))
    1956:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    195a:	80 fd       	sbrc	r24, 0
    195c:	06 c0       	rjmp	.+12     	; 0x196a <check_start_mode_pin+0x2e>
		{
			//Hold until the pin is released.
			while (!(PORTA.IN & PIN0_bm));
    195e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1962:	80 ff       	sbrs	r24, 0
    1964:	fc cf       	rjmp	.-8      	; 0x195e <check_start_mode_pin+0x22>
			next_start_mode();
    1966:	0e 94 90 11 	call	0x2320	; 0x2320 <next_start_mode>
    196a:	08 95       	ret

0000196c <set_startup_mode_lights>:
		}
	}	
}

void set_startup_mode_lights(uint8_t mode)
{
    196c:	98 2f       	mov	r25, r24
	uint8_t temp = PORTD.OUT & 0x1F;
    196e:	e0 e6       	ldi	r30, 0x60	; 96
    1970:	f6 e0       	ldi	r31, 0x06	; 6
    1972:	84 81       	ldd	r24, Z+4	; 0x04
    1974:	28 2f       	mov	r18, r24
    1976:	2f 71       	andi	r18, 0x1F	; 31
	temp |= ((mode + 1) << 5);
    1978:	89 2f       	mov	r24, r25
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	82 95       	swap	r24
    1984:	92 95       	swap	r25
    1986:	90 7f       	andi	r25, 0xF0	; 240
    1988:	98 27       	eor	r25, r24
    198a:	80 7f       	andi	r24, 0xF0	; 240
    198c:	98 27       	eor	r25, r24
    198e:	82 2b       	or	r24, r18
	PORTD.OUT = temp;
    1990:	84 83       	std	Z+4, r24	; 0x04
    1992:	08 95       	ret

00001994 <get_note_buttons>:
}

uint8_t get_note_buttons()
{
	return ((~PORTA.IN) & 0xF0) >> 4;
    1994:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	80 95       	com	r24
    199c:	90 95       	com	r25
    199e:	80 7f       	andi	r24, 0xF0	; 240
    19a0:	99 27       	eor	r25, r25
    19a2:	95 95       	asr	r25
    19a4:	87 95       	ror	r24
    19a6:	95 95       	asr	r25
    19a8:	87 95       	ror	r24
    19aa:	95 95       	asr	r25
    19ac:	87 95       	ror	r24
    19ae:	95 95       	asr	r25
    19b0:	87 95       	ror	r24
}
    19b2:	08 95       	ret

000019b4 <check_play_note>:

uint8_t check_play_note()
{
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
	uint8_t note_buttons = get_note_buttons();
    19b8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_note_buttons>
    19bc:	c8 2f       	mov	r28, r24
	uint8_t val_changed = expander_get_val_changed();
    19be:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <expander_get_val_changed>
    19c2:	d8 2f       	mov	r29, r24
	uint8_t playing = note_player_playing();
    19c4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <note_player_playing>
	if (note_buttons && val_changed && !(playing))
    19c8:	cc 23       	and	r28, r28
    19ca:	11 f1       	breq	.+68     	; 0x1a10 <check_play_note+0x5c>
    19cc:	dd 23       	and	r29, r29
    19ce:	01 f1       	breq	.+64     	; 0x1a10 <check_play_note+0x5c>
    19d0:	81 11       	cpse	r24, r1
    19d2:	1e c0       	rjmp	.+60     	; 0x1a10 <check_play_note+0x5c>
	{
		note_play(note_buttons);		
    19d4:	8c 2f       	mov	r24, r28
    19d6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <note_play>
		
		if (note_buttons == easter_egg_pattern[easter_egg_index])
    19da:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <easter_egg_index>
    19de:	e8 2f       	mov	r30, r24
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	e9 5d       	subi	r30, 0xD9	; 217
    19e4:	ff 4d       	sbci	r31, 0xDF	; 223
    19e6:	90 81       	ld	r25, Z
    19e8:	c9 13       	cpse	r28, r25
    19ea:	10 c0       	rjmp	.+32     	; 0x1a0c <check_play_note+0x58>
		{
			easter_egg_index++;
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <easter_egg_index>
			
			if (easter_egg_index == easter_egg_size)
    19f2:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <easter_egg_size>
    19f6:	89 13       	cpse	r24, r25
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <check_play_note+0x5c>
			{
				
				set_allow_easter_egg(ALLOW_VAL);
    19fa:	85 e5       	ldi	r24, 0x55	; 85
    19fc:	0e 94 26 11 	call	0x224c	; 0x224c <set_allow_easter_egg>
				easter_egg_index = 0;
    1a00:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <easter_egg_index>
				set_start_mode(EASTER_EGG_START_sm);
    1a04:	8f ee       	ldi	r24, 0xEF	; 239
    1a06:	0e 94 5f 11 	call	0x22be	; 0x22be <set_start_mode>
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <check_play_note+0x5c>
			}			
		}
		else
		{
			easter_egg_index = 0;
    1a0c:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <easter_egg_index>
		}
	}

	return note_buttons;
}
    1a10:	8c 2f       	mov	r24, r28
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <check_play_easter_egg>:

uint8_t check_play_easter_egg()
{
    1a18:	cf 93       	push	r28
	uint8_t note_buttons = get_note_buttons();
    1a1a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_note_buttons>
    1a1e:	c8 2f       	mov	r28, r24

	if (note_buttons && expander_get_val_changed())
    1a20:	88 23       	and	r24, r24
    1a22:	69 f0       	breq	.+26     	; 0x1a3e <check_play_easter_egg+0x26>
    1a24:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <expander_get_val_changed>
    1a28:	88 23       	and	r24, r24
    1a2a:	49 f0       	breq	.+18     	; 0x1a3e <check_play_easter_egg+0x26>
	{
		meeseeks_data[1] = note_buttons;
    1a2c:	c0 93 38 20 	sts	0x2038, r28	; 0x802038 <meeseeks_data+0x1>
		twi_write(MEESEEKS_ADDR, meeseeks_data, sizeof(meeseeks_data));
    1a30:	42 e0       	ldi	r20, 0x02	; 2
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	67 e3       	ldi	r22, 0x37	; 55
    1a36:	70 e2       	ldi	r23, 0x20	; 32
    1a38:	82 e1       	ldi	r24, 0x12	; 18
    1a3a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <twi_write>
	}

	return note_buttons;	
	
}
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <main>:
int main(void)
{
	uint8_t note_buttons;
	
	//Debug pin
	PORTA.DIRSET = PIN3_bm;
    1a44:	e0 e0       	ldi	r30, 0x00	; 0
    1a46:	f6 e0       	ldi	r31, 0x06	; 6
    1a48:	88 e0       	ldi	r24, 0x08	; 8
    1a4a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN3_bm;
    1a4c:	86 83       	std	Z+6, r24	; 0x06
			
	cli();
    1a4e:	f8 94       	cli
	clk_init();
    1a50:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <clk_init>
	interrupt_init();
    1a54:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <interrupt_init>
	sei();
    1a58:	78 94       	sei
		
	io_init();
    1a5a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <io_init>
	expander_init();
    1a5e:	0e 94 55 05 	call	0xaaa	; 0xaaa <expander_init>
	
	//Hold until the pin is released.
	while (!(PORTA.IN & PIN0_bm));
    1a62:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1a66:	80 ff       	sbrs	r24, 0
    1a68:	fc cf       	rjmp	.-8      	; 0x1a62 <main+0x1e>

	start_mode_init();
    1a6a:	0e 94 40 11 	call	0x2280	; 0x2280 <start_mode_init>
	set_startup_mode_lights(get_start_mode());
    1a6e:	0e 94 31 11 	call	0x2262	; 0x2262 <get_start_mode>
    1a72:	0e 94 b6 0c 	call	0x196c	; 0x196c <set_startup_mode_lights>
	start_up(get_start_mode());	
    1a76:	0e 94 31 11 	call	0x2262	; 0x2262 <get_start_mode>
    1a7a:	0e 94 20 0b 	call	0x1640	; 0x1640 <start_up>
	reset_start_mode_in_eeprom();
    1a7e:	0e 94 34 11 	call	0x2268	; 0x2268 <reset_start_mode_in_eeprom>

    /* Replace with your application code */
    while (1) 
    {
		//TEMP: move to interrupt handler
		check_start_mode_pin();
    1a82:	0e 94 9e 0c 	call	0x193c	; 0x193c <check_start_mode_pin>
		if (display_ctr >= 10)
    1a86:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <display_ctr>
    1a8a:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <display_ctr+0x1>
    1a8e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a90:	c0 f3       	brcs	.-16     	; 0x1a82 <main+0x3e>
		{		
			PORTA.OUTTGL = PIN3_bm;
    1a92:	88 e0       	ldi	r24, 0x08	; 8
    1a94:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
			switch (get_start_mode())
    1a98:	0e 94 31 11 	call	0x2262	; 0x2262 <get_start_mode>
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	38 f4       	brcc	.+14     	; 0x1aae <main+0x6a>
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	a0 f4       	brcc	.+40     	; 0x1acc <main+0x88>
    1aa4:	88 23       	and	r24, r24
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <main+0x70>
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	39 f0       	breq	.+14     	; 0x1aba <main+0x76>
    1aac:	1c c0       	rjmp	.+56     	; 0x1ae6 <main+0xa2>
    1aae:	86 30       	cpi	r24, 0x06	; 6
    1ab0:	91 f0       	breq	.+36     	; 0x1ad6 <main+0x92>
    1ab2:	19 c0       	rjmp	.+50     	; 0x1ae6 <main+0xa2>
			{
				case STANDBY_sm:
					play_lights_standby();
    1ab4:	0e 94 77 06 	call	0xcee	; 0xcee <play_lights_standby>
					break;
    1ab8:	16 c0       	rjmp	.+44     	; 0x1ae6 <main+0xa2>
				case FREEPLAY_sm:
					note_buttons = check_play_note();
    1aba:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <check_play_note>
    1abe:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
 					play_lights_free_play(expander_get_last_value(), note_buttons);
    1ac0:	0e 94 76 05 	call	0xaec	; 0xaec <expander_get_last_value>
    1ac4:	6c 2f       	mov	r22, r28
    1ac6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <play_lights_free_play>

					break;
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <main+0xa2>
				case GAME_EASY_sm:					
				case GAME_HARD_sm:
					games_step(get_note_buttons());
    1acc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_note_buttons>
    1ad0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <games_step>
					break;
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <main+0xa2>
				case EASTER_EGG_sm:
					note_buttons = check_play_easter_egg();
    1ad6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <check_play_easter_egg>
    1ada:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
					play_lights_easter_egg(expander_read_ports(), note_buttons);	
    1adc:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
    1ae0:	6c 2f       	mov	r22, r28
    1ae2:	0e 94 b8 09 	call	0x1370	; 0x1370 <play_lights_easter_egg>
					break;
			}
			display_ctr = 0;
    1ae6:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <display_ctr>
    1aea:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <display_ctr+0x1>
    1aee:	c9 cf       	rjmp	.-110    	; 0x1a82 <main+0x3e>

00001af0 <__vector_12>:

    }
}

ISR(TCC4_OVF_vect)
{
    1af0:	1f 92       	push	r1
    1af2:	0f 92       	push	r0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
// 	PORTA.OUTTGL = PIN3_bm;
	song_interrupt_handler();
    1b12:	0e 94 64 10 	call	0x20c8	; 0x20c8 <song_interrupt_handler>
}
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	2f 93       	push	r18
    1b44:	3f 93       	push	r19
    1b46:	4f 93       	push	r20
    1b48:	5f 93       	push	r21
    1b4a:	6f 93       	push	r22
    1b4c:	7f 93       	push	r23
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	af 93       	push	r26
    1b54:	bf 93       	push	r27
    1b56:	ef 93       	push	r30
    1b58:	ff 93       	push	r31
	note_interrupt_handler();
    1b5a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <note_interrupt_handler>
}
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_38>:

ISR(TCD5_CCA_vect)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
	display_ctr++;
    1b8e:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <display_ctr>
    1b92:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <display_ctr+0x1>
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <display_ctr>
    1b9c:	90 93 ac 21 	sts	0x21AC, r25	; 0x8021ac <display_ctr+0x1>
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <note_timer_C5_init>:
uint8_t playing = 0;


void note_timer_C5_init()
{
	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1bae:	e0 e4       	ldi	r30, 0x40	; 64
    1bb0:	f8 e0       	ldi	r31, 0x08	; 8
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc;
    1bb6:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1bb8:	84 e0       	ldi	r24, 0x04	; 4
    1bba:	80 83       	st	Z, r24
    1bbc:	08 95       	ret

00001bbe <sys_timer_D5_init>:
}

void sys_timer_D5_init()
{
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1bbe:	e0 e4       	ldi	r30, 0x40	; 64
    1bc0:	f9 e0       	ldi	r31, 0x09	; 9
    1bc2:	11 82       	std	Z+1, r1	; 0x01
	TCD5.CTRLE = 0;
    1bc4:	14 82       	std	Z+4, r1	; 0x04
	TCD5.INTCTRLB = TC_OVFINTLVL_HI_gc;
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	87 83       	std	Z+7, r24	; 0x07
	TCD5.CTRLA = TC_CLKSEL_DIV1024_gc;
    1bca:	87 e0       	ldi	r24, 0x07	; 7
    1bcc:	80 83       	st	Z, r24
	TCD5.PER = 312; //100Hz
    1bce:	88 e3       	ldi	r24, 0x38	; 56
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	86 a3       	std	Z+38, r24	; 0x26
    1bd4:	97 a3       	std	Z+39, r25	; 0x27
    1bd6:	08 95       	ret

00001bd8 <note_decay_init>:
}

void note_decay_init()
{
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
    1bd8:	80 ec       	ldi	r24, 0xC0	; 192
    1bda:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
    1bde:	e0 e0       	ldi	r30, 0x00	; 0
    1be0:	f8 e0       	ldi	r31, 0x08	; 8
    1be2:	80 eb       	ldi	r24, 0xB0	; 176
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	86 a3       	std	Z+38, r24	; 0x26
    1be8:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
    1bea:	87 e0       	ldi	r24, 0x07	; 7
    1bec:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	f3 e0       	ldi	r31, 0x03	; 3
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
    1bf6:	98 e0       	ldi	r25, 0x08	; 8
    1bf8:	92 83       	std	Z+2, r25	; 0x02
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
    1bfa:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
    1bfc:	85 e0       	ldi	r24, 0x05	; 5
    1bfe:	80 83       	st	Z, r24
	
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
    1c00:	e0 e0       	ldi	r30, 0x00	; 0
    1c02:	f1 e0       	ldi	r31, 0x01	; 1
    1c04:	80 e4       	ldi	r24, 0x40	; 64
    1c06:	80 8b       	std	Z+16, r24	; 0x10
	EDMA.CH0.ADDRCTRL =
    1c08:	81 e3       	ldi	r24, 0x31	; 49
    1c0a:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
    1c0c:	85 e1       	ldi	r24, 0x15	; 21
    1c0e:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	
	EDMA.CH0.CTRLB =
    1c10:	83 e1       	ldi	r24, 0x13	; 19
    1c12:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction
	
	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	80 83       	st	Z, r24
    1c18:	08 95       	ret

00001c1a <run_note_decay>:
}

void run_note_decay()
{
	
	EDMA.CH0.TRFCNT = decay_table_len;                  // data array has len values
    1c1a:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <decay_table_len>
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	e0 e0       	ldi	r30, 0x00	; 0
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	86 8b       	std	Z+22, r24	; 0x16
    1c26:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.ADDR = (uint16_t)expDecayVals;           // this is the source SRAM address
    1c28:	85 e8       	ldi	r24, 0x85	; 133
    1c2a:	90 e2       	ldi	r25, 0x20	; 32
    1c2c:	80 8f       	std	Z+24, r24	; 0x18
    1c2e:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.CTRLA =
    1c30:	85 e8       	ldi	r24, 0x85	; 133
    1c32:	80 8b       	std	Z+16, r24	; 0x10
    1c34:	08 95       	ret

00001c36 <note_play>:
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
}

void note_play(uint8_t note_index)
{
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
	playing = 1;
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <playing>
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + note_index];
    1c40:	e8 2f       	mov	r30, r24
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	37 96       	adiw	r30, 0x07	; 7
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	e1 56       	subi	r30, 0x61	; 97
    1c4c:	ff 4d       	sbci	r31, 0xDF	; 223
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	c0 e4       	ldi	r28, 0x40	; 64
    1c54:	d8 e0       	ldi	r29, 0x08	; 8
    1c56:	88 a7       	std	Y+40, r24	; 0x28
    1c58:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay();
    1c5a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	88 83       	st	Y, r24
}
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <reset_play>:

void reset_play()
{
	playing = 0;
    1c68:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <playing>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
    1c6c:	e0 e0       	ldi	r30, 0x00	; 0
    1c6e:	f1 e0       	ldi	r31, 0x01	; 1
    1c70:	81 89       	ldd	r24, Z+17	; 0x11
    1c72:	80 61       	ori	r24, 0x10	; 16
    1c74:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
    1c76:	e0 e4       	ldi	r30, 0x40	; 64
    1c78:	f8 e0       	ldi	r31, 0x08	; 8
    1c7a:	10 a2       	std	Z+32, r1	; 0x20
    1c7c:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
    1c7e:	10 82       	st	Z, r1
    1c80:	08 95       	ret

00001c82 <note_player_init>:
}

void note_player_init()
{
	note_timer_C5_init();
    1c82:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <note_timer_C5_init>
	sys_timer_D5_init();
    1c86:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <sys_timer_D5_init>
	note_decay_init();
    1c8a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <note_decay_init>
    1c8e:	08 95       	ret

00001c90 <note_interrupt_handler>:
}

void note_interrupt_handler()
{
	reset_play();
    1c90:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <reset_play>
    1c94:	08 95       	ret

00001c96 <note_player_playing>:
}

uint8_t note_player_playing()
{
	return playing;
    1c96:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <playing>
    1c9a:	08 95       	ret

00001c9c <beat_timer_C4_init>:
void (*play_once_callback_ptr)() = 0;

void beat_timer_C4_init(uint16_t per)
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1c9c:	e0 e0       	ldi	r30, 0x00	; 0
    1c9e:	f8 e0       	ldi	r31, 0x08	; 8
    1ca0:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
    1ca2:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1ca4:	23 e0       	ldi	r18, 0x03	; 3
    1ca6:	26 83       	std	Z+6, r18	; 0x06
	TCC4.CTRLA = 0;
    1ca8:	10 82       	st	Z, r1
	TCC4.PER = per;
    1caa:	86 a3       	std	Z+38, r24	; 0x26
    1cac:	97 a3       	std	Z+39, r25	; 0x27
    1cae:	08 95       	ret

00001cb0 <note_0_timer_C5_init>:

//Channel 0 Counter
void note_0_timer_C5_init()
{

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1cb0:	e0 e4       	ldi	r30, 0x40	; 64
    1cb2:	f8 e0       	ldi	r31, 0x08	; 8
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc; 
    1cb8:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1cba:	84 e0       	ldi	r24, 0x04	; 4
    1cbc:	80 83       	st	Z, r24
    1cbe:	08 95       	ret

00001cc0 <note_1_timer_D5_init>:

//Channel 1 Counter
void note_1_timer_D5_init()
{
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1cc0:	e0 e4       	ldi	r30, 0x40	; 64
    1cc2:	f9 e0       	ldi	r31, 0x09	; 9
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc;
    1cc8:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	80 83       	st	Z, r24
    1cce:	08 95       	ret

00001cd0 <set_note_and_beat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t set_note_and_beat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	6c 01       	movw	r12, r24
    1ce2:	e9 01       	movw	r28, r18
    1ce4:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	f6 01       	movw	r30, r12
    1cea:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
    1cec:	88 81       	ld	r24, Y
    1cee:	99 81       	ldd	r25, Y+1	; 0x01
    1cf0:	68 0f       	add	r22, r24
    1cf2:	79 1f       	adc	r23, r25
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
    1cf8:	89 2f       	mov	r24, r25
    1cfa:	82 95       	swap	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	86 95       	lsr	r24
    1d00:	83 70       	andi	r24, 0x03	; 3
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <set_note_and_beat+0x3c>
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	8a 95       	dec	r24
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <set_note_and_beat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
    1d10:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
    1d12:	f8 01       	movw	r30, r16
    1d14:	20 81       	ld	r18, Z
    1d16:	31 81       	ldd	r19, Z+1	; 0x01
    1d18:	42 0f       	add	r20, r18
    1d1a:	53 1f       	adc	r21, r19
    1d1c:	fa 01       	movw	r30, r20
    1d1e:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	0c 90       	ld	r0, X
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <set_note_and_beat+0x5a>
    1d26:	35 95       	asr	r19
    1d28:	27 95       	ror	r18
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <set_note_and_beat+0x56>
    1d2e:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
    1d30:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
    1d32:	f6 01       	movw	r30, r12
    1d34:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
    1d36:	9f 73       	andi	r25, 0x3F	; 63
    1d38:	89 2f       	mov	r24, r25
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	51 f0       	breq	.+20     	; 0x1d54 <set_note_and_beat+0x84>
	{
		count = noteClocks[index] / 2;
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	fc 01       	movw	r30, r24
    1d46:	e1 5e       	subi	r30, 0xE1	; 225
    1d48:	fe 4d       	sbci	r31, 0xDE	; 222
    1d4a:	40 81       	ld	r20, Z
    1d4c:	51 81       	ldd	r21, Z+1	; 0x01
    1d4e:	56 95       	lsr	r21
    1d50:	47 95       	ror	r20
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <set_note_and_beat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
    1d58:	28 81       	ld	r18, Y
    1d5a:	39 81       	ldd	r19, Y+1	; 0x01
    1d5c:	2f 5f       	subi	r18, 0xFF	; 255
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	28 83       	st	Y, r18
    1d62:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
    1d64:	9c 91       	ld	r25, X
    1d66:	9f 5f       	subi	r25, 0xFF	; 255
    1d68:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
    1d6a:	98 30       	cpi	r25, 0x08	; 8
    1d6c:	39 f4       	brne	.+14     	; 0x1d7c <set_note_and_beat+0xac>
	{
		*extBitPosPtr = 0;
    1d6e:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
    1d70:	f8 01       	movw	r30, r16
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	80 83       	st	Z, r24
    1d7a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
    1d7c:	ca 01       	movw	r24, r20
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	08 95       	ret

00001d90 <set_ch0_note_and_beat>:


//Uses the current note indexes for treble
void set_ch0_note_and_beat()
{
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = set_note_and_beat(&noteCh0BeatCount, ch0Track, ch0Ext, &noteCh0Index, &noteCh0ExtIndex, &noteCh0ExtBitPos);
    1d98:	40 91 94 22 	lds	r20, 0x2294	; 0x802294 <ch0Ext>
    1d9c:	50 91 95 22 	lds	r21, 0x2295	; 0x802295 <ch0Ext+0x1>
    1da0:	60 91 a6 22 	lds	r22, 0x22A6	; 0x8022a6 <ch0Track>
    1da4:	70 91 a7 22 	lds	r23, 0x22A7	; 0x8022a7 <ch0Track+0x1>
    1da8:	0f 2e       	mov	r0, r31
    1daa:	f7 ec       	ldi	r31, 0xC7	; 199
    1dac:	ef 2e       	mov	r14, r31
    1dae:	f1 e2       	ldi	r31, 0x21	; 33
    1db0:	ff 2e       	mov	r15, r31
    1db2:	f0 2d       	mov	r31, r0
    1db4:	08 ec       	ldi	r16, 0xC8	; 200
    1db6:	11 e2       	ldi	r17, 0x21	; 33
    1db8:	2a ec       	ldi	r18, 0xCA	; 202
    1dba:	31 e2       	ldi	r19, 0x21	; 33
    1dbc:	86 ec       	ldi	r24, 0xC6	; 198
    1dbe:	91 e2       	ldi	r25, 0x21	; 33
    1dc0:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <set_note_and_beat>
    1dc4:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
    1dc8:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	08 95       	ret

00001dd6 <set_ch1_note_and_beat>:

//Uses the current note indexes for Bass
void set_ch1_note_and_beat()
{
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = set_note_and_beat(&noteCh1BeatCount, ch1Track, ch1Ext, &noteCh1Index, &noteCh1ExtIndex, &noteCh1ExtBitPos);
    1dde:	40 91 a8 22 	lds	r20, 0x22A8	; 0x8022a8 <ch1Ext>
    1de2:	50 91 a9 22 	lds	r21, 0x22A9	; 0x8022a9 <ch1Ext+0x1>
    1de6:	60 91 a4 22 	lds	r22, 0x22A4	; 0x8022a4 <ch1Track>
    1dea:	70 91 a5 22 	lds	r23, 0x22A5	; 0x8022a5 <ch1Track+0x1>
    1dee:	0f 2e       	mov	r0, r31
    1df0:	f8 eb       	ldi	r31, 0xB8	; 184
    1df2:	ef 2e       	mov	r14, r31
    1df4:	f1 e2       	ldi	r31, 0x21	; 33
    1df6:	ff 2e       	mov	r15, r31
    1df8:	f0 2d       	mov	r31, r0
    1dfa:	09 eb       	ldi	r16, 0xB9	; 185
    1dfc:	11 e2       	ldi	r17, 0x21	; 33
    1dfe:	2b eb       	ldi	r18, 0xBB	; 187
    1e00:	31 e2       	ldi	r19, 0x21	; 33
    1e02:	87 eb       	ldi	r24, 0xB7	; 183
    1e04:	91 e2       	ldi	r25, 0x21	; 33
    1e06:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <set_note_and_beat>
    1e0a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
    1e0e:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	08 95       	ret

00001e1c <song_init>:

void song_init()
{
	if (hasCh0Intro)
    1e1c:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <hasCh0Intro>
    1e20:	88 23       	and	r24, r24
    1e22:	99 f0       	breq	.+38     	; 0x1e4a <song_init+0x2e>
	{
		isCh0Intro = 1;
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	90 93 bf 21 	sts	0x21BF, r25	; 0x8021bf <isCh0Intro>
		ch0Track = ch0IntroTrack;
    1e2a:	20 91 98 22 	lds	r18, 0x2298	; 0x802298 <ch0IntroTrack>
    1e2e:	30 91 99 22 	lds	r19, 0x2299	; 0x802299 <ch0IntroTrack+0x1>
    1e32:	20 93 a6 22 	sts	0x22A6, r18	; 0x8022a6 <ch0Track>
    1e36:	30 93 a7 22 	sts	0x22A7, r19	; 0x8022a7 <ch0Track+0x1>
		ch0Ext = ch0IntroExt;
    1e3a:	20 91 9e 22 	lds	r18, 0x229E	; 0x80229e <ch0IntroExt>
    1e3e:	30 91 9f 22 	lds	r19, 0x229F	; 0x80229f <ch0IntroExt+0x1>
    1e42:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch0Ext>
    1e46:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch0Ext+0x1>
	}

	if (!(hasCh0Intro) && hasCh0Main)
    1e4a:	81 11       	cpse	r24, r1
    1e4c:	16 c0       	rjmp	.+44     	; 0x1e7a <song_init+0x5e>
    1e4e:	90 91 cc 21 	lds	r25, 0x21CC	; 0x8021cc <hasCh0Main>
    1e52:	99 23       	and	r25, r25
    1e54:	91 f0       	breq	.+36     	; 0x1e7a <song_init+0x5e>
	{
		isCh0Intro = 0;
    1e56:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <isCh0Intro>
		ch0Track = ch0MainTrack;
    1e5a:	20 91 96 22 	lds	r18, 0x2296	; 0x802296 <ch0MainTrack>
    1e5e:	30 91 97 22 	lds	r19, 0x2297	; 0x802297 <ch0MainTrack+0x1>
    1e62:	20 93 a6 22 	sts	0x22A6, r18	; 0x8022a6 <ch0Track>
    1e66:	30 93 a7 22 	sts	0x22A7, r19	; 0x8022a7 <ch0Track+0x1>
		ch0Ext = ch0MainExt;
    1e6a:	20 91 92 22 	lds	r18, 0x2292	; 0x802292 <ch0MainExt>
    1e6e:	30 91 93 22 	lds	r19, 0x2293	; 0x802293 <ch0MainExt+0x1>
    1e72:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch0Ext>
    1e76:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch0Ext+0x1>
	}

	noteCh0BeatCount = 0;
    1e7a:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <noteCh0BeatCount>
	noteCh0Index = 0;
    1e7e:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <noteCh0Index>
    1e82:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <noteCh0Index+0x1>
	noteCh0ExtIndex = 0;
    1e86:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <noteCh0ExtIndex>
    1e8a:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <noteCh0ExtIndex+0x1>
	noteCh0ExtBitPos = 0;
    1e8e:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <noteCh0ExtBitPos>
	
	if (hasCh1Intro)
    1e92:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <hasCh1Intro>
    1e96:	99 23       	and	r25, r25
    1e98:	99 f0       	breq	.+38     	; 0x1ec0 <song_init+0xa4>
	{
		isCh1Intro = 1;
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	20 93 b0 21 	sts	0x21B0, r18	; 0x8021b0 <isCh1Intro>
		ch1Track = ch1IntroTrack;
    1ea0:	20 91 a2 22 	lds	r18, 0x22A2	; 0x8022a2 <ch1IntroTrack>
    1ea4:	30 91 a3 22 	lds	r19, 0x22A3	; 0x8022a3 <ch1IntroTrack+0x1>
    1ea8:	20 93 a4 22 	sts	0x22A4, r18	; 0x8022a4 <ch1Track>
    1eac:	30 93 a5 22 	sts	0x22A5, r19	; 0x8022a5 <ch1Track+0x1>
		ch1Ext = ch1IntroExt;
    1eb0:	20 91 90 22 	lds	r18, 0x2290	; 0x802290 <ch1IntroExt>
    1eb4:	30 91 91 22 	lds	r19, 0x2291	; 0x802291 <ch1IntroExt+0x1>
    1eb8:	20 93 a8 22 	sts	0x22A8, r18	; 0x8022a8 <ch1Ext>
    1ebc:	30 93 a9 22 	sts	0x22A9, r19	; 0x8022a9 <ch1Ext+0x1>
	}

	if (!(hasCh1Intro) && hasCh1Main)
    1ec0:	91 11       	cpse	r25, r1
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <song_init+0xd4>
    1ec4:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <hasCh1Main>
    1ec8:	99 23       	and	r25, r25
    1eca:	91 f0       	breq	.+36     	; 0x1ef0 <song_init+0xd4>
	{
		isCh1Intro = 0;
    1ecc:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <isCh1Intro>
		ch1Track = ch1MainTrack;
    1ed0:	20 91 a0 22 	lds	r18, 0x22A0	; 0x8022a0 <ch1MainTrack>
    1ed4:	30 91 a1 22 	lds	r19, 0x22A1	; 0x8022a1 <ch1MainTrack+0x1>
    1ed8:	20 93 a4 22 	sts	0x22A4, r18	; 0x8022a4 <ch1Track>
    1edc:	30 93 a5 22 	sts	0x22A5, r19	; 0x8022a5 <ch1Track+0x1>
		ch1Ext = ch1MainExt;
    1ee0:	20 91 9a 22 	lds	r18, 0x229A	; 0x80229a <ch1MainExt>
    1ee4:	30 91 9b 22 	lds	r19, 0x229B	; 0x80229b <ch1MainExt+0x1>
    1ee8:	20 93 a8 22 	sts	0x22A8, r18	; 0x8022a8 <ch1Ext>
    1eec:	30 93 a9 22 	sts	0x22A9, r19	; 0x8022a9 <ch1Ext+0x1>
	}

	noteCh1BeatCount = 0;
    1ef0:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh1BeatCount>
	noteCh1Index = 0;
    1ef4:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh1Index>
    1ef8:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <noteCh1Index+0x1>
	noteCh1ExtIndex = 0;
    1efc:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh1ExtIndex>
    1f00:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh1ExtIndex+0x1>
	noteCh1ExtBitPos = 0;
    1f04:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh1ExtBitPos>
	
	if (hasCh0Intro || hasCh0Main)
    1f08:	81 11       	cpse	r24, r1
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <song_init+0xf6>
    1f0c:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <hasCh0Main>
    1f10:	81 11       	cpse	r24, r1
	{
		set_ch0_note_and_beat();
    1f12:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <set_ch0_note_and_beat>
	}
	
	if (hasCh1Intro || hasCh1Main)
    1f16:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <hasCh1Intro>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <song_init+0x108>
    1f1e:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <hasCh1Main>
    1f22:	81 11       	cpse	r24, r1
	{
		set_ch1_note_and_beat();
    1f24:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <set_ch1_note_and_beat>
    1f28:	08 95       	ret

00001f2a <load_track_into_mem>:
	}
	
}

void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	1f 92       	push	r1
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	6c 01       	movw	r12, r24
    1f42:	7b 01       	movw	r14, r22
    1f44:	8a 01       	movw	r16, r20
	*dest = (uint8_t *)malloc(size);
    1f46:	ca 01       	movw	r24, r20
    1f48:	0e 94 1f 12 	call	0x243e	; 0x243e <malloc>
    1f4c:	d7 01       	movw	r26, r14
    1f4e:	8d 93       	st	X+, r24
    1f50:	9c 93       	st	X, r25
	volatile uint8_t temp;
	uint16_t i = 0;
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
	for(;i<size;i++)
    1f56:	0d c0       	rjmp	.+26     	; 0x1f72 <load_track_into_mem+0x48>
	{
		temp =pgm_read_byte(source + i);
    1f58:	f6 01       	movw	r30, r12
    1f5a:	e8 0f       	add	r30, r24
    1f5c:	f9 1f       	adc	r31, r25
    1f5e:	e4 91       	lpm	r30, Z
    1f60:	e9 83       	std	Y+1, r30	; 0x01
		(*dest)[i] = temp;
    1f62:	d7 01       	movw	r26, r14
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
    1f68:	e8 0f       	add	r30, r24
    1f6a:	f9 1f       	adc	r31, r25
    1f6c:	29 81       	ldd	r18, Y+1	; 0x01
    1f6e:	20 83       	st	Z, r18
void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
	*dest = (uint8_t *)malloc(size);
	volatile uint8_t temp;
	uint16_t i = 0;
	for(;i<size;i++)
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	80 17       	cp	r24, r16
    1f74:	91 07       	cpc	r25, r17
    1f76:	80 f3       	brcs	.-32     	; 0x1f58 <load_track_into_mem+0x2e>
	{
		temp =pgm_read_byte(source + i);
		(*dest)[i] = temp;
	}
}
    1f78:	0f 90       	pop	r0
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	08 95       	ret

00001f8c <song_player_init>:

void song_player_init(SongInitParams initParams, void (*update_display_cb)())
{
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	update_display_callback_ptr = update_display_cb;
    1f98:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9c:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <update_display_callback_ptr>
    1fa0:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <update_display_callback_ptr+0x1>
	
	beat_timer_C4_init(initParams.bmp_period);
    1fa4:	8f a1       	ldd	r24, Y+39	; 0x27
    1fa6:	98 a5       	ldd	r25, Y+40	; 0x28
    1fa8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <beat_timer_C4_init>
	note_0_timer_C5_init();
    1fac:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <note_0_timer_C5_init>
	note_1_timer_D5_init();	
    1fb0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <note_1_timer_D5_init>
	
	if (initParams.ch0.main.track_data)
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	98 89       	ldd	r25, Y+16	; 0x10
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	d1 f0       	breq	.+52     	; 0x1ff0 <song_player_init+0x64>
	{
		hasCh0Main = 1;
    1fbc:	21 e0       	ldi	r18, 0x01	; 1
    1fbe:	20 93 cc 21 	sts	0x21CC, r18	; 0x8021cc <hasCh0Main>
		load_track_into_mem(initParams.ch0.main.track_data, &ch0MainTrack, initParams.ch0.main.track_size);
    1fc2:	09 89       	ldd	r16, Y+17	; 0x11
    1fc4:	1a 89       	ldd	r17, Y+18	; 0x12
    1fc6:	a8 01       	movw	r20, r16
    1fc8:	66 e9       	ldi	r22, 0x96	; 150
    1fca:	72 e2       	ldi	r23, 0x22	; 34
    1fcc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.main.extension_data, &ch0MainExt, initParams.ch0.main.extension_size);
    1fd0:	4d 89       	ldd	r20, Y+21	; 0x15
    1fd2:	5e 89       	ldd	r21, Y+22	; 0x16
    1fd4:	62 e9       	ldi	r22, 0x92	; 146
    1fd6:	72 e2       	ldi	r23, 0x22	; 34
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	9c 89       	ldd	r25, Y+20	; 0x14
    1fdc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		ch0MainNoteCount = initParams.ch0.main.track_size;
    1fe0:	00 93 c2 21 	sts	0x21C2, r16	; 0x8021c2 <ch0MainNoteCount>
    1fe4:	10 93 c3 21 	sts	0x21C3, r17	; 0x8021c3 <ch0MainNoteCount+0x1>
		ch0NoteCount = ch0MainNoteCount;
    1fe8:	00 93 c0 21 	sts	0x21C0, r16	; 0x8021c0 <ch0NoteCount>
    1fec:	10 93 c1 21 	sts	0x21C1, r17	; 0x8021c1 <ch0NoteCount+0x1>
	
	//Note: Checking the main track stuff first so that we can set values here that can be overwritten if intro track
	//information is present without the need for more conditionals	
	
	//First copy over data from progmem
	if (initParams.ch0.intro.track_data)
    1ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff2:	98 85       	ldd	r25, Y+8	; 0x08
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	d1 f0       	breq	.+52     	; 0x202c <song_player_init+0xa0>
	{
		hasCh0Intro = 1;
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
    1ffa:	20 93 cd 21 	sts	0x21CD, r18	; 0x8021cd <hasCh0Intro>
		load_track_into_mem(initParams.ch0.intro.track_data, &ch0IntroTrack, initParams.ch0.intro.track_size);
    1ffe:	09 85       	ldd	r16, Y+9	; 0x09
    2000:	1a 85       	ldd	r17, Y+10	; 0x0a
    2002:	a8 01       	movw	r20, r16
    2004:	68 e9       	ldi	r22, 0x98	; 152
    2006:	72 e2       	ldi	r23, 0x22	; 34
    2008:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.intro.extension_data, &ch0IntroExt, initParams.ch0.intro.extension_size);
    200c:	4d 85       	ldd	r20, Y+13	; 0x0d
    200e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2010:	6e e9       	ldi	r22, 0x9E	; 158
    2012:	72 e2       	ldi	r23, 0x22	; 34
    2014:	8b 85       	ldd	r24, Y+11	; 0x0b
    2016:	9c 85       	ldd	r25, Y+12	; 0x0c
    2018:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		ch0IntroNoteCount = initParams.ch0.intro.track_size;		
    201c:	00 93 c4 21 	sts	0x21C4, r16	; 0x8021c4 <ch0IntroNoteCount>
    2020:	10 93 c5 21 	sts	0x21C5, r17	; 0x8021c5 <ch0IntroNoteCount+0x1>
		ch0NoteCount = ch0IntroNoteCount;
    2024:	00 93 c0 21 	sts	0x21C0, r16	; 0x8021c0 <ch0NoteCount>
    2028:	10 93 c1 21 	sts	0x21C1, r17	; 0x8021c1 <ch0NoteCount+0x1>
	}
	
	if (initParams.ch1.main.track_data)
    202c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    202e:	98 a1       	ldd	r25, Y+32	; 0x20
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	d1 f0       	breq	.+52     	; 0x2068 <song_player_init+0xdc>
	{
		hasCh1Main = 1;
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	20 93 bd 21 	sts	0x21BD, r18	; 0x8021bd <hasCh1Main>
		load_track_into_mem(initParams.ch1.main.track_data, &ch1MainTrack, initParams.ch1.main.track_size);
    203a:	09 a1       	ldd	r16, Y+33	; 0x21
    203c:	1a a1       	ldd	r17, Y+34	; 0x22
    203e:	a8 01       	movw	r20, r16
    2040:	60 ea       	ldi	r22, 0xA0	; 160
    2042:	72 e2       	ldi	r23, 0x22	; 34
    2044:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.main.extension_data, &ch1MainExt, initParams.ch1.main.extension_size);
    2048:	4d a1       	ldd	r20, Y+37	; 0x25
    204a:	5e a1       	ldd	r21, Y+38	; 0x26
    204c:	6a e9       	ldi	r22, 0x9A	; 154
    204e:	72 e2       	ldi	r23, 0x22	; 34
    2050:	8b a1       	ldd	r24, Y+35	; 0x23
    2052:	9c a1       	ldd	r25, Y+36	; 0x24
    2054:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		ch1MainNoteCount = initParams.ch1.main.track_size;
    2058:	00 93 b3 21 	sts	0x21B3, r16	; 0x8021b3 <ch1MainNoteCount>
    205c:	10 93 b4 21 	sts	0x21B4, r17	; 0x8021b4 <ch1MainNoteCount+0x1>
		ch1NoteCount = ch1MainNoteCount;
    2060:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <ch1NoteCount>
    2064:	10 93 b2 21 	sts	0x21B2, r17	; 0x8021b2 <ch1NoteCount+0x1>
	}
	
	if (initParams.ch1.intro.track_data)
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	d1 f0       	breq	.+52     	; 0x20a4 <song_player_init+0x118>
	{
		hasCh1Intro = 1;
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	20 93 be 21 	sts	0x21BE, r18	; 0x8021be <hasCh1Intro>
		load_track_into_mem(initParams.ch1.intro.track_data, &ch1IntroTrack, initParams.ch1.intro.track_size);
    2076:	09 8d       	ldd	r16, Y+25	; 0x19
    2078:	1a 8d       	ldd	r17, Y+26	; 0x1a
    207a:	a8 01       	movw	r20, r16
    207c:	62 ea       	ldi	r22, 0xA2	; 162
    207e:	72 e2       	ldi	r23, 0x22	; 34
    2080:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.intro.extension_data, &ch1IntroExt, initParams.ch1.intro.extension_size);
    2084:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2086:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2088:	60 e9       	ldi	r22, 0x90	; 144
    208a:	72 e2       	ldi	r23, 0x22	; 34
    208c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2090:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <load_track_into_mem>
		ch1IntroNoteCount = initParams.ch1.intro.track_size;		
    2094:	00 93 b5 21 	sts	0x21B5, r16	; 0x8021b5 <ch1IntroNoteCount>
    2098:	10 93 b6 21 	sts	0x21B6, r17	; 0x8021b6 <ch1IntroNoteCount+0x1>
		ch1NoteCount = ch1IntroNoteCount;
    209c:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <ch1NoteCount>
    20a0:	10 93 b2 21 	sts	0x21B2, r17	; 0x8021b2 <ch1NoteCount+0x1>
	}
	
		
	
	song_init();
    20a4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <song_init>
}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	08 95       	ret

000020b2 <song_start>:

void song_start()
{
	TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
    20b2:	86 e0       	ldi	r24, 0x06	; 6
    20b4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
    20b8:	08 95       	ret

000020ba <song_play_once>:
}

void song_play_once(void (*callback)())
{
	play_once_callback_ptr = callback;
    20ba:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <play_once_callback_ptr>
    20be:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <play_once_callback_ptr+0x1>
	song_start();	
    20c2:	0e 94 59 10 	call	0x20b2	; 0x20b2 <song_start>
    20c6:	08 95       	ret

000020c8 <song_interrupt_handler>:
}

void song_interrupt_handler(){
// 	PORTA.OUTSET = PIN2_bm;
	TCC4.INTFLAGS = TC4_OVFIF_bm;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteCh0BeatCount))
    20ce:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <noteCh0BeatCount>
    20d2:	81 11       	cpse	r24, r1
    20d4:	4b c0       	rjmp	.+150    	; 0x216c <song_interrupt_handler+0xa4>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
    20d6:	e0 e4       	ldi	r30, 0x40	; 64
    20d8:	f8 e0       	ldi	r31, 0x08	; 8
    20da:	10 82       	st	Z, r1
		TCC5.CCA = 0;
    20dc:	10 a6       	std	Z+40, r1	; 0x28
    20de:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh0Index >= ch0NoteCount)
    20e0:	20 91 ca 21 	lds	r18, 0x21CA	; 0x8021ca <noteCh0Index>
    20e4:	30 91 cb 21 	lds	r19, 0x21CB	; 0x8021cb <noteCh0Index+0x1>
    20e8:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <ch0NoteCount>
    20ec:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <ch0NoteCount+0x1>
    20f0:	28 17       	cp	r18, r24
    20f2:	39 07       	cpc	r19, r25
    20f4:	c0 f1       	brcs	.+112    	; 0x2166 <song_interrupt_handler+0x9e>
		{
			if (isCh0Intro)// && hasCh0Main)
    20f6:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <isCh0Intro>
    20fa:	88 23       	and	r24, r24
    20fc:	d9 f0       	breq	.+54     	; 0x2134 <song_interrupt_handler+0x6c>
			{
				isCh0Intro = 0;
    20fe:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <isCh0Intro>
				ch0NoteCount = ch0MainNoteCount;
    2102:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <ch0MainNoteCount>
    2106:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <ch0MainNoteCount+0x1>
    210a:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <ch0NoteCount>
    210e:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <ch0NoteCount+0x1>
				ch0Track = ch0MainTrack;
    2112:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <ch0MainTrack>
    2116:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <ch0MainTrack+0x1>
    211a:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <ch0Track>
    211e:	90 93 a7 22 	sts	0x22A7, r25	; 0x8022a7 <ch0Track+0x1>
				ch0Ext = ch0MainExt;
    2122:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <ch0MainExt>
    2126:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <ch0MainExt+0x1>
    212a:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <ch0Ext>
    212e:	90 93 95 22 	sts	0x2295, r25	; 0x802295 <ch0Ext+0x1>
    2132:	0d c0       	rjmp	.+26     	; 0x214e <song_interrupt_handler+0x86>
			}
			else if (play_once_callback_ptr)
    2134:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <play_once_callback_ptr>
    2138:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <play_once_callback_ptr+0x1>
    213c:	89 2b       	or	r24, r25
    213e:	39 f0       	breq	.+14     	; 0x214e <song_interrupt_handler+0x86>
			{
				TCC4.CTRLA = 0;
    2140:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
				play_once_callback_ptr();
    2144:	e0 91 ae 21 	lds	r30, 0x21AE	; 0x8021ae <play_once_callback_ptr>
    2148:	f0 91 af 21 	lds	r31, 0x21AF	; 0x8021af <play_once_callback_ptr+0x1>
    214c:	09 95       	icall
				
			}
			
			noteCh0BeatCount = 0;
    214e:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <noteCh0BeatCount>
			noteCh0Index = 0;
    2152:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <noteCh0Index>
    2156:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <noteCh0Index+0x1>
			noteCh0ExtIndex = 0;
    215a:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <noteCh0ExtIndex>
    215e:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <noteCh0ExtIndex+0x1>
			noteCh0ExtBitPos = 0;
    2162:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <noteCh0ExtBitPos>
		}
		

		set_ch0_note_and_beat();
    2166:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <set_ch0_note_and_beat>
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <song_interrupt_handler+0xaa>
		
	}
	else
	{
		noteCh0BeatCount--;
    216c:	81 50       	subi	r24, 0x01	; 1
    216e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <noteCh0BeatCount>
	}
	
	if (!(noteCh1BeatCount))
    2172:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <noteCh1BeatCount>
    2176:	81 11       	cpse	r24, r1
    2178:	41 c0       	rjmp	.+130    	; 0x21fc <song_interrupt_handler+0x134>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
    217a:	e0 e4       	ldi	r30, 0x40	; 64
    217c:	f9 e0       	ldi	r31, 0x09	; 9
    217e:	10 82       	st	Z, r1
		TCD5.CCA = 0;
    2180:	10 a6       	std	Z+40, r1	; 0x28
    2182:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh1Index >= ch1NoteCount)
    2184:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <noteCh1Index>
    2188:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <noteCh1Index+0x1>
    218c:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <ch1NoteCount>
    2190:	90 91 b2 21 	lds	r25, 0x21B2	; 0x8021b2 <ch1NoteCount+0x1>
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	70 f1       	brcs	.+92     	; 0x21f6 <song_interrupt_handler+0x12e>
		{
			if (isCh1Intro && hasCh1Main)
    219a:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <isCh1Intro>
    219e:	88 23       	and	r24, r24
    21a0:	f1 f0       	breq	.+60     	; 0x21de <song_interrupt_handler+0x116>
    21a2:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <hasCh1Main>
    21a6:	88 23       	and	r24, r24
    21a8:	d1 f0       	breq	.+52     	; 0x21de <song_interrupt_handler+0x116>
			{
				isCh1Intro = 0;
    21aa:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <isCh1Intro>
				ch1NoteCount = ch1MainNoteCount;
    21ae:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <ch1MainNoteCount>
    21b2:	90 91 b4 21 	lds	r25, 0x21B4	; 0x8021b4 <ch1MainNoteCount+0x1>
    21b6:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <ch1NoteCount>
    21ba:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <ch1NoteCount+0x1>
				ch1Track = ch1MainTrack;
    21be:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <ch1MainTrack>
    21c2:	90 91 a1 22 	lds	r25, 0x22A1	; 0x8022a1 <ch1MainTrack+0x1>
    21c6:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <ch1Track>
    21ca:	90 93 a5 22 	sts	0x22A5, r25	; 0x8022a5 <ch1Track+0x1>
				ch1Ext = ch1MainExt;
    21ce:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <ch1MainExt>
    21d2:	90 91 9b 22 	lds	r25, 0x229B	; 0x80229b <ch1MainExt+0x1>
    21d6:	80 93 a8 22 	sts	0x22A8, r24	; 0x8022a8 <ch1Ext>
    21da:	90 93 a9 22 	sts	0x22A9, r25	; 0x8022a9 <ch1Ext+0x1>
			}
			
			noteCh1BeatCount = 0;
    21de:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh1BeatCount>
			noteCh1Index = 0;
    21e2:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh1Index>
    21e6:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <noteCh1Index+0x1>
			noteCh1ExtIndex = 0;
    21ea:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh1ExtIndex>
    21ee:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh1ExtIndex+0x1>
			noteCh1ExtBitPos = 0;
    21f2:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh1ExtBitPos>
		}

		set_ch1_note_and_beat();
    21f6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <set_ch1_note_and_beat>
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <song_interrupt_handler+0x13a>
	}
	else
	{
		noteCh1BeatCount--;
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <noteCh1BeatCount>
	}
	
	update_display_callback_ptr();
    2202:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <update_display_callback_ptr>
    2206:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <update_display_callback_ptr+0x1>
    220a:	09 95       	icall
    220c:	2f ef       	ldi	r18, 0xFF	; 255
    220e:	83 ef       	ldi	r24, 0xF3	; 243
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	21 50       	subi	r18, 0x01	; 1
    2214:	80 40       	sbci	r24, 0x00	; 0
    2216:	90 40       	sbci	r25, 0x00	; 0
    2218:	e1 f7       	brne	.-8      	; 0x2212 <song_interrupt_handler+0x14a>
    221a:	00 c0       	rjmp	.+0      	; 0x221c <song_interrupt_handler+0x154>
    221c:	00 00       	nop
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    221e:	84 e0       	ldi	r24, 0x04	; 4
    2220:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    2224:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
    2228:	08 95       	ret

0000222a <get_allow_portal>:
volatile uint8_t allow_portal = 0;
volatile uint8_t allow_easter_egg = 0;

uint8_t get_allow_portal()
{
	return allow_portal;
    222a:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <allow_portal>
}
    222e:	08 95       	ret

00002230 <set_allow_portal>:

void set_allow_portal(uint8_t allow)
{
	allow_portal = allow;
    2230:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <allow_portal>
	eeprom_write_byte((uint8_t *)2, allow_portal ? ALLOW_VAL : 0);
    2234:	60 91 cf 21 	lds	r22, 0x21CF	; 0x8021cf <allow_portal>
    2238:	61 11       	cpse	r22, r1
    223a:	65 e5       	ldi	r22, 0x55	; 85
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 a4 13 	call	0x2748	; 0x2748 <eeprom_write_byte>
    2244:	08 95       	ret

00002246 <get_allow_easter_egg>:
}

uint8_t get_allow_easter_egg()
{
	return allow_easter_egg;
    2246:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <allow_easter_egg>
}
    224a:	08 95       	ret

0000224c <set_allow_easter_egg>:

void set_allow_easter_egg(uint8_t allow)
{
	allow_easter_egg = allow;
    224c:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <allow_easter_egg>
	eeprom_write_byte((uint8_t *)3, allow_easter_egg ? ALLOW_VAL : 0);
    2250:	60 91 ce 21 	lds	r22, 0x21CE	; 0x8021ce <allow_easter_egg>
    2254:	61 11       	cpse	r22, r1
    2256:	65 e5       	ldi	r22, 0x55	; 85
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 a4 13 	call	0x2748	; 0x2748 <eeprom_write_byte>
    2260:	08 95       	ret

00002262 <get_start_mode>:
}

uint8_t get_start_mode()
{
	return start_mode;
    2262:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
}
    2266:	08 95       	ret

00002268 <reset_start_mode_in_eeprom>:

void reset_start_mode_in_eeprom()
{
	eeprom_write_byte((uint8_t *)1, 0);
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 a4 13 	call	0x2748	; 0x2748 <eeprom_write_byte>
    2272:	08 95       	ret

00002274 <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
    2274:	88 ed       	ldi	r24, 0xD8	; 216
    2276:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
    227e:	08 95       	ret

00002280 <start_mode_init>:
}

void start_mode_init()
{
	
	start_mode = eeprom_read_byte((uint8_t*)1);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 9c 13 	call	0x2738	; 0x2738 <eeprom_read_byte>
    2288:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <start_mode>
	
	if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    228c:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    2290:	87 30       	cpi	r24, 0x07	; 7
    2292:	40 f0       	brcs	.+16     	; 0x22a4 <start_mode_init+0x24>
    2294:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    2298:	8f 3e       	cpi	r24, 0xEF	; 239
    229a:	21 f0       	breq	.+8      	; 0x22a4 <start_mode_init+0x24>
	{
		start_mode = 0;
    229c:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <start_mode>
		reset_start_mode_in_eeprom();
    22a0:	0e 94 34 11 	call	0x2268	; 0x2268 <reset_start_mode_in_eeprom>
	}
	
	allow_portal = eeprom_read_byte((uint8_t*)2);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 9c 13 	call	0x2738	; 0x2738 <eeprom_read_byte>
    22ac:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <allow_portal>
	
	//TODO:Remove test case
// 	allow_portal = ALLOW_VAL;
	
	allow_easter_egg = eeprom_read_byte((uint8_t*)3);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 9c 13 	call	0x2738	; 0x2738 <eeprom_read_byte>
    22b8:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <allow_easter_egg>
    22bc:	08 95       	ret

000022be <set_start_mode>:
void set_start_mode(uint8_t start_mode)
{
	//If start mode is set to what "Allow Portal" would be, we need to see
	//if the mode can be set to "Allow Portal", or if it can be skipped and
	//go straight to "Easter Egg" mode, or we just roll back to "Standby"
	if (start_mode == BASE_MAX_MODE + 1)
    22be:	85 30       	cpi	r24, 0x05	; 5
    22c0:	91 f4       	brne	.+36     	; 0x22e6 <set_start_mode+0x28>
	{
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
    22c2:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <allow_portal>
    22c6:	95 35       	cpi	r25, 0x55	; 85
    22c8:	21 f0       	breq	.+8      	; 0x22d2 <set_start_mode+0x14>
    22ca:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    22ce:	95 35       	cpi	r25, 0x55	; 85
    22d0:	b1 f4       	brne	.+44     	; 0x22fe <set_start_mode+0x40>
		{
			start_mode = 0;
		}
		else if ((allow_portal != ALLOW_VAL) && (allow_easter_egg == ALLOW_VAL))
    22d2:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <allow_portal>
    22d6:	95 35       	cpi	r25, 0x55	; 85
    22d8:	b9 f0       	breq	.+46     	; 0x2308 <set_start_mode+0x4a>
    22da:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    22de:	95 35       	cpi	r25, 0x55	; 85
    22e0:	99 f4       	brne	.+38     	; 0x2308 <set_start_mode+0x4a>
		{
			start_mode++;
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	11 c0       	rjmp	.+34     	; 0x2308 <set_start_mode+0x4a>
		}
	}
	else if (start_mode == BASE_MAX_MODE + 2)
    22e6:	86 30       	cpi	r24, 0x06	; 6
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <set_start_mode+0x36>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
    22ea:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    22ee:	95 35       	cpi	r25, 0x55	; 85
    22f0:	41 f4       	brne	.+16     	; 0x2302 <set_start_mode+0x44>
    22f2:	0a c0       	rjmp	.+20     	; 0x2308 <set_start_mode+0x4a>
		{
			start_mode = 0;
		}
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    22f4:	87 30       	cpi	r24, 0x07	; 7
    22f6:	40 f0       	brcs	.+16     	; 0x2308 <set_start_mode+0x4a>
    22f8:	8f 3e       	cpi	r24, 0xEF	; 239
    22fa:	29 f4       	brne	.+10     	; 0x2306 <set_start_mode+0x48>
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <set_start_mode+0x4a>
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <set_start_mode+0x4a>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <set_start_mode+0x4a>
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
	{
		//Our default restart state
		start_mode = 0;
    2306:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	eeprom_write_byte((uint8_t *)1, start_mode);
    2308:	68 2f       	mov	r22, r24
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 a4 13 	call	0x2748	; 0x2748 <eeprom_write_byte>
	eeprom_busy_wait();
    2312:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7fb1cf>
    2316:	88 23       	and	r24, r24
    2318:	e4 f3       	brlt	.-8      	; 0x2312 <set_start_mode+0x54>
	enable_wdt();
    231a:	0e 94 3a 11 	call	0x2274	; 0x2274 <enable_wdt>
    231e:	ff cf       	rjmp	.-2      	; 0x231e <set_start_mode+0x60>

00002320 <next_start_mode>:
	
}

void next_start_mode()
{
	start_mode++;
    2320:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <start_mode>
	set_start_mode(start_mode);
    232a:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    232e:	0e 94 5f 11 	call	0x22be	; 0x22be <set_start_mode>

00002332 <ws2812drv_init>:


void ws2812drv_init(void)
{                                                               
    // Setup EDMA channel 2(+1) 
    EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    2332:	a0 e0       	ldi	r26, 0x00	; 0
    2334:	b1 e0       	ldi	r27, 0x01	; 1
    2336:	80 eb       	ldi	r24, 0xB0	; 176
    2338:	8c 93       	st	X, r24
    EDMA.CH2.CTRLB = 0;// EDMA_CH_INTLVL_OFF_gc;
    233a:	d1 96       	adiw	r26, 0x31	; 49
    233c:	1c 92       	st	X, r1
    233e:	d1 97       	sbiw	r26, 0x31	; 49
    EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	d2 96       	adiw	r26, 0x32	; 50
    2344:	8c 93       	st	X, r24
    2346:	d2 97       	sbiw	r26, 0x32	; 50
    EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    2348:	d3 96       	adiw	r26, 0x33	; 51
    234a:	1c 92       	st	X, r1
    234c:	d3 97       	sbiw	r26, 0x33	; 51
    EDMA.CH2.DESTADDR = (uint16_t)&USARTD0.DATA;
    234e:	e0 ec       	ldi	r30, 0xC0	; 192
    2350:	f9 e0       	ldi	r31, 0x09	; 9
    2352:	dc 96       	adiw	r26, 0x3c	; 60
    2354:	ed 93       	st	X+, r30
    2356:	fc 93       	st	X, r31
    2358:	dd 97       	sbiw	r26, 0x3d	; 61
    EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
    235a:	9d e6       	ldi	r25, 0x6D	; 109
    235c:	d4 96       	adiw	r26, 0x34	; 52
    235e:	9c 93       	st	X, r25
    // Setup port pins for TxD, XCK and LUT0OUT
    PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
    2360:	a0 e6       	ldi	r26, 0x60	; 96
    2362:	b6 e0       	ldi	r27, 0x06	; 6
    2364:	50 96       	adiw	r26, 0x10	; 16
    2366:	1c 92       	st	X, r1
    2368:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
    236a:	51 96       	adiw	r26, 0x11	; 17
    236c:	8c 93       	st	X, r24
    236e:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	53 96       	adiw	r26, 0x13	; 19
    2374:	8c 93       	st	X, r24
    2376:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
    2378:	9b e0       	ldi	r25, 0x0B	; 11
    237a:	11 96       	adiw	r26, 0x01	; 1
    237c:	9c 93       	st	X, r25
	

    // Setup Event channel 0 to TxD (async)
    EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN3_gc;
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	b1 e0       	ldi	r27, 0x01	; 1
    2382:	9b e6       	ldi	r25, 0x6B	; 107
    2384:	9c 93       	st	X, r25
    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    2386:	18 96       	adiw	r26, 0x08	; 8
    2388:	1c 92       	st	X, r1
    238a:	18 97       	sbiw	r26, 0x08	; 8
    // Setup Event channel 6 to XCK rising edge
    EVSYS.CH6MUX = EVSYS_CHMUX_PORTD_PIN1_gc;
    238c:	99 e6       	ldi	r25, 0x69	; 105
    238e:	16 96       	adiw	r26, 0x06	; 6
    2390:	9c 93       	st	X, r25
    2392:	16 97       	sbiw	r26, 0x06	; 6
    EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    2394:	1e 96       	adiw	r26, 0x0e	; 14
    2396:	1c 92       	st	X, r1

    // Setup USART in master SPI mode 1, MSB first
    USARTD0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
    2398:	93 e1       	ldi	r25, 0x13	; 19
    239a:	96 83       	std	Z+6, r25	; 0x06
    USARTD0.BAUDCTRLB = 0;
    239c:	17 82       	std	Z+7, r1	; 0x07
    USARTD0.CTRLA = 0;// USART_RXSINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc;
    239e:	12 82       	std	Z+2, r1	; 0x02
    USARTD0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
    23a0:	92 ec       	ldi	r25, 0xC2	; 194
    23a2:	94 83       	std	Z+4, r25	; 0x04
    USARTD0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
    23a4:	15 82       	std	Z+5, r1	; 0x05
    USARTD0.CTRLB = USART_TXEN_bm;
    23a6:	98 e0       	ldi	r25, 0x08	; 8
    23a8:	93 83       	std	Z+3, r25	; 0x03

    // Setup XCL BTC0 timer to 1shot pwm generation
    XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
    23aa:	e0 e6       	ldi	r30, 0x60	; 96
    23ac:	f4 e0       	ldi	r31, 0x04	; 4
    23ae:	91 e1       	ldi	r25, 0x11	; 17
    23b0:	94 83       	std	Z+4, r25	; 0x04
    XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
    23b2:	85 83       	std	Z+5, r24	; 0x05
    XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
    23b4:	8e e9       	ldi	r24, 0x9E	; 158
    23b6:	86 83       	std	Z+6, r24	; 0x06
    XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
    23b8:	86 e1       	ldi	r24, 0x16	; 22
    23ba:	86 87       	std	Z+14, r24	; 0x0e
    XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
    23bc:	8d e0       	ldi	r24, 0x0D	; 13
    23be:	84 87       	std	Z+12, r24	; 0x0c

    // Setup XCL LUT
    XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PD_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
    23c0:	84 e5       	ldi	r24, 0x54	; 84
    23c2:	80 83       	st	Z, r24
    XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
    23c4:	80 e5       	ldi	r24, 0x50	; 80
    23c6:	81 83       	std	Z+1, r24	; 0x01
    XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLYCONF_DISABLE_gc;      // Async inputs, no delay
    23c8:	80 e4       	ldi	r24, 0x40	; 64
    23ca:	82 83       	std	Z+2, r24	; 0x02
    XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
    23cc:	80 ea       	ldi	r24, 0xA0	; 160
    23ce:	83 83       	std	Z+3, r24	; 0x03
    23d0:	08 95       	ret

000023d2 <ws2812drv_start_transfer>:
}


void ws2812drv_start_transfer(ws2812drv_led_t *p, uint16_t cnt)
{
    EDMA.CH2.ADDR = (uint16_t)p;
    23d2:	e0 e0       	ldi	r30, 0x00	; 0
    23d4:	f1 e0       	ldi	r31, 0x01	; 1
    23d6:	80 af       	std	Z+56, r24	; 0x38
    23d8:	91 af       	std	Z+57, r25	; 0x39
    EDMA.CH2.TRFCNT = cnt * sizeof(ws2812drv_led_t);
    23da:	cb 01       	movw	r24, r22
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	68 0f       	add	r22, r24
    23e2:	79 1f       	adc	r23, r25
    23e4:	66 ab       	std	Z+54, r22	; 0x36
    23e6:	77 ab       	std	Z+55, r23	; 0x37
    EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
    23e8:	84 e8       	ldi	r24, 0x84	; 132
    23ea:	80 ab       	std	Z+48, r24	; 0x30
    23ec:	08 95       	ret

000023ee <__divmodhi4>:
    23ee:	97 fb       	bst	r25, 7
    23f0:	07 2e       	mov	r0, r23
    23f2:	16 f4       	brtc	.+4      	; 0x23f8 <__divmodhi4+0xa>
    23f4:	00 94       	com	r0
    23f6:	07 d0       	rcall	.+14     	; 0x2406 <__divmodhi4_neg1>
    23f8:	77 fd       	sbrc	r23, 7
    23fa:	09 d0       	rcall	.+18     	; 0x240e <__divmodhi4_neg2>
    23fc:	0e 94 0b 12 	call	0x2416	; 0x2416 <__udivmodhi4>
    2400:	07 fc       	sbrc	r0, 7
    2402:	05 d0       	rcall	.+10     	; 0x240e <__divmodhi4_neg2>
    2404:	3e f4       	brtc	.+14     	; 0x2414 <__divmodhi4_exit>

00002406 <__divmodhi4_neg1>:
    2406:	90 95       	com	r25
    2408:	81 95       	neg	r24
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	08 95       	ret

0000240e <__divmodhi4_neg2>:
    240e:	70 95       	com	r23
    2410:	61 95       	neg	r22
    2412:	7f 4f       	sbci	r23, 0xFF	; 255

00002414 <__divmodhi4_exit>:
    2414:	08 95       	ret

00002416 <__udivmodhi4>:
    2416:	aa 1b       	sub	r26, r26
    2418:	bb 1b       	sub	r27, r27
    241a:	51 e1       	ldi	r21, 0x11	; 17
    241c:	07 c0       	rjmp	.+14     	; 0x242c <__udivmodhi4_ep>

0000241e <__udivmodhi4_loop>:
    241e:	aa 1f       	adc	r26, r26
    2420:	bb 1f       	adc	r27, r27
    2422:	a6 17       	cp	r26, r22
    2424:	b7 07       	cpc	r27, r23
    2426:	10 f0       	brcs	.+4      	; 0x242c <__udivmodhi4_ep>
    2428:	a6 1b       	sub	r26, r22
    242a:	b7 0b       	sbc	r27, r23

0000242c <__udivmodhi4_ep>:
    242c:	88 1f       	adc	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	5a 95       	dec	r21
    2432:	a9 f7       	brne	.-22     	; 0x241e <__udivmodhi4_loop>
    2434:	80 95       	com	r24
    2436:	90 95       	com	r25
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	08 95       	ret

0000243e <malloc>:
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	82 30       	cpi	r24, 0x02	; 2
    2448:	91 05       	cpc	r25, r1
    244a:	10 f4       	brcc	.+4      	; 0x2450 <malloc+0x12>
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <__flp>
    2454:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <__flp+0x1>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	30 97       	sbiw	r30, 0x00	; 0
    2462:	19 f1       	breq	.+70     	; 0x24aa <malloc+0x6c>
    2464:	40 81       	ld	r20, Z
    2466:	51 81       	ldd	r21, Z+1	; 0x01
    2468:	02 81       	ldd	r16, Z+2	; 0x02
    246a:	13 81       	ldd	r17, Z+3	; 0x03
    246c:	48 17       	cp	r20, r24
    246e:	59 07       	cpc	r21, r25
    2470:	c8 f0       	brcs	.+50     	; 0x24a4 <malloc+0x66>
    2472:	84 17       	cp	r24, r20
    2474:	95 07       	cpc	r25, r21
    2476:	69 f4       	brne	.+26     	; 0x2492 <malloc+0x54>
    2478:	10 97       	sbiw	r26, 0x00	; 0
    247a:	31 f0       	breq	.+12     	; 0x2488 <malloc+0x4a>
    247c:	12 96       	adiw	r26, 0x02	; 2
    247e:	0c 93       	st	X, r16
    2480:	12 97       	sbiw	r26, 0x02	; 2
    2482:	13 96       	adiw	r26, 0x03	; 3
    2484:	1c 93       	st	X, r17
    2486:	27 c0       	rjmp	.+78     	; 0x24d6 <malloc+0x98>
    2488:	00 93 ac 22 	sts	0x22AC, r16	; 0x8022ac <__flp>
    248c:	10 93 ad 22 	sts	0x22AD, r17	; 0x8022ad <__flp+0x1>
    2490:	22 c0       	rjmp	.+68     	; 0x24d6 <malloc+0x98>
    2492:	21 15       	cp	r18, r1
    2494:	31 05       	cpc	r19, r1
    2496:	19 f0       	breq	.+6      	; 0x249e <malloc+0x60>
    2498:	42 17       	cp	r20, r18
    249a:	53 07       	cpc	r21, r19
    249c:	18 f4       	brcc	.+6      	; 0x24a4 <malloc+0x66>
    249e:	9a 01       	movw	r18, r20
    24a0:	bd 01       	movw	r22, r26
    24a2:	ef 01       	movw	r28, r30
    24a4:	df 01       	movw	r26, r30
    24a6:	f8 01       	movw	r30, r16
    24a8:	db cf       	rjmp	.-74     	; 0x2460 <malloc+0x22>
    24aa:	21 15       	cp	r18, r1
    24ac:	31 05       	cpc	r19, r1
    24ae:	f9 f0       	breq	.+62     	; 0x24ee <malloc+0xb0>
    24b0:	28 1b       	sub	r18, r24
    24b2:	39 0b       	sbc	r19, r25
    24b4:	24 30       	cpi	r18, 0x04	; 4
    24b6:	31 05       	cpc	r19, r1
    24b8:	80 f4       	brcc	.+32     	; 0x24da <malloc+0x9c>
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	61 15       	cp	r22, r1
    24c0:	71 05       	cpc	r23, r1
    24c2:	21 f0       	breq	.+8      	; 0x24cc <malloc+0x8e>
    24c4:	fb 01       	movw	r30, r22
    24c6:	82 83       	std	Z+2, r24	; 0x02
    24c8:	93 83       	std	Z+3, r25	; 0x03
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <malloc+0x96>
    24cc:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <__flp>
    24d0:	90 93 ad 22 	sts	0x22AD, r25	; 0x8022ad <__flp+0x1>
    24d4:	fe 01       	movw	r30, r28
    24d6:	32 96       	adiw	r30, 0x02	; 2
    24d8:	44 c0       	rjmp	.+136    	; 0x2562 <malloc+0x124>
    24da:	fe 01       	movw	r30, r28
    24dc:	e2 0f       	add	r30, r18
    24de:	f3 1f       	adc	r31, r19
    24e0:	81 93       	st	Z+, r24
    24e2:	91 93       	st	Z+, r25
    24e4:	22 50       	subi	r18, 0x02	; 2
    24e6:	31 09       	sbc	r19, r1
    24e8:	28 83       	st	Y, r18
    24ea:	39 83       	std	Y+1, r19	; 0x01
    24ec:	3a c0       	rjmp	.+116    	; 0x2562 <malloc+0x124>
    24ee:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    24f2:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    24f6:	23 2b       	or	r18, r19
    24f8:	41 f4       	brne	.+16     	; 0x250a <malloc+0xcc>
    24fa:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    24fe:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2502:	20 93 aa 22 	sts	0x22AA, r18	; 0x8022aa <__brkval>
    2506:	30 93 ab 22 	sts	0x22AB, r19	; 0x8022ab <__brkval+0x1>
    250a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    250e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2512:	21 15       	cp	r18, r1
    2514:	31 05       	cpc	r19, r1
    2516:	41 f4       	brne	.+16     	; 0x2528 <malloc+0xea>
    2518:	2d b7       	in	r18, 0x3d	; 61
    251a:	3e b7       	in	r19, 0x3e	; 62
    251c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2520:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2524:	24 1b       	sub	r18, r20
    2526:	35 0b       	sbc	r19, r21
    2528:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <__brkval>
    252c:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <__brkval+0x1>
    2530:	e2 17       	cp	r30, r18
    2532:	f3 07       	cpc	r31, r19
    2534:	a0 f4       	brcc	.+40     	; 0x255e <malloc+0x120>
    2536:	2e 1b       	sub	r18, r30
    2538:	3f 0b       	sbc	r19, r31
    253a:	28 17       	cp	r18, r24
    253c:	39 07       	cpc	r19, r25
    253e:	78 f0       	brcs	.+30     	; 0x255e <malloc+0x120>
    2540:	ac 01       	movw	r20, r24
    2542:	4e 5f       	subi	r20, 0xFE	; 254
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	24 17       	cp	r18, r20
    2548:	35 07       	cpc	r19, r21
    254a:	48 f0       	brcs	.+18     	; 0x255e <malloc+0x120>
    254c:	4e 0f       	add	r20, r30
    254e:	5f 1f       	adc	r21, r31
    2550:	40 93 aa 22 	sts	0x22AA, r20	; 0x8022aa <__brkval>
    2554:	50 93 ab 22 	sts	0x22AB, r21	; 0x8022ab <__brkval+0x1>
    2558:	81 93       	st	Z+, r24
    255a:	91 93       	st	Z+, r25
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <malloc+0x124>
    255e:	e0 e0       	ldi	r30, 0x00	; 0
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	cf 01       	movw	r24, r30
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	08 95       	ret

0000256e <free>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	09 f4       	brne	.+2      	; 0x2578 <free+0xa>
    2576:	81 c0       	rjmp	.+258    	; 0x267a <free+0x10c>
    2578:	fc 01       	movw	r30, r24
    257a:	32 97       	sbiw	r30, 0x02	; 2
    257c:	12 82       	std	Z+2, r1	; 0x02
    257e:	13 82       	std	Z+3, r1	; 0x03
    2580:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <__flp>
    2584:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <__flp+0x1>
    2588:	10 97       	sbiw	r26, 0x00	; 0
    258a:	81 f4       	brne	.+32     	; 0x25ac <free+0x3e>
    258c:	20 81       	ld	r18, Z
    258e:	31 81       	ldd	r19, Z+1	; 0x01
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    2598:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    259c:	28 17       	cp	r18, r24
    259e:	39 07       	cpc	r19, r25
    25a0:	51 f5       	brne	.+84     	; 0x25f6 <free+0x88>
    25a2:	e0 93 aa 22 	sts	0x22AA, r30	; 0x8022aa <__brkval>
    25a6:	f0 93 ab 22 	sts	0x22AB, r31	; 0x8022ab <__brkval+0x1>
    25aa:	67 c0       	rjmp	.+206    	; 0x267a <free+0x10c>
    25ac:	ed 01       	movw	r28, r26
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	ce 17       	cp	r28, r30
    25b4:	df 07       	cpc	r29, r31
    25b6:	40 f4       	brcc	.+16     	; 0x25c8 <free+0x5a>
    25b8:	4a 81       	ldd	r20, Y+2	; 0x02
    25ba:	5b 81       	ldd	r21, Y+3	; 0x03
    25bc:	9e 01       	movw	r18, r28
    25be:	41 15       	cp	r20, r1
    25c0:	51 05       	cpc	r21, r1
    25c2:	f1 f0       	breq	.+60     	; 0x2600 <free+0x92>
    25c4:	ea 01       	movw	r28, r20
    25c6:	f5 cf       	rjmp	.-22     	; 0x25b2 <free+0x44>
    25c8:	c2 83       	std	Z+2, r28	; 0x02
    25ca:	d3 83       	std	Z+3, r29	; 0x03
    25cc:	40 81       	ld	r20, Z
    25ce:	51 81       	ldd	r21, Z+1	; 0x01
    25d0:	84 0f       	add	r24, r20
    25d2:	95 1f       	adc	r25, r21
    25d4:	c8 17       	cp	r28, r24
    25d6:	d9 07       	cpc	r29, r25
    25d8:	59 f4       	brne	.+22     	; 0x25f0 <free+0x82>
    25da:	88 81       	ld	r24, Y
    25dc:	99 81       	ldd	r25, Y+1	; 0x01
    25de:	84 0f       	add	r24, r20
    25e0:	95 1f       	adc	r25, r21
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	82 83       	std	Z+2, r24	; 0x02
    25ee:	93 83       	std	Z+3, r25	; 0x03
    25f0:	21 15       	cp	r18, r1
    25f2:	31 05       	cpc	r19, r1
    25f4:	29 f4       	brne	.+10     	; 0x2600 <free+0x92>
    25f6:	e0 93 ac 22 	sts	0x22AC, r30	; 0x8022ac <__flp>
    25fa:	f0 93 ad 22 	sts	0x22AD, r31	; 0x8022ad <__flp+0x1>
    25fe:	3d c0       	rjmp	.+122    	; 0x267a <free+0x10c>
    2600:	e9 01       	movw	r28, r18
    2602:	ea 83       	std	Y+2, r30	; 0x02
    2604:	fb 83       	std	Y+3, r31	; 0x03
    2606:	49 91       	ld	r20, Y+
    2608:	59 91       	ld	r21, Y+
    260a:	c4 0f       	add	r28, r20
    260c:	d5 1f       	adc	r29, r21
    260e:	ec 17       	cp	r30, r28
    2610:	fd 07       	cpc	r31, r29
    2612:	61 f4       	brne	.+24     	; 0x262c <free+0xbe>
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	84 0f       	add	r24, r20
    261a:	95 1f       	adc	r25, r21
    261c:	02 96       	adiw	r24, 0x02	; 2
    261e:	e9 01       	movw	r28, r18
    2620:	88 83       	st	Y, r24
    2622:	99 83       	std	Y+1, r25	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	8a 83       	std	Y+2, r24	; 0x02
    262a:	9b 83       	std	Y+3, r25	; 0x03
    262c:	e0 e0       	ldi	r30, 0x00	; 0
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	12 96       	adiw	r26, 0x02	; 2
    2632:	8d 91       	ld	r24, X+
    2634:	9c 91       	ld	r25, X
    2636:	13 97       	sbiw	r26, 0x03	; 3
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	19 f0       	breq	.+6      	; 0x2642 <free+0xd4>
    263c:	fd 01       	movw	r30, r26
    263e:	dc 01       	movw	r26, r24
    2640:	f7 cf       	rjmp	.-18     	; 0x2630 <free+0xc2>
    2642:	8d 91       	ld	r24, X+
    2644:	9c 91       	ld	r25, X
    2646:	11 97       	sbiw	r26, 0x01	; 1
    2648:	9d 01       	movw	r18, r26
    264a:	2e 5f       	subi	r18, 0xFE	; 254
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    2656:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    265a:	28 17       	cp	r18, r24
    265c:	39 07       	cpc	r19, r25
    265e:	69 f4       	brne	.+26     	; 0x267a <free+0x10c>
    2660:	30 97       	sbiw	r30, 0x00	; 0
    2662:	29 f4       	brne	.+10     	; 0x266e <free+0x100>
    2664:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <__flp>
    2668:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <__flp+0x1>
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <free+0x104>
    266e:	12 82       	std	Z+2, r1	; 0x02
    2670:	13 82       	std	Z+3, r1	; 0x03
    2672:	a0 93 aa 22 	sts	0x22AA, r26	; 0x8022aa <__brkval>
    2676:	b0 93 ab 22 	sts	0x22AB, r27	; 0x8022ab <__brkval+0x1>
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <do_rand>:
    2680:	8f 92       	push	r8
    2682:	9f 92       	push	r9
    2684:	af 92       	push	r10
    2686:	bf 92       	push	r11
    2688:	cf 92       	push	r12
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	ec 01       	movw	r28, r24
    2696:	68 81       	ld	r22, Y
    2698:	79 81       	ldd	r23, Y+1	; 0x01
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	61 15       	cp	r22, r1
    26a0:	71 05       	cpc	r23, r1
    26a2:	81 05       	cpc	r24, r1
    26a4:	91 05       	cpc	r25, r1
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <do_rand+0x30>
    26a8:	64 e2       	ldi	r22, 0x24	; 36
    26aa:	79 ed       	ldi	r23, 0xD9	; 217
    26ac:	8b e5       	ldi	r24, 0x5B	; 91
    26ae:	97 e0       	ldi	r25, 0x07	; 7
    26b0:	2d e1       	ldi	r18, 0x1D	; 29
    26b2:	33 ef       	ldi	r19, 0xF3	; 243
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	0e 94 ba 13 	call	0x2774	; 0x2774 <__divmodsi4>
    26bc:	49 01       	movw	r8, r18
    26be:	5a 01       	movw	r10, r20
    26c0:	9b 01       	movw	r18, r22
    26c2:	ac 01       	movw	r20, r24
    26c4:	a7 ea       	ldi	r26, 0xA7	; 167
    26c6:	b1 e4       	ldi	r27, 0x41	; 65
    26c8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__muluhisi3>
    26cc:	6b 01       	movw	r12, r22
    26ce:	7c 01       	movw	r14, r24
    26d0:	ac ee       	ldi	r26, 0xEC	; 236
    26d2:	b4 ef       	ldi	r27, 0xF4	; 244
    26d4:	a5 01       	movw	r20, r10
    26d6:	94 01       	movw	r18, r8
    26d8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulohisi3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8c 0d       	add	r24, r12
    26e2:	9d 1d       	adc	r25, r13
    26e4:	ae 1d       	adc	r26, r14
    26e6:	bf 1d       	adc	r27, r15
    26e8:	b7 ff       	sbrs	r27, 7
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <do_rand+0x72>
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	a1 09       	sbc	r26, r1
    26f0:	b0 48       	sbci	r27, 0x80	; 128
    26f2:	88 83       	st	Y, r24
    26f4:	99 83       	std	Y+1, r25	; 0x01
    26f6:	aa 83       	std	Y+2, r26	; 0x02
    26f8:	bb 83       	std	Y+3, r27	; 0x03
    26fa:	9f 77       	andi	r25, 0x7F	; 127
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	df 90       	pop	r13
    2706:	cf 90       	pop	r12
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	08 95       	ret

00002712 <rand_r>:
    2712:	0e 94 40 13 	call	0x2680	; 0x2680 <do_rand>
    2716:	08 95       	ret

00002718 <rand>:
    2718:	86 e0       	ldi	r24, 0x06	; 6
    271a:	90 e2       	ldi	r25, 0x20	; 32
    271c:	0e 94 40 13 	call	0x2680	; 0x2680 <do_rand>
    2720:	08 95       	ret

00002722 <srand>:
    2722:	a0 e0       	ldi	r26, 0x00	; 0
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <next>
    272a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <next+0x1>
    272e:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <next+0x2>
    2732:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <next+0x3>
    2736:	08 95       	ret

00002738 <eeprom_read_byte>:
    2738:	03 d0       	rcall	.+6      	; 0x2740 <eeprom_mapen>
    273a:	80 81       	ld	r24, Z
    273c:	99 27       	eor	r25, r25
    273e:	08 95       	ret

00002740 <eeprom_mapen>:
    2740:	fc 01       	movw	r30, r24
    2742:	e0 50       	subi	r30, 0x00	; 0
    2744:	f0 4f       	sbci	r31, 0xF0	; 240
    2746:	08 95       	ret

00002748 <eeprom_write_byte>:
    2748:	26 2f       	mov	r18, r22

0000274a <eeprom_write_r18>:
    274a:	af 93       	push	r26
    274c:	bf 93       	push	r27
    274e:	e0 ec       	ldi	r30, 0xC0	; 192
    2750:	f1 e0       	ldi	r31, 0x01	; 1
    2752:	37 85       	ldd	r19, Z+15	; 0x0f
    2754:	37 fd       	sbrc	r19, 7
    2756:	fd cf       	rjmp	.-6      	; 0x2752 <eeprom_write_r18+0x8>
    2758:	dc 01       	movw	r26, r24
    275a:	a0 50       	subi	r26, 0x00	; 0
    275c:	b0 4f       	sbci	r27, 0xF0	; 240
    275e:	2c 93       	st	X, r18
    2760:	25 e3       	ldi	r18, 0x35	; 53
    2762:	22 87       	std	Z+10, r18	; 0x0a
    2764:	28 ed       	ldi	r18, 0xD8	; 216
    2766:	31 e0       	ldi	r19, 0x01	; 1
    2768:	24 bf       	out	0x34, r18	; 52
    276a:	33 87       	std	Z+11, r19	; 0x0b
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	bf 91       	pop	r27
    2770:	af 91       	pop	r26
    2772:	08 95       	ret

00002774 <__divmodsi4>:
    2774:	05 2e       	mov	r0, r21
    2776:	97 fb       	bst	r25, 7
    2778:	1e f4       	brtc	.+6      	; 0x2780 <__divmodsi4+0xc>
    277a:	00 94       	com	r0
    277c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__negsi2>
    2780:	57 fd       	sbrc	r21, 7
    2782:	07 d0       	rcall	.+14     	; 0x2792 <__divmodsi4_neg2>
    2784:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__udivmodsi4>
    2788:	07 fc       	sbrc	r0, 7
    278a:	03 d0       	rcall	.+6      	; 0x2792 <__divmodsi4_neg2>
    278c:	4e f4       	brtc	.+18     	; 0x27a0 <__divmodsi4_exit>
    278e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__negsi2>

00002792 <__divmodsi4_neg2>:
    2792:	50 95       	com	r21
    2794:	40 95       	com	r20
    2796:	30 95       	com	r19
    2798:	21 95       	neg	r18
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	4f 4f       	sbci	r20, 0xFF	; 255
    279e:	5f 4f       	sbci	r21, 0xFF	; 255

000027a0 <__divmodsi4_exit>:
    27a0:	08 95       	ret

000027a2 <__negsi2>:
    27a2:	90 95       	com	r25
    27a4:	80 95       	com	r24
    27a6:	70 95       	com	r23
    27a8:	61 95       	neg	r22
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	8f 4f       	sbci	r24, 0xFF	; 255
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	08 95       	ret

000027b2 <__muluhisi3>:
    27b2:	0e 94 0e 14 	call	0x281c	; 0x281c <__umulhisi3>
    27b6:	a5 9f       	mul	r26, r21
    27b8:	90 0d       	add	r25, r0
    27ba:	b4 9f       	mul	r27, r20
    27bc:	90 0d       	add	r25, r0
    27be:	a4 9f       	mul	r26, r20
    27c0:	80 0d       	add	r24, r0
    27c2:	91 1d       	adc	r25, r1
    27c4:	11 24       	eor	r1, r1
    27c6:	08 95       	ret

000027c8 <__mulshisi3>:
    27c8:	b7 ff       	sbrs	r27, 7
    27ca:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__muluhisi3>

000027ce <__mulohisi3>:
    27ce:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__muluhisi3>
    27d2:	82 1b       	sub	r24, r18
    27d4:	93 0b       	sbc	r25, r19
    27d6:	08 95       	ret

000027d8 <__udivmodsi4>:
    27d8:	a1 e2       	ldi	r26, 0x21	; 33
    27da:	1a 2e       	mov	r1, r26
    27dc:	aa 1b       	sub	r26, r26
    27de:	bb 1b       	sub	r27, r27
    27e0:	fd 01       	movw	r30, r26
    27e2:	0d c0       	rjmp	.+26     	; 0x27fe <__udivmodsi4_ep>

000027e4 <__udivmodsi4_loop>:
    27e4:	aa 1f       	adc	r26, r26
    27e6:	bb 1f       	adc	r27, r27
    27e8:	ee 1f       	adc	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	a2 17       	cp	r26, r18
    27ee:	b3 07       	cpc	r27, r19
    27f0:	e4 07       	cpc	r30, r20
    27f2:	f5 07       	cpc	r31, r21
    27f4:	20 f0       	brcs	.+8      	; 0x27fe <__udivmodsi4_ep>
    27f6:	a2 1b       	sub	r26, r18
    27f8:	b3 0b       	sbc	r27, r19
    27fa:	e4 0b       	sbc	r30, r20
    27fc:	f5 0b       	sbc	r31, r21

000027fe <__udivmodsi4_ep>:
    27fe:	66 1f       	adc	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	1a 94       	dec	r1
    2808:	69 f7       	brne	.-38     	; 0x27e4 <__udivmodsi4_loop>
    280a:	60 95       	com	r22
    280c:	70 95       	com	r23
    280e:	80 95       	com	r24
    2810:	90 95       	com	r25
    2812:	9b 01       	movw	r18, r22
    2814:	ac 01       	movw	r20, r24
    2816:	bd 01       	movw	r22, r26
    2818:	cf 01       	movw	r24, r30
    281a:	08 95       	ret

0000281c <__umulhisi3>:
    281c:	a2 9f       	mul	r26, r18
    281e:	b0 01       	movw	r22, r0
    2820:	b3 9f       	mul	r27, r19
    2822:	c0 01       	movw	r24, r0
    2824:	a3 9f       	mul	r26, r19
    2826:	70 0d       	add	r23, r0
    2828:	81 1d       	adc	r24, r1
    282a:	11 24       	eor	r1, r1
    282c:	91 1d       	adc	r25, r1
    282e:	b2 9f       	mul	r27, r18
    2830:	70 0d       	add	r23, r0
    2832:	81 1d       	adc	r24, r1
    2834:	11 24       	eor	r1, r1
    2836:	91 1d       	adc	r25, r1
    2838:	08 95       	ret

0000283a <_exit>:
    283a:	f8 94       	cli

0000283c <__stop_program>:
    283c:	ff cf       	rjmp	.-2      	; 0x283c <__stop_program>
