
xmega16e5-plumbus-full.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00802000  00001aa2  00001b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  0080215c  0080215c  00001c92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000748e  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028a5  00000000  00000000  0000948e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e5c  00000000  00000000  0000bd33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  0000db90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003dd3  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a1  00000000  00000000  00012027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__ctors_end>
       4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_3>
      10:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      14:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      18:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      1c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      20:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      24:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      28:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_11>
      30:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_12>
      34:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      38:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      3c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      40:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      44:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      4c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      50:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      54:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      58:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      5c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      60:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      64:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      68:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      6c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      70:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      74:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      78:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      7c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      80:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      84:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      88:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      8c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      90:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      94:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      98:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_38>
      9c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      a8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      ac:	ef 06       	cpc	r14, r31
      ae:	14 06       	cpc	r1, r20
      b0:	1e 06       	cpc	r1, r30
      b2:	25 06       	cpc	r2, r21
      b4:	2c 06       	cpc	r2, r28
      b6:	8c 06       	cpc	r8, r28
      b8:	ea 06       	cpc	r14, r26

000000ba <__trampolines_end>:
	...

000000d0 <portalMainBass>:
      d0:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
      e0:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
      f0:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     100:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     110:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     120:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     130:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     140:	63 5f 5c 57 c0 a8 40 68 a1 40 61 a3 40 63 a8 a1     c_\W..@h.@a.@c..
     150:	a8 40 68 a1 40 61 a3 40 63 a8 9c e3 e1 9c 9d 9f     .@h.@a.@c.......
     160:	a1 e3 a4 b0 ab 40 6b ae 40 6e ab 40 6b ae 40 6e     .....@k.@n.@k.@n
     170:	ab 40 6b ae 40 6e ab 40 6b ee                       .@k.@n.@k.

0000017a <portalIntroExtBass>:
	...

0000017b <portalIntroBass>:
     17b:	c0                                                  .

0000017c <portalMainExtTreble>:
     17c:	02 00 00 04 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000018e <portalMainTreble>:
     18e:	cf 00 4e 4f 51 91 8f 40 93 51 d8 c0 58 91 4f 8e     ..NOQ..@.Q..X.O.
     19e:	40 51 94 93 40 91 58 98 8f 40 00 4e 4f 51 51 cf     @Q..@.X..@.NOQQ.
     1ae:	00 4e 4f 51 91 40 4f 93 40 51 d8 40 c0 91 4f 8e     .NOQ.@O.@Q.@..O.
     1be:	40 51 94 40 53 91 58 53 51 50 51 53 55 80 58 57     @Q.@S.XSQPQSU.XW
     1ce:	95 90 51 53 53 55 53 55 55 40 95 58 57 95 90 4e     ..QSSUSUU@.XW..N
     1de:	50 51 53 53 51 90 90 4e 4c 4b 4b 8c 8e 50 4e 4c     PQSSQ..NLKK..PNL
     1ee:	4c 8e 90 53 55 53 50 50 51 40 51 4f 4f 40 5f 5b     L..SUSPPQ@QOO@_[
     1fe:	5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f 64 5f 5b     _b_[_d_[_b_[_d_[
     20e:	5f 62 5f 5b 5f 64 5f 5b 58 4e 4f 51 51              _b_[_d_[XNOQQ

0000021b <portalIntroExtTreble>:
	...

0000021c <portalIntroTreble>:
     21c:	4e 4f 51 51                                         NOQQ

00000220 <nyanMainExtBass>:
     220:	00 00 00                                            ...

00000223 <nyanMainBass>:
     223:	75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e 7a 78     uisgvjqexlsg:.zx
     233:	76                                                  v

00000234 <nyanIntroExtBass>:
     234:	03                                                  .

00000235 <nyanIntroBass>:
	...

00000237 <nyanMainExtTreble>:
	...

00000252 <nyanMainTreble>:
     252:	4f 4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12     OM.R...VVTS.....
     262:	0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12     .........RO.....
     272:	16 15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16     .......S........
     282:	54 56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14     TVTOM.R...VVTS..
     292:	16 14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12     ............RO..
     2a2:	0f 14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14     ..........S.....
     2b2:	13 14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16     ...TVVV..V......
     2c2:	11 12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e     ....VV..........
     2d2:	1d 1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b     ..V..V..........
     2e2:	56 16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19     V..........VWV..
     2f2:	56 1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16     V..........VV...
     302:	1b 11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16     .........V..V...
     312:	16 14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12     .......V........
     322:	11 0f 56 54                                         ..VT

00000326 <nyanIntroExtTreble>:
     326:	00 00 00 00                                         ....

0000032a <nyanIntroTreble>:
     32a:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
     33a:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 00     ......J.........

0000034a <__ctors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	cd bf       	out	0x3d, r28	; 61
     352:	d7 e2       	ldi	r29, 0x27	; 39
     354:	de bf       	out	0x3e, r29	; 62

00000356 <__do_copy_data>:
     356:	11 e2       	ldi	r17, 0x21	; 33
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e2       	ldi	r27, 0x20	; 32
     35c:	e2 ea       	ldi	r30, 0xA2	; 162
     35e:	fa e1       	ldi	r31, 0x1A	; 26
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x10>
     362:	05 90       	lpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	ac 35       	cpi	r26, 0x5C	; 92
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0xc>

0000036c <__do_clear_bss>:
     36c:	22 e2       	ldi	r18, 0x22	; 34
     36e:	ac e5       	ldi	r26, 0x5C	; 92
     370:	b1 e2       	ldi	r27, 0x21	; 33
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	a4 35       	cpi	r26, 0x54	; 84
     378:	b2 07       	cpc	r27, r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	0e 94 52 07 	call	0xea4	; 0xea4 <main>
     380:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <_exit>

00000384 <__bad_interrupt>:
     384:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000388 <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
	
	while(twi_transfer_complete!=1);

	return 0;
}
     388:	84 e9       	ldi	r24, 0x94	; 148
     38a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
     38e:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
     392:	e1 e8       	ldi	r30, 0x81	; 129
     394:	f4 e0       	ldi	r31, 0x04	; 4
     396:	80 81       	ld	r24, Z
     398:	88 6f       	ori	r24, 0xF8	; 248
     39a:	80 83       	st	Z, r24
     39c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
     3a0:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
     3a4:	e4 e8       	ldi	r30, 0x84	; 132
     3a6:	f4 e0       	ldi	r31, 0x04	; 4
     3a8:	80 81       	ld	r24, Z
     3aa:	8d 6c       	ori	r24, 0xCD	; 205
     3ac:	80 83       	st	Z, r24
     3ae:	08 95       	ret

000003b0 <twi_read>:
     3b0:	40 93 84 21 	sts	0x2184, r20	; 0x802184 <twi_no_of_bytes>
     3b4:	50 93 85 21 	sts	0x2185, r21	; 0x802185 <twi_no_of_bytes+0x1>
     3b8:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <twi_data_count>
     3bc:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <twi_data_count+0x1>
     3c0:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <twi_transfer_complete>
     3c4:	60 93 8b 21 	sts	0x218B, r22	; 0x80218b <twi_data>
     3c8:	70 93 8c 21 	sts	0x218C, r23	; 0x80218c <twi_data+0x1>
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
     3d8:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <twi_transfer_complete>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <twi_read+0x28>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	08 95       	ret

000003e4 <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     3e4:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     3e8:	40 93 84 21 	sts	0x2184, r20	; 0x802184 <twi_no_of_bytes>
     3ec:	50 93 85 21 	sts	0x2185, r21	; 0x802185 <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     3f0:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <twi_data_count>
     3f4:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     3f8:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <twi_transfer_complete>
	
	twi_data=data;
     3fc:	60 93 8b 21 	sts	0x218B, r22	; 0x80218b <twi_data>
     400:	70 93 8c 21 	sts	0x218C, r23	; 0x80218c <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     404:	88 0f       	add	r24, r24
     406:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     40a:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <twi_transfer_complete>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	
	return 0;
}
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	08 95       	ret

00000416 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	2f 93       	push	r18
     422:	3f 93       	push	r19
     424:	4f 93       	push	r20
     426:	5f 93       	push	r21
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     430:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     434:	83 ff       	sbrs	r24, 3
     436:	03 c0       	rjmp	.+6      	; 0x43e <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     43e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     442:	82 fd       	sbrc	r24, 2
     444:	04 c0       	rjmp	.+8      	; 0x44e <__vector_11+0x38>
     446:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     44a:	84 ff       	sbrs	r24, 4
     44c:	08 c0       	rjmp	.+16     	; 0x45e <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     44e:	e3 e8       	ldi	r30, 0x83	; 131
     450:	f4 e0       	ldi	r31, 0x04	; 4
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     45a:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     45e:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <twi_transfer_complete>
     462:	88 23       	and	r24, r24
     464:	31 f0       	breq	.+12     	; 0x472 <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     466:	e4 e8       	ldi	r30, 0x84	; 132
     468:	f4 e0       	ldi	r31, 0x04	; 4
     46a:	80 81       	ld	r24, Z
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	80 83       	st	Z, r24
		return;
     470:	79 c0       	rjmp	.+242    	; 0x564 <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     472:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     476:	86 ff       	sbrs	r24, 6
     478:	47 c0       	rjmp	.+142    	; 0x508 <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     47a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     47e:	84 fd       	sbrc	r24, 4
     480:	43 c0       	rjmp	.+134    	; 0x508 <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     482:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <twi_repeat_mode>
     486:	88 23       	and	r24, r24
     488:	c9 f0       	breq	.+50     	; 0x4bc <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     48a:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <twi_repeat_cmd_sent>
     48e:	88 23       	and	r24, r24
     490:	69 f0       	breq	.+26     	; 0x4ac <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     492:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <twi_repeat_data>
     496:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     49a:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <twi_data_count>
     49e:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <twi_data_count+0x1>
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <twi_data_count>
     4a8:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     4ac:	80 91 8d 21 	lds	r24, 0x218D	; 0x80218d <twi_repeat_cmd>
     4b0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <twi_repeat_cmd_sent>
     4ba:	15 c0       	rjmp	.+42     	; 0x4e6 <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     4bc:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <twi_data>
     4c0:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <twi_data+0x1>
     4c4:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <twi_data_count>
     4c8:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <twi_data_count+0x1>
     4cc:	ac 01       	movw	r20, r24
     4ce:	4f 5f       	subi	r20, 0xFF	; 255
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	40 93 87 21 	sts	0x2187, r20	; 0x802187 <twi_data_count>
     4d6:	50 93 88 21 	sts	0x2188, r21	; 0x802188 <twi_data_count+0x1>
     4da:	f9 01       	movw	r30, r18
     4dc:	e8 0f       	add	r30, r24
     4de:	f9 1f       	adc	r31, r25
     4e0:	80 81       	ld	r24, Z
     4e2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     4e6:	20 91 87 21 	lds	r18, 0x2187	; 0x802187 <twi_data_count>
     4ea:	30 91 88 21 	lds	r19, 0x2188	; 0x802188 <twi_data_count+0x1>
     4ee:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <twi_no_of_bytes>
     4f2:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <twi_no_of_bytes+0x1>
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	31 f4       	brne	.+12     	; 0x508 <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     508:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     50c:	88 23       	and	r24, r24
     50e:	54 f5       	brge	.+84     	; 0x564 <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     510:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <twi_data>
     514:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <twi_data+0x1>
     518:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <twi_data_count>
     51c:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <twi_data_count+0x1>
     520:	ac 01       	movw	r20, r24
     522:	4f 5f       	subi	r20, 0xFF	; 255
     524:	5f 4f       	sbci	r21, 0xFF	; 255
     526:	40 93 87 21 	sts	0x2187, r20	; 0x802187 <twi_data_count>
     52a:	50 93 88 21 	sts	0x2188, r21	; 0x802188 <twi_data_count+0x1>
     52e:	f9 01       	movw	r30, r18
     530:	e8 0f       	add	r30, r24
     532:	f9 1f       	adc	r31, r25
     534:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     538:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     53a:	20 91 87 21 	lds	r18, 0x2187	; 0x802187 <twi_data_count>
     53e:	30 91 88 21 	lds	r19, 0x2188	; 0x802188 <twi_data_count+0x1>
     542:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <twi_no_of_bytes>
     546:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <twi_no_of_bytes+0x1>
     54a:	28 17       	cp	r18, r24
     54c:	39 07       	cpc	r19, r25
     54e:	39 f4       	brne	.+14     	; 0x55e <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     550:	87 e0       	ldi	r24, 0x07	; 7
     552:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <twi_transfer_complete>
     55c:	03 c0       	rjmp	.+6      	; 0x564 <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     564:	ff 91       	pop	r31
     566:	ef 91       	pop	r30
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <expander_read_port>:
	twi_write(addr, cmd, 3);
	last_val = expander_read_ports();
}

uint8_t expander_read_port(uint8_t portAddr)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	00 d0       	rcall	.+0      	; 0x584 <expander_read_port+0x6>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     588:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	be 01       	movw	r22, r28
     590:	6e 5f       	subi	r22, 0xFE	; 254
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <twi_write>
	
	twi_read(addr, &port_val, 1);
     59a:	41 e0       	ldi	r20, 0x01	; 1
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	6f 5f       	subi	r22, 0xFF	; 255
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <twi_read>
	
	return port_val;
	
}
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <expander_read_ports>:

uint16_t expander_read_ports()
{
     5b6:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 bf 02 	call	0x57e	; 0x57e <expander_read_port>
     5be:	c8 2f       	mov	r28, r24
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 bf 02 	call	0x57e	; 0x57e <expander_read_port>
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	98 2f       	mov	r25, r24
     5ca:	88 27       	eor	r24, r24
	return port_data;
	
}
     5cc:	8c 0f       	add	r24, r28
     5ce:	91 1d       	adc	r25, r1
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <expander_init>:
#include "i2c.h"

volatile uint16_t last_val = 0;

void expander_init()
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	00 d0       	rcall	.+0      	; 0x5da <expander_init+0x6>
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     5e0:	0e 94 c4 01 	call	0x388	; 0x388 <twi_init>
	
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     5e4:	86 e0       	ldi	r24, 0x06	; 6
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	8a 83       	std	Y+2, r24	; 0x02
     5ec:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     5ee:	43 e0       	ldi	r20, 0x03	; 3
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	be 01       	movw	r22, r28
     5f4:	6f 5f       	subi	r22, 0xFF	; 255
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	80 e2       	ldi	r24, 0x20	; 32
     5fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <twi_write>
	last_val = expander_read_ports();
     5fe:	0e 94 db 02 	call	0x5b6	; 0x5b6 <expander_read_ports>
     602:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <__data_end>
     606:	90 93 5d 21 	sts	0x215D, r25	; 0x80215d <__data_end+0x1>
}
     60a:	23 96       	adiw	r28, 0x03	; 3
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	de bf       	out	0x3e, r29	; 62
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <get_last_value>:
	
}

uint16_t get_last_value()
{
	return last_val;
     616:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <__data_end>
     61a:	90 91 5d 21 	lds	r25, 0x215D	; 0x80215d <__data_end+0x1>
}
     61e:	08 95       	ret

00000620 <get_val_changed>:

uint8_t get_val_changed()
{
	uint16_t val = expander_read_ports();
     620:	0e 94 db 02 	call	0x5b6	; 0x5b6 <expander_read_ports>
	
	if (val == last_val)
     624:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <__data_end>
     628:	30 91 5d 21 	lds	r19, 0x215D	; 0x80215d <__data_end+0x1>
     62c:	82 17       	cp	r24, r18
     62e:	93 07       	cpc	r25, r19
     630:	99 f0       	breq	.+38     	; 0x658 <get_val_changed+0x38>
	{
		return 0;
	}
	
	if (val > last_val)
     632:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <__data_end>
     636:	30 91 5d 21 	lds	r19, 0x215D	; 0x80215d <__data_end+0x1>
     63a:	28 17       	cp	r18, r24
     63c:	39 07       	cpc	r19, r25
     63e:	30 f4       	brcc	.+12     	; 0x64c <get_val_changed+0x2c>
	{
		last_val = val;
     640:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <__data_end>
     644:	90 93 5d 21 	sts	0x215D, r25	; 0x80215d <__data_end+0x1>
		return 2;		
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	08 95       	ret
	}
	
	last_val = val;
     64c:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <__data_end>
     650:	90 93 5d 21 	sts	0x215D, r25	; 0x80215d <__data_end+0x1>
	return 1;	
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	08 95       	ret
{
	uint16_t val = expander_read_ports();
	
	if (val == last_val)
	{
		return 0;
     658:	80 e0       	ldi	r24, 0x00	; 0
		return 2;		
	}
	
	last_val = val;
	return 1;	
     65a:	08 95       	ret

0000065c <overlay_note_button_leds>:
			leds[i].b = MAX_BRIGHTNESS;
			break;
		}
	}
	offset++;
}
     65c:	60 ff       	sbrs	r22, 0
     65e:	0c c0       	rjmp	.+24     	; 0x678 <overlay_note_button_leds+0x1c>
     660:	fc 01       	movw	r30, r24
     662:	e0 57       	subi	r30, 0x70	; 112
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	10 82       	st	Z, r1
     668:	20 e4       	ldi	r18, 0x40	; 64
     66a:	21 83       	std	Z+1, r18	; 0x01
     66c:	12 82       	std	Z+2, r1	; 0x02
     66e:	33 96       	adiw	r30, 0x03	; 3
     670:	10 82       	st	Z, r1
     672:	21 83       	std	Z+1, r18	; 0x01
     674:	12 82       	std	Z+2, r1	; 0x02
     676:	0a c0       	rjmp	.+20     	; 0x68c <overlay_note_button_leds+0x30>
     678:	fc 01       	movw	r30, r24
     67a:	e0 57       	subi	r30, 0x70	; 112
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	10 82       	st	Z, r1
     680:	11 82       	std	Z+1, r1	; 0x01
     682:	12 82       	std	Z+2, r1	; 0x02
     684:	33 96       	adiw	r30, 0x03	; 3
     686:	10 82       	st	Z, r1
     688:	11 82       	std	Z+1, r1	; 0x01
     68a:	12 82       	std	Z+2, r1	; 0x02
     68c:	61 ff       	sbrs	r22, 1
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <overlay_note_button_leds+0x4c>
     690:	20 e4       	ldi	r18, 0x40	; 64
     692:	fc 01       	movw	r30, r24
     694:	ea 56       	subi	r30, 0x6A	; 106
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	20 83       	st	Z, r18
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	12 82       	std	Z+2, r1	; 0x02
     69e:	33 96       	adiw	r30, 0x03	; 3
     6a0:	20 83       	st	Z, r18
     6a2:	11 82       	std	Z+1, r1	; 0x01
     6a4:	12 82       	std	Z+2, r1	; 0x02
     6a6:	0a c0       	rjmp	.+20     	; 0x6bc <overlay_note_button_leds+0x60>
     6a8:	fc 01       	movw	r30, r24
     6aa:	ea 56       	subi	r30, 0x6A	; 106
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	10 82       	st	Z, r1
     6b0:	11 82       	std	Z+1, r1	; 0x01
     6b2:	12 82       	std	Z+2, r1	; 0x02
     6b4:	33 96       	adiw	r30, 0x03	; 3
     6b6:	10 82       	st	Z, r1
     6b8:	11 82       	std	Z+1, r1	; 0x01
     6ba:	12 82       	std	Z+2, r1	; 0x02
     6bc:	62 ff       	sbrs	r22, 2
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <overlay_note_button_leds+0x7c>
     6c0:	fc 01       	movw	r30, r24
     6c2:	e4 56       	subi	r30, 0x64	; 100
     6c4:	ff 4f       	sbci	r31, 0xFF	; 255
     6c6:	10 82       	st	Z, r1
     6c8:	11 82       	std	Z+1, r1	; 0x01
     6ca:	20 e4       	ldi	r18, 0x40	; 64
     6cc:	22 83       	std	Z+2, r18	; 0x02
     6ce:	33 96       	adiw	r30, 0x03	; 3
     6d0:	10 82       	st	Z, r1
     6d2:	11 82       	std	Z+1, r1	; 0x01
     6d4:	22 83       	std	Z+2, r18	; 0x02
     6d6:	0a c0       	rjmp	.+20     	; 0x6ec <overlay_note_button_leds+0x90>
     6d8:	fc 01       	movw	r30, r24
     6da:	e4 56       	subi	r30, 0x64	; 100
     6dc:	ff 4f       	sbci	r31, 0xFF	; 255
     6de:	10 82       	st	Z, r1
     6e0:	11 82       	std	Z+1, r1	; 0x01
     6e2:	12 82       	std	Z+2, r1	; 0x02
     6e4:	33 96       	adiw	r30, 0x03	; 3
     6e6:	10 82       	st	Z, r1
     6e8:	11 82       	std	Z+1, r1	; 0x01
     6ea:	12 82       	std	Z+2, r1	; 0x02
     6ec:	63 ff       	sbrs	r22, 3
     6ee:	0c c0       	rjmp	.+24     	; 0x708 <overlay_note_button_leds+0xac>
     6f0:	fc 01       	movw	r30, r24
     6f2:	ee 55       	subi	r30, 0x5E	; 94
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	20 e2       	ldi	r18, 0x20	; 32
     6f8:	20 83       	st	Z, r18
     6fa:	21 83       	std	Z+1, r18	; 0x01
     6fc:	12 82       	std	Z+2, r1	; 0x02
     6fe:	33 96       	adiw	r30, 0x03	; 3
     700:	20 83       	st	Z, r18
     702:	21 83       	std	Z+1, r18	; 0x01
     704:	12 82       	std	Z+2, r1	; 0x02
     706:	08 95       	ret
     708:	fc 01       	movw	r30, r24
     70a:	ee 55       	subi	r30, 0x5E	; 94
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	10 82       	st	Z, r1
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	12 82       	std	Z+2, r1	; 0x02
     714:	33 96       	adiw	r30, 0x03	; 3
     716:	10 82       	st	Z, r1
     718:	11 82       	std	Z+1, r1	; 0x01
     71a:	12 82       	std	Z+2, r1	; 0x02
     71c:	08 95       	ret

0000071e <overlay_dingle_pos>:
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ac 01       	movw	r20, r24
     72a:	d0 e0       	ldi	r29, 0x00	; 0
     72c:	42 c0       	rjmp	.+132    	; 0x7b2 <overlay_dingle_pos+0x94>
     72e:	8d 2f       	mov	r24, r29
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	0d 2e       	mov	r0, r29
     738:	02 c0       	rjmp	.+4      	; 0x73e <overlay_dingle_pos+0x20>
     73a:	22 0f       	add	r18, r18
     73c:	33 1f       	adc	r19, r19
     73e:	0a 94       	dec	r0
     740:	e2 f7       	brpl	.-8      	; 0x73a <overlay_dingle_pos+0x1c>
     742:	26 23       	and	r18, r22
     744:	37 23       	and	r19, r23
     746:	23 2b       	or	r18, r19
     748:	99 f5       	brne	.+102    	; 0x7b0 <overlay_dingle_pos+0x92>
     74a:	dd 23       	and	r29, r29
     74c:	29 f0       	breq	.+10     	; 0x758 <overlay_dingle_pos+0x3a>
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	98 2f       	mov	r25, r24
     752:	99 0f       	add	r25, r25
     754:	89 0f       	add	r24, r25
     756:	01 c0       	rjmp	.+2      	; 0x75a <overlay_dingle_pos+0x3c>
     758:	8d e2       	ldi	r24, 0x2D	; 45
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	27 c0       	rjmp	.+78     	; 0x7ac <overlay_dingle_pos+0x8e>
     75e:	9b ea       	ldi	r25, 0xAB	; 171
     760:	89 9f       	mul	r24, r25
     762:	91 2d       	mov	r25, r1
     764:	11 24       	eor	r1, r1
     766:	92 95       	swap	r25
     768:	96 95       	lsr	r25
     76a:	97 70       	andi	r25, 0x07	; 7
     76c:	28 2f       	mov	r18, r24
     76e:	30 e3       	ldi	r19, 0x30	; 48
     770:	93 9f       	mul	r25, r19
     772:	20 19       	sub	r18, r0
     774:	11 24       	eor	r1, r1
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	d9 01       	movw	r26, r18
     77a:	aa 0f       	add	r26, r26
     77c:	bb 1f       	adc	r27, r27
     77e:	2a 0f       	add	r18, r26
     780:	3b 1f       	adc	r19, r27
     782:	da 01       	movw	r26, r20
     784:	a2 0f       	add	r26, r18
     786:	b3 1f       	adc	r27, r19
     788:	2c 2f       	mov	r18, r28
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	f9 01       	movw	r30, r18
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	2e 0f       	add	r18, r30
     794:	3f 1f       	adc	r19, r31
     796:	f9 01       	movw	r30, r18
     798:	e4 5d       	subi	r30, 0xD4	; 212
     79a:	ff 4d       	sbci	r31, 0xDF	; 223
     79c:	c0 80       	ld	r12, Z
     79e:	d1 80       	ldd	r13, Z+1	; 0x01
     7a0:	e2 80       	ldd	r14, Z+2	; 0x02
     7a2:	cd 92       	st	X+, r12
     7a4:	dd 92       	st	X+, r13
     7a6:	ec 92       	st	X, r14
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	cf 5f       	subi	r28, 0xFF	; 255
     7ac:	c7 30       	cpi	r28, 0x07	; 7
     7ae:	b8 f2       	brcs	.-82     	; 0x75e <overlay_dingle_pos+0x40>
     7b0:	df 5f       	subi	r29, 0xFF	; 255
     7b2:	d0 31       	cpi	r29, 0x10	; 16
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <overlay_dingle_pos+0x9a>
     7b6:	bb cf       	rjmp	.-138    	; 0x72e <overlay_dingle_pos+0x10>
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <play_lights_free_play>:

void play_lights_free_play(ws2812drv_led_t * leds, uint16_t dingle_pos, uint8_t buttons)
{
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
     7d8:	6b 01       	movw	r12, r22
     7da:	e4 2e       	mov	r14, r20
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	35 c0       	rjmp	.+106    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	{
		leds[(i + offset) % GRUMBO_LED_COUNT] = rainbow_leds[i % RAINBOW_LED_COUNT];
     7e0:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <offset>
     7e4:	81 2f       	mov	r24, r17
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	84 0f       	add	r24, r20
     7ea:	91 1d       	adc	r25, r1
     7ec:	60 e3       	ldi	r22, 0x30	; 48
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__divmodhi4>
     7f4:	dc 01       	movw	r26, r24
     7f6:	aa 0f       	add	r26, r26
     7f8:	bb 1f       	adc	r27, r27
     7fa:	8a 0f       	add	r24, r26
     7fc:	9b 1f       	adc	r25, r27
     7fe:	de 01       	movw	r26, r28
     800:	a8 0f       	add	r26, r24
     802:	b9 1f       	adc	r27, r25
     804:	9b ea       	ldi	r25, 0xAB	; 171
     806:	49 9f       	mul	r20, r25
     808:	91 2d       	mov	r25, r1
     80a:	11 24       	eor	r1, r1
     80c:	96 95       	lsr	r25
     80e:	96 95       	lsr	r25
     810:	96 95       	lsr	r25
     812:	89 2f       	mov	r24, r25
     814:	88 0f       	add	r24, r24
     816:	98 0f       	add	r25, r24
     818:	89 2f       	mov	r24, r25
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	24 2f       	mov	r18, r20
     820:	28 1b       	sub	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	2e 0f       	add	r18, r30
     82c:	3f 1f       	adc	r19, r31
     82e:	f9 01       	movw	r30, r18
     830:	e8 5f       	subi	r30, 0xF8	; 248
     832:	ff 4d       	sbci	r31, 0xDF	; 223
     834:	60 80       	ld	r6, Z
     836:	71 80       	ldd	r7, Z+1	; 0x01
     838:	82 80       	ldd	r8, Z+2	; 0x02
     83a:	6d 92       	st	X+, r6
     83c:	7d 92       	st	X+, r7
     83e:	8c 92       	st	X, r8
		
		if (offset == GRUMBO_LED_COUNT)
     840:	10 33       	cpi	r17, 0x30	; 48
     842:	11 f4       	brne	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		{
			offset = 0;
     844:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <offset>
	offset++;
}

void play_lights_free_play(ws2812drv_led_t * leds, uint16_t dingle_pos, uint8_t buttons)
{
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     848:	4f 5f       	subi	r20, 0xFF	; 255
     84a:	40 33       	cpi	r20, 0x30	; 48
     84c:	48 f2       	brcs	.-110    	; 0x7e0 <play_lights_free_play+0x1c>
		if (offset == GRUMBO_LED_COUNT)
		{
			offset = 0;
		}
	}
	offset++;
     84e:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <offset>
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <offset>
		
	overlay_note_button_leds(leds, buttons);
     858:	6e 2d       	mov	r22, r14
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 2e 03 	call	0x65c	; 0x65c <overlay_note_button_leds>
	overlay_dingle_pos(leds, dingle_pos);
     860:	b6 01       	movw	r22, r12
     862:	ce 01       	movw	r24, r28
     864:	0e 94 8f 03 	call	0x71e	; 0x71e <overlay_dingle_pos>
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	08 95       	ret

0000087c <play_lights_nyan>:



void play_lights_nyan(ws2812drv_led_t * leds)
{
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
	uint8_t j = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	uint8_t margin = ((half - RAINBOW_LED_COUNT) / 2);
	
	
	if (!(offset % 2))
     882:	20 91 5e 21 	lds	r18, 0x215E	; 0x80215e <offset>
     886:	20 fd       	sbrc	r18, 0
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <play_lights_nyan+0x24>
	{
		
		if (bump > 0)
     88a:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <bump>
     88e:	12 16       	cp	r1, r18
     890:	24 f4       	brge	.+8      	; 0x89a <play_lights_nyan+0x1e>
		{
			bump = -1;
     892:	2f ef       	ldi	r18, 0xFF	; 255
     894:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <bump>
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <play_lights_nyan+0x24>
		}
		else
		{
			bump = 1;
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <bump>
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	6b c0       	rjmp	.+214    	; 0x97c <play_lights_nyan+0x100>
		}
	}
	
	for (i = 0; i < half; i++)
	{
		if (i < margin || i >= half - margin)
     8a6:	46 30       	cpi	r20, 0x06	; 6
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <play_lights_nyan+0x38>
     8aa:	24 2f       	mov	r18, r20
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	22 31       	cpi	r18, 0x12	; 18
     8b0:	31 05       	cpc	r19, r1
     8b2:	2c f1       	brlt	.+74     	; 0x8fe <play_lights_nyan+0x82>
		{
			
			leds[i + bump] = (ws2812drv_led_t)LED_OFF;
     8b4:	e4 2f       	mov	r30, r20
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <bump>
     8bc:	02 2e       	mov	r0, r18
     8be:	00 0c       	add	r0, r0
     8c0:	33 0b       	sbc	r19, r19
     8c2:	df 01       	movw	r26, r30
     8c4:	a2 0f       	add	r26, r18
     8c6:	b3 1f       	adc	r27, r19
     8c8:	bd 01       	movw	r22, r26
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	a6 0f       	add	r26, r22
     8d0:	b7 1f       	adc	r27, r23
     8d2:	a8 0f       	add	r26, r24
     8d4:	b9 1f       	adc	r27, r25
     8d6:	1c 92       	st	X, r1
     8d8:	11 96       	adiw	r26, 0x01	; 1
     8da:	1c 92       	st	X, r1
     8dc:	11 97       	sbiw	r26, 0x01	; 1
     8de:	12 96       	adiw	r26, 0x02	; 2
     8e0:	1c 92       	st	X, r1
			leds[i + half - bump] = (ws2812drv_led_t)LED_OFF;
     8e2:	78 96       	adiw	r30, 0x18	; 24
     8e4:	e2 1b       	sub	r30, r18
     8e6:	f3 0b       	sbc	r31, r19
     8e8:	9f 01       	movw	r18, r30
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	e2 0f       	add	r30, r18
     8f0:	f3 1f       	adc	r31, r19
     8f2:	e8 0f       	add	r30, r24
     8f4:	f9 1f       	adc	r31, r25
     8f6:	10 82       	st	Z, r1
     8f8:	11 82       	std	Z+1, r1	; 0x01
     8fa:	12 82       	std	Z+2, r1	; 0x02
     8fc:	3e c0       	rjmp	.+124    	; 0x97a <play_lights_nyan+0xfe>
		else
		{
			

			
			leds[i + bump] = 	
     8fe:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <bump>
     902:	06 2e       	mov	r0, r22
     904:	00 0c       	add	r0, r0
     906:	77 0b       	sbc	r23, r23
     908:	f9 01       	movw	r30, r18
     90a:	e6 0f       	add	r30, r22
     90c:	f7 1f       	adc	r31, r23
     90e:	df 01       	movw	r26, r30
     910:	aa 0f       	add	r26, r26
     912:	bb 1f       	adc	r27, r27
     914:	ea 0f       	add	r30, r26
     916:	fb 1f       	adc	r31, r27
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
     91c:	10 82       	st	Z, r1
     91e:	a0 e1       	ldi	r26, 0x10	; 16
     920:	a1 83       	std	Z+1, r26	; 0x01
     922:	a2 83       	std	Z+2, r26	; 0x02
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     924:	28 5e       	subi	r18, 0xE8	; 232
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	26 1b       	sub	r18, r22
     92a:	37 0b       	sbc	r19, r23
     92c:	f9 01       	movw	r30, r18
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	2e 0f       	add	r18, r30
     934:	3f 1f       	adc	r19, r31
     936:	fc 01       	movw	r30, r24
     938:	e2 0f       	add	r30, r18
     93a:	f3 1f       	adc	r31, r19
     93c:	2b ea       	ldi	r18, 0xAB	; 171
     93e:	52 9f       	mul	r21, r18
     940:	21 2d       	mov	r18, r1
     942:	11 24       	eor	r1, r1
     944:	26 95       	lsr	r18
     946:	26 95       	lsr	r18
     948:	26 95       	lsr	r18
     94a:	32 2f       	mov	r19, r18
     94c:	33 0f       	add	r19, r19
     94e:	23 0f       	add	r18, r19
     950:	32 2f       	mov	r19, r18
     952:	33 0f       	add	r19, r19
     954:	33 0f       	add	r19, r19
     956:	25 2f       	mov	r18, r21
     958:	23 1b       	sub	r18, r19
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	d9 01       	movw	r26, r18
     95e:	aa 0f       	add	r26, r26
     960:	bb 1f       	adc	r27, r27
     962:	2a 0f       	add	r18, r26
     964:	3b 1f       	adc	r19, r27
     966:	d9 01       	movw	r26, r18
     968:	a8 5f       	subi	r26, 0xF8	; 248
     96a:	bf 4d       	sbci	r27, 0xDF	; 223
     96c:	cd 90       	ld	r12, X+
     96e:	dd 90       	ld	r13, X+
     970:	ec 90       	ld	r14, X
     972:	c0 82       	st	Z, r12
     974:	d1 82       	std	Z+1, r13	; 0x01
     976:	e2 82       	std	Z+2, r14	; 0x02
     978:	5f 5f       	subi	r21, 0xFF	; 255
		{
			bump = 1;
		}
	}
	
	for (i = 0; i < half; i++)
     97a:	4f 5f       	subi	r20, 0xFF	; 255
     97c:	48 31       	cpi	r20, 0x18	; 24
     97e:	08 f4       	brcc	.+2      	; 0x982 <play_lights_nyan+0x106>
     980:	92 cf       	rjmp	.-220    	; 0x8a6 <play_lights_nyan+0x2a>
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
		}
				
	}
	
	leds[margin + bump] = (ws2812drv_led_t)LED_MAX_ON;
     982:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <bump>
     986:	02 2e       	mov	r0, r18
     988:	00 0c       	add	r0, r0
     98a:	33 0b       	sbc	r19, r19
     98c:	a9 01       	movw	r20, r18
     98e:	4a 5f       	subi	r20, 0xFA	; 250
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	fa 01       	movw	r30, r20
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e4 0f       	add	r30, r20
     99a:	f5 1f       	adc	r31, r21
     99c:	e8 0f       	add	r30, r24
     99e:	f9 1f       	adc	r31, r25
     9a0:	40 e1       	ldi	r20, 0x10	; 16
     9a2:	40 83       	st	Z, r20
     9a4:	41 83       	std	Z+1, r20	; 0x01
     9a6:	42 83       	std	Z+2, r20	; 0x02
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)LED_MAX_ON;
     9a8:	2f 5e       	subi	r18, 0xEF	; 239
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	f9 01       	movw	r30, r18
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e2 0f       	add	r30, r18
     9b4:	f3 1f       	adc	r31, r19
     9b6:	e8 0f       	add	r30, r24
     9b8:	f9 1f       	adc	r31, r25
     9ba:	40 83       	st	Z, r20
     9bc:	41 83       	std	Z+1, r20	; 0x01
     9be:	42 83       	std	Z+2, r20	; 0x02
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     9c0:	40 e3       	ldi	r20, 0x30	; 48
     9c2:	2e c0       	rjmp	.+92     	; 0xa20 <play_lights_nyan+0x1a4>
	{

		if (offset % 23)
     9c4:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <offset>
     9c8:	25 e6       	ldi	r18, 0x65	; 101
     9ca:	52 9f       	mul	r21, r18
     9cc:	31 2d       	mov	r19, r1
     9ce:	11 24       	eor	r1, r1
     9d0:	25 2f       	mov	r18, r21
     9d2:	23 1b       	sub	r18, r19
     9d4:	26 95       	lsr	r18
     9d6:	23 0f       	add	r18, r19
     9d8:	22 95       	swap	r18
     9da:	2f 70       	andi	r18, 0x0F	; 15
     9dc:	37 e1       	ldi	r19, 0x17	; 23
     9de:	23 9f       	mul	r18, r19
     9e0:	50 19       	sub	r21, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	55 23       	and	r21, r21
     9e6:	71 f0       	breq	.+28     	; 0xa04 <play_lights_nyan+0x188>
		{
			leds[i] = (ws2812drv_led_t){ .r=0, .g=0, .b = MAX_BRIGHTNESS};
     9e8:	e4 2f       	mov	r30, r20
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	9f 01       	movw	r18, r30
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	e2 0f       	add	r30, r18
     9f4:	f3 1f       	adc	r31, r19
     9f6:	e8 0f       	add	r30, r24
     9f8:	f9 1f       	adc	r31, r25
     9fa:	10 82       	st	Z, r1
     9fc:	11 82       	std	Z+1, r1	; 0x01
     9fe:	20 e4       	ldi	r18, 0x40	; 64
     a00:	22 83       	std	Z+2, r18	; 0x02
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <play_lights_nyan+0x1a2>
		}
		else
		{
			leds[i] = (ws2812drv_led_t)LED_MAX_ON;
     a04:	e4 2f       	mov	r30, r20
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	9f 01       	movw	r18, r30
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19
     a12:	e8 0f       	add	r30, r24
     a14:	f9 1f       	adc	r31, r25
     a16:	20 e1       	ldi	r18, 0x10	; 16
     a18:	20 83       	st	Z, r18
     a1a:	21 83       	std	Z+1, r18	; 0x01
     a1c:	22 83       	std	Z+2, r18	; 0x02
	leds[margin + bump] = (ws2812drv_led_t)LED_MAX_ON;
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)LED_MAX_ON;
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	48 33       	cpi	r20, 0x38	; 56
     a22:	80 f2       	brcs	.-96     	; 0x9c4 <play_lights_nyan+0x148>
		{
			leds[i] = (ws2812drv_led_t)LED_MAX_ON;
		}
	}
	
	offset++;
     a24:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <offset>
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <offset>

}
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	08 95       	ret

00000a36 <play_lights_portal>:

void play_lights_portal(ws2812drv_led_t * leds)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	
	if (offset <= 16)
     a3a:	20 91 5e 21 	lds	r18, 0x215E	; 0x80215e <offset>
     a3e:	21 31       	cpi	r18, 0x11	; 17
     a40:	30 f4       	brcc	.+12     	; 0xa4e <play_lights_portal+0x18>
	{
		bump += 4;
     a42:	30 91 06 20 	lds	r19, 0x2006	; 0x802006 <bump>
     a46:	3c 5f       	subi	r19, 0xFC	; 252
     a48:	30 93 06 20 	sts	0x2006, r19	; 0x802006 <bump>
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <play_lights_portal+0x22>
	}
	else
	{
		bump -= 4;
     a4e:	30 91 06 20 	lds	r19, 0x2006	; 0x802006 <bump>
     a52:	34 50       	subi	r19, 0x04	; 4
     a54:	30 93 06 20 	sts	0x2006, r19	; 0x802006 <bump>
	}
	
	if (offset == 32)
     a58:	20 32       	cpi	r18, 0x20	; 32
     a5a:	11 f4       	brne	.+4      	; 0xa60 <play_lights_portal+0x2a>
	{
		offset = 0;
     a5c:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <offset>
	offset++;

}

void play_lights_portal(ws2812drv_led_t * leds)
{
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	2f c0       	rjmp	.+94     	; 0xac2 <play_lights_portal+0x8c>
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
     a64:	ca 2f       	mov	r28, r26
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	ae 01       	movw	r20, r28
     a6a:	44 0f       	add	r20, r20
     a6c:	55 1f       	adc	r21, r21
     a6e:	fa 01       	movw	r30, r20
     a70:	ec 0f       	add	r30, r28
     a72:	fd 1f       	adc	r31, r29
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
			.r = 0,
			.g = ((i * 2) + bump) / 8,
     a78:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <bump>
     a7c:	62 2f       	mov	r22, r18
     a7e:	22 0f       	add	r18, r18
     a80:	77 0b       	sbc	r23, r23
     a82:	46 0f       	add	r20, r22
     a84:	57 1f       	adc	r21, r23
     a86:	55 23       	and	r21, r21
     a88:	14 f4       	brge	.+4      	; 0xa8e <play_lights_portal+0x58>
     a8a:	49 5f       	subi	r20, 0xF9	; 249
     a8c:	5f 4f       	sbci	r21, 0xFF	; 255
     a8e:	55 95       	asr	r21
     a90:	47 95       	ror	r20
     a92:	55 95       	asr	r21
     a94:	47 95       	ror	r20
     a96:	55 95       	asr	r21
     a98:	47 95       	ror	r20
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
     a9a:	20 e2       	ldi	r18, 0x20	; 32
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	2c 1b       	sub	r18, r28
     aa0:	3d 0b       	sbc	r19, r29
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	26 0f       	add	r18, r22
     aa8:	37 1f       	adc	r19, r23
     aaa:	33 23       	and	r19, r19
     aac:	14 f4       	brge	.+4      	; 0xab2 <play_lights_portal+0x7c>
     aae:	2d 5f       	subi	r18, 0xFD	; 253
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	35 95       	asr	r19
     ab4:	27 95       	ror	r18
     ab6:	35 95       	asr	r19
     ab8:	27 95       	ror	r18
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
     aba:	40 83       	st	Z, r20
     abc:	11 82       	std	Z+1, r1	; 0x01
     abe:	22 83       	std	Z+2, r18	; 0x02
	if (offset == 32)
	{
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
     ac0:	af 5f       	subi	r26, 0xFF	; 255
     ac2:	a8 31       	cpi	r26, 0x18	; 24
     ac4:	78 f2       	brcs	.-98     	; 0xa64 <play_lights_portal+0x2e>
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	38 c0       	rjmp	.+112    	; 0xb3a <play_lights_portal+0x104>
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
     aca:	ac 2f       	mov	r26, r28
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	fd 01       	movw	r30, r26
     ad0:	78 96       	adiw	r30, 0x18	; 24
     ad2:	9f 01       	movw	r18, r30
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	e2 0f       	add	r30, r18
     ada:	f3 1f       	adc	r31, r19
     adc:	e8 0f       	add	r30, r24
     ade:	f9 1f       	adc	r31, r25
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
     ae0:	20 e2       	ldi	r18, 0x20	; 32
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	2a 1b       	sub	r18, r26
     ae6:	3b 0b       	sbc	r19, r27
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <bump>
     af0:	64 2f       	mov	r22, r20
     af2:	44 0f       	add	r20, r20
     af4:	77 0b       	sbc	r23, r23
     af6:	26 0f       	add	r18, r22
     af8:	37 1f       	adc	r19, r23
     afa:	33 23       	and	r19, r19
     afc:	14 f4       	brge	.+4      	; 0xb02 <play_lights_portal+0xcc>
     afe:	2d 5f       	subi	r18, 0xFD	; 253
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	35 95       	asr	r19
     b04:	27 95       	ror	r18
     b06:	35 95       	asr	r19
     b08:	27 95       	ror	r18
			.b = ((GRUMBO_LED_COUNT - (i * 2)) + bump)/16
     b0a:	48 e1       	ldi	r20, 0x18	; 24
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	4a 1b       	sub	r20, r26
     b10:	5b 0b       	sbc	r21, r27
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	46 0f       	add	r20, r22
     b18:	57 1f       	adc	r21, r23
     b1a:	55 23       	and	r21, r21
     b1c:	14 f4       	brge	.+4      	; 0xb22 <play_lights_portal+0xec>
     b1e:	41 5f       	subi	r20, 0xF1	; 241
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	55 95       	asr	r21
     b24:	47 95       	ror	r20
     b26:	55 95       	asr	r21
     b28:	47 95       	ror	r20
     b2a:	55 95       	asr	r21
     b2c:	47 95       	ror	r20
     b2e:	55 95       	asr	r21
     b30:	47 95       	ror	r20
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
     b32:	20 83       	st	Z, r18
     b34:	21 83       	std	Z+1, r18	; 0x01
     b36:	42 83       	std	Z+2, r20	; 0x02
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
		};
		
	}
	
	for (i = 0; i < half; i++)
     b38:	cf 5f       	subi	r28, 0xFF	; 255
     b3a:	c8 31       	cpi	r28, 0x18	; 24
     b3c:	30 f2       	brcs	.-116    	; 0xaca <play_lights_portal+0x94>
			.b = ((GRUMBO_LED_COUNT - (i * 2)) + bump)/16
		};
			
	}
	
	offset++;
     b3e:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <offset>
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <offset>
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <update_display_song_play_cb>:

/***********LED test code end*************/

void update_display_song_play_cb()
{
	if (get_start_mode() == NYAN_sm)
     b4e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_start_mode>
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	29 f4       	brne	.+10     	; 0xb60 <update_display_song_play_cb+0x12>
	{
		play_lights_nyan(leds);
     b56:	8e e8       	ldi	r24, 0x8E	; 142
     b58:	91 e2       	ldi	r25, 0x21	; 33
     b5a:	0e 94 3e 04 	call	0x87c	; 0x87c <play_lights_nyan>
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <update_display_song_play_cb+0x1a>
	}
	else
	{
		play_lights_portal(leds);	
     b60:	8e e8       	ldi	r24, 0x8E	; 142
     b62:	91 e2       	ldi	r25, 0x21	; 33
     b64:	0e 94 1b 05 	call	0xa36	; 0xa36 <play_lights_portal>
	}
	ws2812drv_start_transfer(leds, LED_COUNT);
     b68:	68 e3       	ldi	r22, 0x38	; 56
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	8e e8       	ldi	r24, 0x8E	; 142
     b6e:	91 e2       	ldi	r25, 0x21	; 33
     b70:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <ws2812drv_start_transfer>
     b74:	08 95       	ret

00000b76 <clk_init>:
}

void clk_init()
{
	CCP = CCP_IOREG_gc;
     b76:	88 ed       	ldi	r24, 0xD8	; 216
     b78:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
     b80:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
     b84:	81 ff       	sbrs	r24, 1
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
     b88:	88 ed       	ldi	r24, 0xD8	; 216
     b8a:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
     b92:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
     b94:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
     b98:	08 95       	ret

00000b9a <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     b9a:	87 e0       	ldi	r24, 0x07	; 7
     b9c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
     ba0:	08 95       	ret

00000ba2 <io_init>:

void io_init()
{
	
	//Mode change pin
	PORTA.DIRCLR = PIN0_bm;
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f6 e0       	ldi	r31, 0x06	; 6
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc;
     baa:	88 e1       	ldi	r24, 0x18	; 24
     bac:	80 8b       	std	Z+16, r24	; 0x10

	//Mode indication lights (all off by default)
	PORTD.DIRSET = PIN5_bm | PIN6_bm | PIN7_bm;
     bae:	a0 e6       	ldi	r26, 0x60	; 96
     bb0:	b6 e0       	ldi	r27, 0x06	; 6
     bb2:	80 ee       	ldi	r24, 0xE0	; 224
     bb4:	11 96       	adiw	r26, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTCLR = PIN5_bm | PIN6_bm | PIN7_bm;
     bba:	16 96       	adiw	r26, 0x06	; 6
     bbc:	8c 93       	st	X, r24
	
	//Hall sensor enable (off by default)
	PORTC.DIRSET = PIN7_bm;
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b6 e0       	ldi	r27, 0x06	; 6
     bc2:	80 e8       	ldi	r24, 0x80	; 128
     bc4:	11 96       	adiw	r26, 0x01	; 1
     bc6:	8c 93       	st	X, r24
     bc8:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.OUTCLR = PIN7_bm;
     bca:	16 96       	adiw	r26, 0x06	; 6
     bcc:	8c 93       	st	X, r24
	
	//DACA0 out
	PORTA.DIRSET = PIN2_bm;
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	81 83       	std	Z+1, r24	; 0x01
     bd2:	08 95       	ret

00000bd4 <note_buttons_init>:
}

void note_buttons_init()
{
	//Turn on hall sensors
	PORTC.OUTSET = PIN7_bm;
     bd4:	80 e8       	ldi	r24, 0x80	; 128
     bd6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
	
	//note button
	PORTA.DIRCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     bda:	e0 e0       	ldi	r30, 0x00	; 0
     bdc:	f6 e0       	ldi	r31, 0x06	; 6
     bde:	80 ef       	ldi	r24, 0xF0	; 240
     be0:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
     be2:	88 e1       	ldi	r24, 0x18	; 24
     be4:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_OPC_PULLUP_gc;
     be6:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLUP_gc;
     be8:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLUP_gc;
     bea:	87 8b       	std	Z+23, r24	; 0x17
     bec:	08 95       	ret

00000bee <dingle_input_init>:
}

void dingle_input_init()
{
	expander_init();
     bee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <expander_init>
     bf2:	08 95       	ret

00000bf4 <song_out_init>:
}

void song_out_init()
{
	//TCC5 and TCD5 out 
	PORTC.DIRSET = PIN4_bm; 	
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	PORTD.DIRSET = PIN4_bm;
     bfa:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	//Force dac0 output high 
	PORTA.OUTSET = PIN2_bm;
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
     c04:	08 95       	ret

00000c06 <start_up>:
}

void start_up(uint8_t mode)
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	a2 97       	sbiw	r28, 0x22	; 34
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	de bf       	out	0x3e, r29	; 62
	switch(mode)
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	87 30       	cpi	r24, 0x07	; 7
     c18:	91 05       	cpc	r25, r1
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <start_up+0x18>
     c1c:	e0 c0       	rjmp	.+448    	; 0xdde <start_up+0x1d8>
     c1e:	fc 01       	movw	r30, r24
     c20:	ea 5a       	subi	r30, 0xAA	; 170
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__tablejump2__>
	{
		case STANDBY_sm:
			break;
		case FREEPLAY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
     c28:	80 e1       	ldi	r24, 0x10	; 16
     c2a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
     c2e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <note_buttons_init>
			note_player_init();
     c32:	0e 94 59 08 	call	0x10b2	; 0x10b2 <note_player_init>
			dingle_input_init();
     c36:	0e 94 f7 05 	call	0xbee	; 0xbee <dingle_input_init>
			
			break;
     c3a:	d1 c0       	rjmp	.+418    	; 0xdde <start_up+0x1d8>
		case GAME_EASY_sm:
			note_buttons_init();
     c3c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <note_buttons_init>
			note_player_init();
     c40:	0e 94 59 08 	call	0x10b2	; 0x10b2 <note_player_init>
			dingle_input_init();
     c44:	0e 94 f7 05 	call	0xbee	; 0xbee <dingle_input_init>
			
			break;
     c48:	ca c0       	rjmp	.+404    	; 0xdde <start_up+0x1d8>
		case GAME_HARD_sm:
			note_buttons_init();
     c4a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <note_buttons_init>
			note_player_init();
     c4e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <note_player_init>
			dingle_input_init();
     c52:	0e 94 f7 05 	call	0xbee	; 0xbee <dingle_input_init>
			
			break;
     c56:	c3 c0       	rjmp	.+390    	; 0xdde <start_up+0x1d8>
		case NYAN_sm:
			
			song_out_init();
     c58:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <song_out_init>
			SongInitParams params;
			params.bmp_period = nyanBPMPeriod;
     c5c:	8b ed       	ldi	r24, 0xDB	; 219
     c5e:	95 e3       	ldi	r25, 0x35	; 53
     c60:	89 a3       	std	Y+33, r24	; 0x21
     c62:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = nyanIntroTreble;
     c64:	8a e2       	ldi	r24, 0x2A	; 42
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(nyanIntroTreble);
     c6c:	8f e1       	ldi	r24, 0x1F	; 31
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = nyanIntroExtTreble;
     c74:	86 e2       	ldi	r24, 0x26	; 38
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	9e 83       	std	Y+6, r25	; 0x06
			params.ch0.intro.extension_size = sizeof(nyanIntroExtTreble);
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	8f 83       	std	Y+7, r24	; 0x07
     c82:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = nyanMainTreble;
     c84:	82 e5       	ldi	r24, 0x52	; 82
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	89 87       	std	Y+9, r24	; 0x09
     c8a:	9a 87       	std	Y+10, r25	; 0x0a
			params.ch0.main.track_size = sizeof(nyanMainTreble);
     c8c:	84 ed       	ldi	r24, 0xD4	; 212
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	8b 87       	std	Y+11, r24	; 0x0b
     c92:	9c 87       	std	Y+12, r25	; 0x0c
			params.ch0.main.extension_data = nyanMainExtTreble;
     c94:	87 e3       	ldi	r24, 0x37	; 55
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	8d 87       	std	Y+13, r24	; 0x0d
     c9a:	9e 87       	std	Y+14, r25	; 0x0e
			params.ch0.main.extension_size = sizeof(nyanMainExtTreble);
     c9c:	8b e1       	ldi	r24, 0x1B	; 27
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	8f 87       	std	Y+15, r24	; 0x0f
     ca2:	98 8b       	std	Y+16, r25	; 0x10
			params.ch1.intro.track_data = nyanIntroBass;
     ca4:	85 e3       	ldi	r24, 0x35	; 53
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	89 8b       	std	Y+17, r24	; 0x11
     caa:	9a 8b       	std	Y+18, r25	; 0x12
			params.ch1.intro.track_size = sizeof(nyanIntroBass);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	8b 8b       	std	Y+19, r24	; 0x13
     cb2:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = nyanIntroExtBass;
     cb4:	84 e3       	ldi	r24, 0x34	; 52
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	8d 8b       	std	Y+21, r24	; 0x15
     cba:	9e 8b       	std	Y+22, r25	; 0x16
			params.ch1.intro.extension_size = sizeof(nyanIntroExtBass);			
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	8f 8b       	std	Y+23, r24	; 0x17
     cc2:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = nyanMainBass;
     cc4:	83 e2       	ldi	r24, 0x23	; 35
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	89 8f       	std	Y+25, r24	; 0x19
     cca:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(nyanMainBass);
     ccc:	81 e1       	ldi	r24, 0x11	; 17
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	8b 8f       	std	Y+27, r24	; 0x1b
     cd2:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = nyanMainExtBass;
     cd4:	80 e2       	ldi	r24, 0x20	; 32
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	8d 8f       	std	Y+29, r24	; 0x1d
     cda:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(nyanMainExtBass);
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	8f 8f       	std	Y+31, r24	; 0x1f
     ce2:	98 a3       	std	Y+32, r25	; 0x20
			
			song_player_init(params, update_display_song_play_cb);
     ce4:	87 ea       	ldi	r24, 0xA7	; 167
     ce6:	95 e0       	ldi	r25, 0x05	; 5
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	8d b7       	in	r24, 0x3d	; 61
     cee:	9e b7       	in	r25, 0x3e	; 62
     cf0:	82 97       	sbiw	r24, 0x22	; 34
     cf2:	8d bf       	out	0x3d, r24	; 61
     cf4:	9e bf       	out	0x3e, r25	; 62
     cf6:	ad b7       	in	r26, 0x3d	; 61
     cf8:	be b7       	in	r27, 0x3e	; 62
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	82 e2       	ldi	r24, 0x22	; 34
     cfe:	fe 01       	movw	r30, r28
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	8a 95       	dec	r24
     d08:	e1 f7       	brne	.-8      	; 0xd02 <start_up+0xfc>
     d0a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <song_player_init>
			song_start();
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <song_start>
			
			
			break;
     d16:	63 c0       	rjmp	.+198    	; 0xdde <start_up+0x1d8>
		case PORTAL_sm:
		//TODO: remove test case
			if (get_allow_portal() || 1)
     d18:	0e 94 15 0b 	call	0x162a	; 0x162a <get_allow_portal>
			{
				song_out_init();
     d1c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <song_out_init>
				SongInitParams params;
				params.bmp_period = portalBPMPeriod;
     d20:	89 e0       	ldi	r24, 0x09	; 9
     d22:	9d e3       	ldi	r25, 0x3D	; 61
     d24:	89 a3       	std	Y+33, r24	; 0x21
     d26:	9a a3       	std	Y+34, r25	; 0x22
				params.ch0.intro.track_data = portalIntroTreble;
     d28:	8c e1       	ldi	r24, 0x1C	; 28
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	9a 83       	std	Y+2, r25	; 0x02
				params.ch0.intro.track_size = sizeof(portalIntroTreble);
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	8b 83       	std	Y+3, r24	; 0x03
     d36:	9c 83       	std	Y+4, r25	; 0x04
				params.ch0.intro.extension_data = portalIntroExtTreble;
     d38:	8b e1       	ldi	r24, 0x1B	; 27
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	9e 83       	std	Y+6, r25	; 0x06
				params.ch0.intro.extension_size = sizeof(portalIntroExtTreble);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	98 87       	std	Y+8, r25	; 0x08
				params.ch0.main.track_data = portalMainTreble;
     d48:	2e e8       	ldi	r18, 0x8E	; 142
     d4a:	31 e0       	ldi	r19, 0x01	; 1
     d4c:	29 87       	std	Y+9, r18	; 0x09
     d4e:	3a 87       	std	Y+10, r19	; 0x0a
				params.ch0.main.track_size = sizeof(portalMainTreble);
     d50:	2d e8       	ldi	r18, 0x8D	; 141
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	2b 87       	std	Y+11, r18	; 0x0b
     d56:	3c 87       	std	Y+12, r19	; 0x0c
				params.ch0.main.extension_data = portalMainExtTreble;
     d58:	2c e7       	ldi	r18, 0x7C	; 124
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	2d 87       	std	Y+13, r18	; 0x0d
     d5e:	3e 87       	std	Y+14, r19	; 0x0e
				params.ch0.main.extension_size = sizeof(portalMainExtTreble);
     d60:	22 e1       	ldi	r18, 0x12	; 18
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	2f 87       	std	Y+15, r18	; 0x0f
     d66:	38 8b       	std	Y+16, r19	; 0x10
				params.ch1.intro.track_data = portalIntroBass;
     d68:	2b e7       	ldi	r18, 0x7B	; 123
     d6a:	31 e0       	ldi	r19, 0x01	; 1
     d6c:	29 8b       	std	Y+17, r18	; 0x11
     d6e:	3a 8b       	std	Y+18, r19	; 0x12
				params.ch1.intro.track_size = sizeof(portalIntroBass);
     d70:	8b 8b       	std	Y+19, r24	; 0x13
     d72:	9c 8b       	std	Y+20, r25	; 0x14
				params.ch1.intro.extension_data = portalIntroExtBass;
     d74:	2a e7       	ldi	r18, 0x7A	; 122
     d76:	31 e0       	ldi	r19, 0x01	; 1
     d78:	2d 8b       	std	Y+21, r18	; 0x15
     d7a:	3e 8b       	std	Y+22, r19	; 0x16
				params.ch1.intro.extension_size = sizeof(portalIntroExtBass);
     d7c:	8f 8b       	std	Y+23, r24	; 0x17
     d7e:	98 8f       	std	Y+24, r25	; 0x18
				params.ch1.main.track_data = portalMainBass;
     d80:	80 ed       	ldi	r24, 0xD0	; 208
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	89 8f       	std	Y+25, r24	; 0x19
     d86:	9a 8f       	std	Y+26, r25	; 0x1a
				params.ch1.main.track_size = sizeof(portalMainBass);
     d88:	8a ea       	ldi	r24, 0xAA	; 170
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	8b 8f       	std	Y+27, r24	; 0x1b
     d8e:	9c 8f       	std	Y+28, r25	; 0x1c
				params.ch1.main.extension_data = portalMainExtBass;
     d90:	8a eb       	ldi	r24, 0xBA	; 186
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	8d 8f       	std	Y+29, r24	; 0x1d
     d96:	9e 8f       	std	Y+30, r25	; 0x1e
				params.ch1.main.extension_size = sizeof(portalMainExtBass);
     d98:	86 e1       	ldi	r24, 0x16	; 22
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	8f 8f       	std	Y+31, r24	; 0x1f
     d9e:	98 a3       	std	Y+32, r25	; 0x20
			
				song_player_init(params, update_display_song_play_cb);
     da0:	87 ea       	ldi	r24, 0xA7	; 167
     da2:	95 e0       	ldi	r25, 0x05	; 5
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	8d b7       	in	r24, 0x3d	; 61
     daa:	9e b7       	in	r25, 0x3e	; 62
     dac:	82 97       	sbiw	r24, 0x22	; 34
     dae:	8d bf       	out	0x3d, r24	; 61
     db0:	9e bf       	out	0x3e, r25	; 62
     db2:	ad b7       	in	r26, 0x3d	; 61
     db4:	be b7       	in	r27, 0x3e	; 62
     db6:	11 96       	adiw	r26, 0x01	; 1
     db8:	82 e2       	ldi	r24, 0x22	; 34
     dba:	fe 01       	movw	r30, r28
     dbc:	31 96       	adiw	r30, 0x01	; 1
     dbe:	01 90       	ld	r0, Z+
     dc0:	0d 92       	st	X+, r0
     dc2:	8a 95       	dec	r24
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <start_up+0x1b8>
     dc6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <song_player_init>
				song_start();
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <song_start>
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <start_up+0x1d8>
						
			}
			break;
		case EASER_EGG_sm:
			if (get_allow_easter_egg())
     dd4:	0e 94 18 0b 	call	0x1630	; 0x1630 <get_allow_easter_egg>
     dd8:	81 11       	cpse	r24, r1
			{
				note_buttons_init();
     dda:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <note_buttons_init>
			}
			break;			
	}	
}
     dde:	a2 96       	adiw	r28, 0x22	; 34
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <check_start_mode_pin>:


void check_start_mode_pin()
{
	if (!(PORTA.IN & PIN0_bm))
     dea:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
     dee:	80 fd       	sbrc	r24, 0
     df0:	13 c0       	rjmp	.+38     	; 0xe18 <check_start_mode_pin+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df2:	2f ef       	ldi	r18, 0xFF	; 255
     df4:	80 e7       	ldi	r24, 0x70	; 112
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	21 50       	subi	r18, 0x01	; 1
     dfa:	80 40       	sbci	r24, 0x00	; 0
     dfc:	90 40       	sbci	r25, 0x00	; 0
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <check_start_mode_pin+0xe>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <check_start_mode_pin+0x18>
     e02:	00 00       	nop
	{
		//Simple blocking debounce
		_delay_ms(25);
		if(!(PORTA.IN & PIN0_bm))
     e04:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
     e08:	80 fd       	sbrc	r24, 0
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <check_start_mode_pin+0x2e>
		{
			//Hold until the pin is released.
			while (!(PORTA.IN & PIN0_bm));
     e0c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
     e10:	80 ff       	sbrs	r24, 0
     e12:	fc cf       	rjmp	.-8      	; 0xe0c <check_start_mode_pin+0x22>
			next_start_mode();
     e14:	0e 94 48 0b 	call	0x1690	; 0x1690 <next_start_mode>
     e18:	08 95       	ret

00000e1a <set_startup_mode_lights>:
		}
	}	
}

void set_startup_mode_lights(uint8_t mode)
{
     e1a:	98 2f       	mov	r25, r24
	uint8_t temp = PORTD.OUT & 0x1F;
     e1c:	e0 e6       	ldi	r30, 0x60	; 96
     e1e:	f6 e0       	ldi	r31, 0x06	; 6
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	28 2f       	mov	r18, r24
     e24:	2f 71       	andi	r18, 0x1F	; 31
	temp |= ((mode + 1) << 5);
     e26:	89 2f       	mov	r24, r25
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	82 95       	swap	r24
     e32:	92 95       	swap	r25
     e34:	90 7f       	andi	r25, 0xF0	; 240
     e36:	98 27       	eor	r25, r24
     e38:	80 7f       	andi	r24, 0xF0	; 240
     e3a:	98 27       	eor	r25, r24
     e3c:	82 2b       	or	r24, r18
	PORTD.OUT = temp;
     e3e:	84 83       	std	Z+4, r24	; 0x04
     e40:	08 95       	ret

00000e42 <get_note_buttons>:
}

uint8_t get_note_buttons()
{
	return ((~PORTA.IN) & 0xF0) >> 4;
     e42:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	80 95       	com	r24
     e4a:	90 95       	com	r25
     e4c:	80 7f       	andi	r24, 0xF0	; 240
     e4e:	99 27       	eor	r25, r25
     e50:	95 95       	asr	r25
     e52:	87 95       	ror	r24
     e54:	95 95       	asr	r25
     e56:	87 95       	ror	r24
     e58:	95 95       	asr	r25
     e5a:	87 95       	ror	r24
     e5c:	95 95       	asr	r25
     e5e:	87 95       	ror	r24
}
     e60:	08 95       	ret

00000e62 <check_play_note>:

uint8_t check_play_note()
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
	uint8_t note_buttons = get_note_buttons();
     e66:	0e 94 21 07 	call	0xe42	; 0xe42 <get_note_buttons>
     e6a:	c8 2f       	mov	r28, r24
	uint8_t val_changed = get_val_changed();
     e6c:	0e 94 10 03 	call	0x620	; 0x620 <get_val_changed>
     e70:	d8 2f       	mov	r29, r24
	
	if (note_buttons && val_changed && !(note_played))
     e72:	cc 23       	and	r28, r28
     e74:	79 f0       	breq	.+30     	; 0xe94 <check_play_note+0x32>
     e76:	88 23       	and	r24, r24
     e78:	69 f0       	breq	.+26     	; 0xe94 <check_play_note+0x32>
     e7a:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <note_played>
     e7e:	81 11       	cpse	r24, r1
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <check_play_note+0x32>
	{
		PORTA.OUTTGL = PIN3_bm;
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
		note_played = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 5f 21 	sts	0x215F, r24	; 0x80215f <note_played>
		note_play(note_buttons);		
     e8e:	8c 2f       	mov	r24, r28
     e90:	0e 94 38 08 	call	0x1070	; 0x1070 <note_play>
	}
	
	if (!(val_changed))
     e94:	d1 11       	cpse	r29, r1
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <check_play_note+0x3a>
	{
		note_played = 0;
     e98:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <note_played>
	}
	
	return note_buttons;
}
     e9c:	8c 2f       	mov	r24, r28
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <main>:
int main(void)
{
	uint8_t note_buttons;
	
	//Debug pin
	PORTA.DIRSET = PIN3_bm;
     ea4:	e0 e0       	ldi	r30, 0x00	; 0
     ea6:	f6 e0       	ldi	r31, 0x06	; 6
     ea8:	88 e0       	ldi	r24, 0x08	; 8
     eaa:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN3_bm;
     eac:	86 83       	std	Z+6, r24	; 0x06
	
		
	cli();
     eae:	f8 94       	cli
	clk_init();
     eb0:	0e 94 bb 05 	call	0xb76	; 0xb76 <clk_init>
	interrupt_init();
     eb4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <interrupt_init>
	sei();
     eb8:	78 94       	sei
		
	io_init();
     eba:	0e 94 d1 05 	call	0xba2	; 0xba2 <io_init>
	expander_init();
     ebe:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <expander_init>

	
	//Hold until the pin is released.
	while (!(PORTA.IN & PIN0_bm));
     ec2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
     ec6:	80 ff       	sbrs	r24, 0
     ec8:	fc cf       	rjmp	.-8      	; 0xec2 <main+0x1e>

	start_mode_init();
     eca:	0e 94 2a 0b 	call	0x1654	; 0x1654 <start_mode_init>
	set_startup_mode_lights(get_start_mode());
     ece:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_start_mode>
     ed2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_startup_mode_lights>
	start_up(get_start_mode());	
     ed6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_start_mode>
     eda:	0e 94 03 06 	call	0xc06	; 0xc06 <start_up>
	reset_start_mode_in_eeprom();
     ede:	0e 94 1e 0b 	call	0x163c	; 0x163c <reset_start_mode_in_eeprom>
	
	//Needs to come last. Still not sure why
	ws2812drv_init();
     ee2:	0e 94 84 0b 	call	0x1708	; 0x1708 <ws2812drv_init>

    /* Replace with your application code */
    while (1) 
    {
		//TEMP: move to interrupt handler
		check_start_mode_pin();
     ee6:	0e 94 f5 06 	call	0xdea	; 0xdea <check_start_mode_pin>
		
		if (get_start_mode() == FREEPLAY_sm)
     eea:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_start_mode>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	d1 f7       	brne	.-12     	; 0xee6 <main+0x42>
		{
			note_buttons = check_play_note();
     ef2:	0e 94 31 07 	call	0xe62	; 0xe62 <check_play_note>
     ef6:	c8 2f       	mov	r28, r24
			
			//TEMP: Testing display stuff
			if (display_ctr >= 10)
     ef8:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <display_ctr>
     efc:	90 91 61 21 	lds	r25, 0x2161	; 0x802161 <display_ctr+0x1>
     f00:	0a 97       	sbiw	r24, 0x0a	; 10
     f02:	88 f3       	brcs	.-30     	; 0xee6 <main+0x42>
			{
				//Use the LED array, the last value from the dingle pos, and the note buttons
				play_lights_free_play(leds, get_last_value(), note_buttons);
     f04:	0e 94 0b 03 	call	0x616	; 0x616 <get_last_value>
     f08:	4c 2f       	mov	r20, r28
     f0a:	bc 01       	movw	r22, r24
     f0c:	8e e8       	ldi	r24, 0x8E	; 142
     f0e:	91 e2       	ldi	r25, 0x21	; 33
     f10:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <play_lights_free_play>
				ws2812drv_start_transfer(leds, LED_COUNT);
     f14:	68 e3       	ldi	r22, 0x38	; 56
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	8e e8       	ldi	r24, 0x8E	; 142
     f1a:	91 e2       	ldi	r25, 0x21	; 33
     f1c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <ws2812drv_start_transfer>
				display_ctr = 0;
     f20:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <display_ctr>
     f24:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <display_ctr+0x1>
     f28:	de cf       	rjmp	.-68     	; 0xee6 <main+0x42>

00000f2a <__vector_12>:

    }
}

ISR(TCC4_OVF_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
// 	PORTA.OUTTGL = PIN3_bm;
	song_interrupt_handler();
     f4c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <song_interrupt_handler>
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_3>:

ISR(EDMA_CH0_vect)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	note_interrupt_handler();
     f94:	0e 94 60 08 	call	0x10c0	; 0x10c0 <note_interrupt_handler>
}
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_38>:

ISR(TCD5_CCA_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
	display_ctr++;
     fc8:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <display_ctr>
     fcc:	90 91 61 21 	lds	r25, 0x2161	; 0x802161 <display_ctr+0x1>
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	80 93 60 21 	sts	0x2160, r24	; 0x802160 <display_ctr>
     fd6:	90 93 61 21 	sts	0x2161, r25	; 0x802161 <display_ctr+0x1>
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <note_timer_C5_init>:

uint8_t decay_table_len = sizeof(expDecayVals);

void note_timer_C5_init()
{
	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f8 e0       	ldi	r31, 0x08	; 8
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc;
     ff0:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	80 83       	st	Z, r24
     ff6:	08 95       	ret

00000ff8 <sys_timer_D5_init>:
}

void sys_timer_D5_init()
{
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
     ff8:	e0 e4       	ldi	r30, 0x40	; 64
     ffa:	f9 e0       	ldi	r31, 0x09	; 9
     ffc:	11 82       	std	Z+1, r1	; 0x01
	TCD5.CTRLE = 0;
     ffe:	14 82       	std	Z+4, r1	; 0x04
	TCD5.INTCTRLB = TC_OVFINTLVL_HI_gc;
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	87 83       	std	Z+7, r24	; 0x07
	TCD5.CTRLA = TC_CLKSEL_DIV1024_gc;
    1004:	87 e0       	ldi	r24, 0x07	; 7
    1006:	80 83       	st	Z, r24
	TCD5.PER = 312; //100Hz
    1008:	88 e3       	ldi	r24, 0x38	; 56
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	86 a3       	std	Z+38, r24	; 0x26
    100e:	97 a3       	std	Z+39, r25	; 0x27
    1010:	08 95       	ret

00001012 <note_decay_init>:
}

void note_decay_init()
{
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
    1018:	e0 e0       	ldi	r30, 0x00	; 0
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	80 eb       	ldi	r24, 0xB0	; 176
    101e:	94 e0       	ldi	r25, 0x04	; 4
    1020:	86 a3       	std	Z+38, r24	; 0x26
    1022:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
    1028:	e0 e0       	ldi	r30, 0x00	; 0
    102a:	f3 e0       	ldi	r31, 0x03	; 3
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
    1030:	98 e0       	ldi	r25, 0x08	; 8
    1032:	92 83       	std	Z+2, r25	; 0x02
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
    1034:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	80 83       	st	Z, r24
	
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
    103a:	e0 e0       	ldi	r30, 0x00	; 0
    103c:	f1 e0       	ldi	r31, 0x01	; 1
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	80 8b       	std	Z+16, r24	; 0x10
	EDMA.CH0.ADDRCTRL =
    1042:	81 e3       	ldi	r24, 0x31	; 49
    1044:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
    1046:	85 e1       	ldi	r24, 0x15	; 21
    1048:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	
	EDMA.CH0.CTRLB =
    104a:	83 e1       	ldi	r24, 0x13	; 19
    104c:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction
	
	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
    104e:	80 e8       	ldi	r24, 0x80	; 128
    1050:	80 83       	st	Z, r24
    1052:	08 95       	ret

00001054 <run_note_decay>:
}

void run_note_decay()
{
	
	EDMA.CH0.TRFCNT = decay_table_len;                  // data array has len values
    1054:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <decay_table_len>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	e0 e0       	ldi	r30, 0x00	; 0
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	86 8b       	std	Z+22, r24	; 0x16
    1060:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.ADDR = (uint16_t)expDecayVals;           // this is the source SRAM address
    1062:	81 e4       	ldi	r24, 0x41	; 65
    1064:	90 e2       	ldi	r25, 0x20	; 32
    1066:	80 8f       	std	Z+24, r24	; 0x18
    1068:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.CTRLA =
    106a:	85 e8       	ldi	r24, 0x85	; 133
    106c:	80 8b       	std	Z+16, r24	; 0x10
    106e:	08 95       	ret

00001070 <note_play>:
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
}

void note_play(uint8_t note_index)
{
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + note_index];
    1074:	e8 2f       	mov	r30, r24
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	37 96       	adiw	r30, 0x07	; 7
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	e5 5a       	subi	r30, 0xA5	; 165
    1080:	ff 4d       	sbci	r31, 0xDF	; 223
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	c0 e4       	ldi	r28, 0x40	; 64
    1088:	d8 e0       	ldi	r29, 0x08	; 8
    108a:	88 a7       	std	Y+40, r24	; 0x28
    108c:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay();
    108e:	0e 94 2a 08 	call	0x1054	; 0x1054 <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	88 83       	st	Y, r24
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <reset_play>:

void reset_play()
{

	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
    109c:	e0 e0       	ldi	r30, 0x00	; 0
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	81 89       	ldd	r24, Z+17	; 0x11
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
    10a6:	e0 e4       	ldi	r30, 0x40	; 64
    10a8:	f8 e0       	ldi	r31, 0x08	; 8
    10aa:	10 a2       	std	Z+32, r1	; 0x20
    10ac:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
    10ae:	10 82       	st	Z, r1
    10b0:	08 95       	ret

000010b2 <note_player_init>:
}

void note_player_init()
{
	note_timer_C5_init();
    10b2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <note_timer_C5_init>
	sys_timer_D5_init();
    10b6:	0e 94 fc 07 	call	0xff8	; 0xff8 <sys_timer_D5_init>
	note_decay_init();
    10ba:	0e 94 09 08 	call	0x1012	; 0x1012 <note_decay_init>
    10be:	08 95       	ret

000010c0 <note_interrupt_handler>:
}

void note_interrupt_handler()
{
	reset_play();
    10c0:	0e 94 4e 08 	call	0x109c	; 0x109c <reset_play>
    10c4:	08 95       	ret

000010c6 <beat_timer_C4_init>:
void (*update_display_callback_ptr)();

void beat_timer_C4_init(uint16_t per)
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    10c6:	e0 e0       	ldi	r30, 0x00	; 0
    10c8:	f8 e0       	ldi	r31, 0x08	; 8
    10ca:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
    10cc:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
    10ce:	23 e0       	ldi	r18, 0x03	; 3
    10d0:	26 83       	std	Z+6, r18	; 0x06
	TCC4.CTRLA = 0;
    10d2:	10 82       	st	Z, r1
	TCC4.PER = per;
    10d4:	86 a3       	std	Z+38, r24	; 0x26
    10d6:	97 a3       	std	Z+39, r25	; 0x27
    10d8:	08 95       	ret

000010da <note_0_timer_C5_init>:

//Channel 0 Counter
void note_0_timer_C5_init()
{

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    10da:	e0 e4       	ldi	r30, 0x40	; 64
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc; 
    10e2:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	80 83       	st	Z, r24
    10e8:	08 95       	ret

000010ea <note_1_timer_D5_init>:

//Channel 1 Counter
void note_1_timer_D5_init()
{
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    10ea:	e0 e4       	ldi	r30, 0x40	; 64
    10ec:	f9 e0       	ldi	r31, 0x09	; 9
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc;
    10f2:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	80 83       	st	Z, r24
    10f8:	08 95       	ret

000010fa <set_note_and_beat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t set_note_and_beat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	6c 01       	movw	r12, r24
    110c:	e9 01       	movw	r28, r18
    110e:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	f6 01       	movw	r30, r12
    1114:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
    1116:	88 81       	ld	r24, Y
    1118:	99 81       	ldd	r25, Y+1	; 0x01
    111a:	68 0f       	add	r22, r24
    111c:	79 1f       	adc	r23, r25
    111e:	fb 01       	movw	r30, r22
    1120:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
    1122:	89 2f       	mov	r24, r25
    1124:	82 95       	swap	r24
    1126:	86 95       	lsr	r24
    1128:	86 95       	lsr	r24
    112a:	83 70       	andi	r24, 0x03	; 3
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <set_note_and_beat+0x3c>
    1132:	66 0f       	add	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <set_note_and_beat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
    113a:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
    113c:	f8 01       	movw	r30, r16
    113e:	20 81       	ld	r18, Z
    1140:	31 81       	ldd	r19, Z+1	; 0x01
    1142:	42 0f       	add	r20, r18
    1144:	53 1f       	adc	r21, r19
    1146:	fa 01       	movw	r30, r20
    1148:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	0c 90       	ld	r0, X
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <set_note_and_beat+0x5a>
    1150:	35 95       	asr	r19
    1152:	27 95       	ror	r18
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <set_note_and_beat+0x56>
    1158:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
    115a:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
    115c:	f6 01       	movw	r30, r12
    115e:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
    1160:	9f 73       	andi	r25, 0x3F	; 63
    1162:	89 2f       	mov	r24, r25
    1164:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	51 f0       	breq	.+20     	; 0x117e <set_note_and_beat+0x84>
	{
		count = noteClocks[index] / 2;
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	fc 01       	movw	r30, r24
    1170:	e5 52       	subi	r30, 0x25	; 37
    1172:	ff 4d       	sbci	r31, 0xDF	; 223
    1174:	40 81       	ld	r20, Z
    1176:	51 81       	ldd	r21, Z+1	; 0x01
    1178:	56 95       	lsr	r21
    117a:	47 95       	ror	r20
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <set_note_and_beat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
    1182:	28 81       	ld	r18, Y
    1184:	39 81       	ldd	r19, Y+1	; 0x01
    1186:	2f 5f       	subi	r18, 0xFF	; 255
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	28 83       	st	Y, r18
    118c:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
    118e:	9c 91       	ld	r25, X
    1190:	9f 5f       	subi	r25, 0xFF	; 255
    1192:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
    1194:	98 30       	cpi	r25, 0x08	; 8
    1196:	39 f4       	brne	.+14     	; 0x11a6 <set_note_and_beat+0xac>
	{
		*extBitPosPtr = 0;
    1198:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
    119a:	f8 01       	movw	r30, r16
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	80 83       	st	Z, r24
    11a4:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
    11a6:	ca 01       	movw	r24, r20
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	08 95       	ret

000011ba <set_ch0_note_and_beat>:


//Uses the current note indexes for treble
void set_ch0_note_and_beat()
{
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = set_note_and_beat(&noteCh0BeatCount, ch0Track, ch0Ext, &noteCh0Index, &noteCh0ExtIndex, &noteCh0ExtBitPos);
    11c2:	40 91 3a 22 	lds	r20, 0x223A	; 0x80223a <ch0Ext>
    11c6:	50 91 3b 22 	lds	r21, 0x223B	; 0x80223b <ch0Ext+0x1>
    11ca:	60 91 4c 22 	lds	r22, 0x224C	; 0x80224c <ch0Track>
    11ce:	70 91 4d 22 	lds	r23, 0x224D	; 0x80224d <ch0Track+0x1>
    11d2:	0f 2e       	mov	r0, r31
    11d4:	f9 e7       	ldi	r31, 0x79	; 121
    11d6:	ef 2e       	mov	r14, r31
    11d8:	f1 e2       	ldi	r31, 0x21	; 33
    11da:	ff 2e       	mov	r15, r31
    11dc:	f0 2d       	mov	r31, r0
    11de:	0a e7       	ldi	r16, 0x7A	; 122
    11e0:	11 e2       	ldi	r17, 0x21	; 33
    11e2:	2c e7       	ldi	r18, 0x7C	; 124
    11e4:	31 e2       	ldi	r19, 0x21	; 33
    11e6:	88 e7       	ldi	r24, 0x78	; 120
    11e8:	91 e2       	ldi	r25, 0x21	; 33
    11ea:	0e 94 7d 08 	call	0x10fa	; 0x10fa <set_note_and_beat>
    11ee:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
    11f2:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	08 95       	ret

00001200 <set_ch1_note_and_beat>:

//Uses the current note indexes for Bass
void set_ch1_note_and_beat()
{
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = set_note_and_beat(&noteCh1BeatCount, ch1Track, ch1Ext, &noteCh1Index, &noteCh1ExtIndex, &noteCh1ExtBitPos);
    1208:	40 91 4e 22 	lds	r20, 0x224E	; 0x80224e <ch1Ext>
    120c:	50 91 4f 22 	lds	r21, 0x224F	; 0x80224f <ch1Ext+0x1>
    1210:	60 91 4a 22 	lds	r22, 0x224A	; 0x80224a <ch1Track>
    1214:	70 91 4b 22 	lds	r23, 0x224B	; 0x80224b <ch1Track+0x1>
    1218:	0f 2e       	mov	r0, r31
    121a:	fa e6       	ldi	r31, 0x6A	; 106
    121c:	ef 2e       	mov	r14, r31
    121e:	f1 e2       	ldi	r31, 0x21	; 33
    1220:	ff 2e       	mov	r15, r31
    1222:	f0 2d       	mov	r31, r0
    1224:	0b e6       	ldi	r16, 0x6B	; 107
    1226:	11 e2       	ldi	r17, 0x21	; 33
    1228:	2d e6       	ldi	r18, 0x6D	; 109
    122a:	31 e2       	ldi	r19, 0x21	; 33
    122c:	89 e6       	ldi	r24, 0x69	; 105
    122e:	91 e2       	ldi	r25, 0x21	; 33
    1230:	0e 94 7d 08 	call	0x10fa	; 0x10fa <set_note_and_beat>
    1234:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
    1238:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <song_init>:

void song_init()
{
	if (hasCh0Intro)
    1246:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <hasCh0Intro>
    124a:	88 23       	and	r24, r24
    124c:	99 f0       	breq	.+38     	; 0x1274 <song_init+0x2e>
	{
		isCh0Intro = 1;
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <isCh0Intro>
		ch0Track = ch0IntroTrack;
    1254:	20 91 3e 22 	lds	r18, 0x223E	; 0x80223e <ch0IntroTrack>
    1258:	30 91 3f 22 	lds	r19, 0x223F	; 0x80223f <ch0IntroTrack+0x1>
    125c:	20 93 4c 22 	sts	0x224C, r18	; 0x80224c <ch0Track>
    1260:	30 93 4d 22 	sts	0x224D, r19	; 0x80224d <ch0Track+0x1>
		ch0Ext = ch0IntroExt;
    1264:	20 91 44 22 	lds	r18, 0x2244	; 0x802244 <ch0IntroExt>
    1268:	30 91 45 22 	lds	r19, 0x2245	; 0x802245 <ch0IntroExt+0x1>
    126c:	20 93 3a 22 	sts	0x223A, r18	; 0x80223a <ch0Ext>
    1270:	30 93 3b 22 	sts	0x223B, r19	; 0x80223b <ch0Ext+0x1>
	}

	if (!(hasCh0Intro) && hasCh0Main)
    1274:	81 11       	cpse	r24, r1
    1276:	16 c0       	rjmp	.+44     	; 0x12a4 <song_init+0x5e>
    1278:	90 91 7e 21 	lds	r25, 0x217E	; 0x80217e <hasCh0Main>
    127c:	99 23       	and	r25, r25
    127e:	91 f0       	breq	.+36     	; 0x12a4 <song_init+0x5e>
	{
		isCh0Intro = 0;
    1280:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <isCh0Intro>
		ch0Track = ch0MainTrack;
    1284:	20 91 3c 22 	lds	r18, 0x223C	; 0x80223c <ch0MainTrack>
    1288:	30 91 3d 22 	lds	r19, 0x223D	; 0x80223d <ch0MainTrack+0x1>
    128c:	20 93 4c 22 	sts	0x224C, r18	; 0x80224c <ch0Track>
    1290:	30 93 4d 22 	sts	0x224D, r19	; 0x80224d <ch0Track+0x1>
		ch0Ext = ch0MainExt;
    1294:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <ch0MainExt>
    1298:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <ch0MainExt+0x1>
    129c:	20 93 3a 22 	sts	0x223A, r18	; 0x80223a <ch0Ext>
    12a0:	30 93 3b 22 	sts	0x223B, r19	; 0x80223b <ch0Ext+0x1>
	}

	noteCh0BeatCount = 0;
    12a4:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <noteCh0BeatCount>
	noteCh0Index = 0;
    12a8:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <noteCh0Index>
    12ac:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <noteCh0Index+0x1>
	noteCh0ExtIndex = 0;
    12b0:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <noteCh0ExtIndex>
    12b4:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <noteCh0ExtIndex+0x1>
	noteCh0ExtBitPos = 0;
    12b8:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <noteCh0ExtBitPos>
	
	if (hasCh1Intro)
    12bc:	90 91 70 21 	lds	r25, 0x2170	; 0x802170 <hasCh1Intro>
    12c0:	99 23       	and	r25, r25
    12c2:	99 f0       	breq	.+38     	; 0x12ea <song_init+0xa4>
	{
		isCh1Intro = 1;
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	20 93 62 21 	sts	0x2162, r18	; 0x802162 <isCh1Intro>
		ch1Track = ch1IntroTrack;
    12ca:	20 91 48 22 	lds	r18, 0x2248	; 0x802248 <ch1IntroTrack>
    12ce:	30 91 49 22 	lds	r19, 0x2249	; 0x802249 <ch1IntroTrack+0x1>
    12d2:	20 93 4a 22 	sts	0x224A, r18	; 0x80224a <ch1Track>
    12d6:	30 93 4b 22 	sts	0x224B, r19	; 0x80224b <ch1Track+0x1>
		ch1Ext = ch1IntroExt;
    12da:	20 91 36 22 	lds	r18, 0x2236	; 0x802236 <ch1IntroExt>
    12de:	30 91 37 22 	lds	r19, 0x2237	; 0x802237 <ch1IntroExt+0x1>
    12e2:	20 93 4e 22 	sts	0x224E, r18	; 0x80224e <ch1Ext>
    12e6:	30 93 4f 22 	sts	0x224F, r19	; 0x80224f <ch1Ext+0x1>
	}

	if (!(hasCh1Intro) && hasCh1Main)
    12ea:	91 11       	cpse	r25, r1
    12ec:	16 c0       	rjmp	.+44     	; 0x131a <song_init+0xd4>
    12ee:	90 91 6f 21 	lds	r25, 0x216F	; 0x80216f <hasCh1Main>
    12f2:	99 23       	and	r25, r25
    12f4:	91 f0       	breq	.+36     	; 0x131a <song_init+0xd4>
	{
		isCh1Intro = 0;
    12f6:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <isCh1Intro>
		ch1Track = ch1MainTrack;
    12fa:	20 91 46 22 	lds	r18, 0x2246	; 0x802246 <ch1MainTrack>
    12fe:	30 91 47 22 	lds	r19, 0x2247	; 0x802247 <ch1MainTrack+0x1>
    1302:	20 93 4a 22 	sts	0x224A, r18	; 0x80224a <ch1Track>
    1306:	30 93 4b 22 	sts	0x224B, r19	; 0x80224b <ch1Track+0x1>
		ch1Ext = ch1MainExt;
    130a:	20 91 40 22 	lds	r18, 0x2240	; 0x802240 <ch1MainExt>
    130e:	30 91 41 22 	lds	r19, 0x2241	; 0x802241 <ch1MainExt+0x1>
    1312:	20 93 4e 22 	sts	0x224E, r18	; 0x80224e <ch1Ext>
    1316:	30 93 4f 22 	sts	0x224F, r19	; 0x80224f <ch1Ext+0x1>
	}

	noteCh1BeatCount = 0;
    131a:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <noteCh1BeatCount>
	noteCh1Index = 0;
    131e:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <noteCh1Index>
    1322:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <noteCh1Index+0x1>
	noteCh1ExtIndex = 0;
    1326:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <noteCh1ExtIndex>
    132a:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <noteCh1ExtIndex+0x1>
	noteCh1ExtBitPos = 0;
    132e:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <noteCh1ExtBitPos>
	
	if (hasCh0Intro || hasCh0Main)
    1332:	81 11       	cpse	r24, r1
    1334:	03 c0       	rjmp	.+6      	; 0x133c <song_init+0xf6>
    1336:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <hasCh0Main>
    133a:	81 11       	cpse	r24, r1
	{
		set_ch0_note_and_beat();
    133c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <set_ch0_note_and_beat>
	}
	
	if (hasCh1Intro || hasCh1Main)
    1340:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <hasCh1Intro>
    1344:	81 11       	cpse	r24, r1
    1346:	03 c0       	rjmp	.+6      	; 0x134e <song_init+0x108>
    1348:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <hasCh1Main>
    134c:	81 11       	cpse	r24, r1
	{
		set_ch1_note_and_beat();
    134e:	0e 94 00 09 	call	0x1200	; 0x1200 <set_ch1_note_and_beat>
    1352:	08 95       	ret

00001354 <load_track_into_mem>:
	}
	
}

void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	1f 92       	push	r1
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	6c 01       	movw	r12, r24
    136c:	7b 01       	movw	r14, r22
    136e:	8a 01       	movw	r16, r20
	*dest = (uint8_t *)malloc(size);
    1370:	ca 01       	movw	r24, r20
    1372:	0e 94 10 0c 	call	0x1820	; 0x1820 <malloc>
    1376:	d7 01       	movw	r26, r14
    1378:	8d 93       	st	X+, r24
    137a:	9c 93       	st	X, r25
	volatile uint8_t temp;
	uint16_t i = 0;
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
	for(;i<size;i++)
    1380:	0d c0       	rjmp	.+26     	; 0x139c <load_track_into_mem+0x48>
	{
		temp =pgm_read_byte(source + i);
    1382:	f6 01       	movw	r30, r12
    1384:	e8 0f       	add	r30, r24
    1386:	f9 1f       	adc	r31, r25
    1388:	e4 91       	lpm	r30, Z
    138a:	e9 83       	std	Y+1, r30	; 0x01
		(*dest)[i] = temp;
    138c:	d7 01       	movw	r26, r14
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	e8 0f       	add	r30, r24
    1394:	f9 1f       	adc	r31, r25
    1396:	29 81       	ldd	r18, Y+1	; 0x01
    1398:	20 83       	st	Z, r18
void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
	*dest = (uint8_t *)malloc(size);
	volatile uint8_t temp;
	uint16_t i = 0;
	for(;i<size;i++)
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	80 17       	cp	r24, r16
    139e:	91 07       	cpc	r25, r17
    13a0:	80 f3       	brcs	.-32     	; 0x1382 <load_track_into_mem+0x2e>
	{
		temp =pgm_read_byte(source + i);
		(*dest)[i] = temp;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	08 95       	ret

000013b6 <song_player_init>:

void song_player_init(SongInitParams initParams, void (*update_display_cb)())
{
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	update_display_callback_ptr = update_display_cb;
    13c2:	89 a5       	ldd	r24, Y+41	; 0x29
    13c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13c6:	80 93 42 22 	sts	0x2242, r24	; 0x802242 <update_display_callback_ptr>
    13ca:	90 93 43 22 	sts	0x2243, r25	; 0x802243 <update_display_callback_ptr+0x1>
	
	beat_timer_C4_init(initParams.bmp_period);
    13ce:	8f a1       	ldd	r24, Y+39	; 0x27
    13d0:	98 a5       	ldd	r25, Y+40	; 0x28
    13d2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <beat_timer_C4_init>
	note_0_timer_C5_init();
    13d6:	0e 94 6d 08 	call	0x10da	; 0x10da <note_0_timer_C5_init>
	note_1_timer_D5_init();	
    13da:	0e 94 75 08 	call	0x10ea	; 0x10ea <note_1_timer_D5_init>
	
	if (initParams.ch0.main.track_data)
    13de:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e0:	98 89       	ldd	r25, Y+16	; 0x10
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	d1 f0       	breq	.+52     	; 0x141a <song_player_init+0x64>
	{
		hasCh0Main = 1;
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	20 93 7e 21 	sts	0x217E, r18	; 0x80217e <hasCh0Main>
		load_track_into_mem(initParams.ch0.main.track_data, &ch0MainTrack, initParams.ch0.main.track_size);
    13ec:	09 89       	ldd	r16, Y+17	; 0x11
    13ee:	1a 89       	ldd	r17, Y+18	; 0x12
    13f0:	a8 01       	movw	r20, r16
    13f2:	6c e3       	ldi	r22, 0x3C	; 60
    13f4:	72 e2       	ldi	r23, 0x22	; 34
    13f6:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		load_track_into_mem(initParams.ch0.main.extension_data, &ch0MainExt, initParams.ch0.main.extension_size);
    13fa:	4d 89       	ldd	r20, Y+21	; 0x15
    13fc:	5e 89       	ldd	r21, Y+22	; 0x16
    13fe:	68 e3       	ldi	r22, 0x38	; 56
    1400:	72 e2       	ldi	r23, 0x22	; 34
    1402:	8b 89       	ldd	r24, Y+19	; 0x13
    1404:	9c 89       	ldd	r25, Y+20	; 0x14
    1406:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		ch0MainNoteCount = initParams.ch0.main.track_size;
    140a:	00 93 74 21 	sts	0x2174, r16	; 0x802174 <ch0MainNoteCount>
    140e:	10 93 75 21 	sts	0x2175, r17	; 0x802175 <ch0MainNoteCount+0x1>
		ch0NoteCount = ch0MainNoteCount;
    1412:	00 93 72 21 	sts	0x2172, r16	; 0x802172 <ch0NoteCount>
    1416:	10 93 73 21 	sts	0x2173, r17	; 0x802173 <ch0NoteCount+0x1>
	
	//Note: Checking the main track stuff first so that we can set values here that can be overwritten if intro track
	//information is present without the need for more conditionals	
	
	//First copy over data from progmem
	if (initParams.ch0.intro.track_data)
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	d1 f0       	breq	.+52     	; 0x1456 <song_player_init+0xa0>
	{
		hasCh0Intro = 1;
    1422:	21 e0       	ldi	r18, 0x01	; 1
    1424:	20 93 7f 21 	sts	0x217F, r18	; 0x80217f <hasCh0Intro>
		load_track_into_mem(initParams.ch0.intro.track_data, &ch0IntroTrack, initParams.ch0.intro.track_size);
    1428:	09 85       	ldd	r16, Y+9	; 0x09
    142a:	1a 85       	ldd	r17, Y+10	; 0x0a
    142c:	a8 01       	movw	r20, r16
    142e:	6e e3       	ldi	r22, 0x3E	; 62
    1430:	72 e2       	ldi	r23, 0x22	; 34
    1432:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		load_track_into_mem(initParams.ch0.intro.extension_data, &ch0IntroExt, initParams.ch0.intro.extension_size);
    1436:	4d 85       	ldd	r20, Y+13	; 0x0d
    1438:	5e 85       	ldd	r21, Y+14	; 0x0e
    143a:	64 e4       	ldi	r22, 0x44	; 68
    143c:	72 e2       	ldi	r23, 0x22	; 34
    143e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1440:	9c 85       	ldd	r25, Y+12	; 0x0c
    1442:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		ch0IntroNoteCount = initParams.ch0.intro.track_size;		
    1446:	00 93 76 21 	sts	0x2176, r16	; 0x802176 <ch0IntroNoteCount>
    144a:	10 93 77 21 	sts	0x2177, r17	; 0x802177 <ch0IntroNoteCount+0x1>
		ch0NoteCount = ch0IntroNoteCount;
    144e:	00 93 72 21 	sts	0x2172, r16	; 0x802172 <ch0NoteCount>
    1452:	10 93 73 21 	sts	0x2173, r17	; 0x802173 <ch0NoteCount+0x1>
	}
	
	if (initParams.ch1.main.track_data)
    1456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1458:	98 a1       	ldd	r25, Y+32	; 0x20
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	d1 f0       	breq	.+52     	; 0x1492 <song_player_init+0xdc>
	{
		hasCh1Main = 1;
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	20 93 6f 21 	sts	0x216F, r18	; 0x80216f <hasCh1Main>
		load_track_into_mem(initParams.ch1.main.track_data, &ch1MainTrack, initParams.ch1.main.track_size);
    1464:	09 a1       	ldd	r16, Y+33	; 0x21
    1466:	1a a1       	ldd	r17, Y+34	; 0x22
    1468:	a8 01       	movw	r20, r16
    146a:	66 e4       	ldi	r22, 0x46	; 70
    146c:	72 e2       	ldi	r23, 0x22	; 34
    146e:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		load_track_into_mem(initParams.ch1.main.extension_data, &ch1MainExt, initParams.ch1.main.extension_size);
    1472:	4d a1       	ldd	r20, Y+37	; 0x25
    1474:	5e a1       	ldd	r21, Y+38	; 0x26
    1476:	60 e4       	ldi	r22, 0x40	; 64
    1478:	72 e2       	ldi	r23, 0x22	; 34
    147a:	8b a1       	ldd	r24, Y+35	; 0x23
    147c:	9c a1       	ldd	r25, Y+36	; 0x24
    147e:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		ch1MainNoteCount = initParams.ch1.main.track_size;
    1482:	00 93 65 21 	sts	0x2165, r16	; 0x802165 <ch1MainNoteCount>
    1486:	10 93 66 21 	sts	0x2166, r17	; 0x802166 <ch1MainNoteCount+0x1>
		ch1NoteCount = ch1MainNoteCount;
    148a:	00 93 63 21 	sts	0x2163, r16	; 0x802163 <ch1NoteCount>
    148e:	10 93 64 21 	sts	0x2164, r17	; 0x802164 <ch1NoteCount+0x1>
	}
	
	if (initParams.ch1.intro.track_data)
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	d1 f0       	breq	.+52     	; 0x14ce <song_player_init+0x118>
	{
		hasCh1Intro = 1;
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	20 93 70 21 	sts	0x2170, r18	; 0x802170 <hasCh1Intro>
		load_track_into_mem(initParams.ch1.intro.track_data, &ch1IntroTrack, initParams.ch1.intro.track_size);
    14a0:	09 8d       	ldd	r16, Y+25	; 0x19
    14a2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    14a4:	a8 01       	movw	r20, r16
    14a6:	68 e4       	ldi	r22, 0x48	; 72
    14a8:	72 e2       	ldi	r23, 0x22	; 34
    14aa:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		load_track_into_mem(initParams.ch1.intro.extension_data, &ch1IntroExt, initParams.ch1.intro.extension_size);
    14ae:	4d 8d       	ldd	r20, Y+29	; 0x1d
    14b0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    14b2:	66 e3       	ldi	r22, 0x36	; 54
    14b4:	72 e2       	ldi	r23, 0x22	; 34
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	0e 94 aa 09 	call	0x1354	; 0x1354 <load_track_into_mem>
		ch1IntroNoteCount = initParams.ch1.intro.track_size;		
    14be:	00 93 67 21 	sts	0x2167, r16	; 0x802167 <ch1IntroNoteCount>
    14c2:	10 93 68 21 	sts	0x2168, r17	; 0x802168 <ch1IntroNoteCount+0x1>
		ch1NoteCount = ch1IntroNoteCount;
    14c6:	00 93 63 21 	sts	0x2163, r16	; 0x802163 <ch1NoteCount>
    14ca:	10 93 64 21 	sts	0x2164, r17	; 0x802164 <ch1NoteCount+0x1>
	}
	
		
	
	song_init();
    14ce:	0e 94 23 09 	call	0x1246	; 0x1246 <song_init>
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <song_start>:

void song_start()
{
	TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
    14e2:	08 95       	ret

000014e4 <song_interrupt_handler>:
}

void song_interrupt_handler(){
// 	PORTA.OUTSET = PIN2_bm;
	TCC4.INTFLAGS = TC4_OVFIF_bm;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteCh0BeatCount))
    14ea:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <noteCh0BeatCount>
    14ee:	81 11       	cpse	r24, r1
    14f0:	3d c0       	rjmp	.+122    	; 0x156c <song_interrupt_handler+0x88>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
    14f2:	e0 e4       	ldi	r30, 0x40	; 64
    14f4:	f8 e0       	ldi	r31, 0x08	; 8
    14f6:	10 82       	st	Z, r1
		TCC5.CCA = 0;
    14f8:	10 a6       	std	Z+40, r1	; 0x28
    14fa:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh0Index >= ch0NoteCount)
    14fc:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <noteCh0Index>
    1500:	30 91 7d 21 	lds	r19, 0x217D	; 0x80217d <noteCh0Index+0x1>
    1504:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <ch0NoteCount>
    1508:	90 91 73 21 	lds	r25, 0x2173	; 0x802173 <ch0NoteCount+0x1>
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	50 f1       	brcs	.+84     	; 0x1566 <song_interrupt_handler+0x82>
		{
			if (isCh0Intro)// && hasCh0Main)
    1512:	80 91 71 21 	lds	r24, 0x2171	; 0x802171 <isCh0Intro>
    1516:	88 23       	and	r24, r24
    1518:	d1 f0       	breq	.+52     	; 0x154e <song_interrupt_handler+0x6a>
			{
				isCh0Intro = 0;
    151a:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <isCh0Intro>
				ch0NoteCount = ch0MainNoteCount;
    151e:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <ch0MainNoteCount>
    1522:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <ch0MainNoteCount+0x1>
    1526:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <ch0NoteCount>
    152a:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <ch0NoteCount+0x1>
				ch0Track = ch0MainTrack;
    152e:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <ch0MainTrack>
    1532:	90 91 3d 22 	lds	r25, 0x223D	; 0x80223d <ch0MainTrack+0x1>
    1536:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <ch0Track>
    153a:	90 93 4d 22 	sts	0x224D, r25	; 0x80224d <ch0Track+0x1>
				ch0Ext = ch0MainExt;
    153e:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <ch0MainExt>
    1542:	90 91 39 22 	lds	r25, 0x2239	; 0x802239 <ch0MainExt+0x1>
    1546:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <ch0Ext>
    154a:	90 93 3b 22 	sts	0x223B, r25	; 0x80223b <ch0Ext+0x1>
			}
			
			noteCh0BeatCount = 0;
    154e:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <noteCh0BeatCount>
			noteCh0Index = 0;
    1552:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <noteCh0Index>
    1556:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <noteCh0Index+0x1>
			noteCh0ExtIndex = 0;
    155a:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <noteCh0ExtIndex>
    155e:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <noteCh0ExtIndex+0x1>
			noteCh0ExtBitPos = 0;
    1562:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <noteCh0ExtBitPos>
		}
		

		set_ch0_note_and_beat();
    1566:	0e 94 dd 08 	call	0x11ba	; 0x11ba <set_ch0_note_and_beat>
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <song_interrupt_handler+0x8e>
		
	}
	else
	{
		noteCh0BeatCount--;
    156c:	81 50       	subi	r24, 0x01	; 1
    156e:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <noteCh0BeatCount>
	}
	
	if (!(noteCh1BeatCount))
    1572:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <noteCh1BeatCount>
    1576:	81 11       	cpse	r24, r1
    1578:	41 c0       	rjmp	.+130    	; 0x15fc <song_interrupt_handler+0x118>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
    157a:	e0 e4       	ldi	r30, 0x40	; 64
    157c:	f9 e0       	ldi	r31, 0x09	; 9
    157e:	10 82       	st	Z, r1
		TCD5.CCA = 0;
    1580:	10 a6       	std	Z+40, r1	; 0x28
    1582:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh1Index >= ch1NoteCount)
    1584:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <noteCh1Index>
    1588:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <noteCh1Index+0x1>
    158c:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <ch1NoteCount>
    1590:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <ch1NoteCount+0x1>
    1594:	28 17       	cp	r18, r24
    1596:	39 07       	cpc	r19, r25
    1598:	70 f1       	brcs	.+92     	; 0x15f6 <song_interrupt_handler+0x112>
		{
			if (isCh1Intro && hasCh1Main)
    159a:	80 91 62 21 	lds	r24, 0x2162	; 0x802162 <isCh1Intro>
    159e:	88 23       	and	r24, r24
    15a0:	f1 f0       	breq	.+60     	; 0x15de <song_interrupt_handler+0xfa>
    15a2:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <hasCh1Main>
    15a6:	88 23       	and	r24, r24
    15a8:	d1 f0       	breq	.+52     	; 0x15de <song_interrupt_handler+0xfa>
			{
				isCh1Intro = 0;
    15aa:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <isCh1Intro>
				ch1NoteCount = ch1MainNoteCount;
    15ae:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <ch1MainNoteCount>
    15b2:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <ch1MainNoteCount+0x1>
    15b6:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <ch1NoteCount>
    15ba:	90 93 64 21 	sts	0x2164, r25	; 0x802164 <ch1NoteCount+0x1>
				ch1Track = ch1MainTrack;
    15be:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <ch1MainTrack>
    15c2:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <ch1MainTrack+0x1>
    15c6:	80 93 4a 22 	sts	0x224A, r24	; 0x80224a <ch1Track>
    15ca:	90 93 4b 22 	sts	0x224B, r25	; 0x80224b <ch1Track+0x1>
				ch1Ext = ch1MainExt;
    15ce:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <ch1MainExt>
    15d2:	90 91 41 22 	lds	r25, 0x2241	; 0x802241 <ch1MainExt+0x1>
    15d6:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <ch1Ext>
    15da:	90 93 4f 22 	sts	0x224F, r25	; 0x80224f <ch1Ext+0x1>
			}
			
			noteCh1BeatCount = 0;
    15de:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <noteCh1BeatCount>
			noteCh1Index = 0;
    15e2:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <noteCh1Index>
    15e6:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <noteCh1Index+0x1>
			noteCh1ExtIndex = 0;
    15ea:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <noteCh1ExtIndex>
    15ee:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <noteCh1ExtIndex+0x1>
			noteCh1ExtBitPos = 0;
    15f2:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <noteCh1ExtBitPos>
		}

		set_ch1_note_and_beat();
    15f6:	0e 94 00 09 	call	0x1200	; 0x1200 <set_ch1_note_and_beat>
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <song_interrupt_handler+0x11e>
	}
	else
	{
		noteCh1BeatCount--;
    15fc:	81 50       	subi	r24, 0x01	; 1
    15fe:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <noteCh1BeatCount>
	}
	
	update_display_callback_ptr();
    1602:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <update_display_callback_ptr>
    1606:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <update_display_callback_ptr+0x1>
    160a:	09 95       	icall
    160c:	2f ef       	ldi	r18, 0xFF	; 255
    160e:	83 ef       	ldi	r24, 0xF3	; 243
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	21 50       	subi	r18, 0x01	; 1
    1614:	80 40       	sbci	r24, 0x00	; 0
    1616:	90 40       	sbci	r25, 0x00	; 0
    1618:	e1 f7       	brne	.-8      	; 0x1612 <song_interrupt_handler+0x12e>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <song_interrupt_handler+0x138>
    161c:	00 00       	nop
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    1624:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
    1628:	08 95       	ret

0000162a <get_allow_portal>:
}

void set_allow_easter_egg(uint8_t allow)
{
	allow_easter_egg = allow;
	eeprom_write_byte((uint8_t *)3, allow_easter_egg ? ALLOW_VAL : 0);
    162a:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <allow_portal>
    162e:	08 95       	ret

00001630 <get_allow_easter_egg>:
    1630:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <allow_easter_egg>
    1634:	08 95       	ret

00001636 <get_start_mode>:
}

uint8_t get_start_mode()
{
	return start_mode;
    1636:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
}
    163a:	08 95       	ret

0000163c <reset_start_mode_in_eeprom>:

void reset_start_mode_in_eeprom()
{
	eeprom_write_byte((uint8_t *)1, 0);
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <eeprom_write_byte>
    1646:	08 95       	ret

00001648 <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
    1648:	88 ed       	ldi	r24, 0xD8	; 216
    164a:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
    1652:	08 95       	ret

00001654 <start_mode_init>:
}

void start_mode_init()
{
	
	start_mode = eeprom_read_byte((uint8_t*)1);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_read_byte>
    165c:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <start_mode>
	
	if (start_mode > BASE_MAX_MODE + 2)
    1660:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    1664:	87 30       	cpi	r24, 0x07	; 7
    1666:	20 f0       	brcs	.+8      	; 0x1670 <start_mode_init+0x1c>
	{
		start_mode = 0;
    1668:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <start_mode>
		reset_start_mode_in_eeprom();
    166c:	0e 94 1e 0b 	call	0x163c	; 0x163c <reset_start_mode_in_eeprom>
	}
	
	allow_portal = eeprom_read_byte((uint8_t*)2);
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_read_byte>
    1678:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <allow_portal>
	
	//TODO:Remove test case
	allow_portal = ALLOW_VAL;
    167c:	85 e5       	ldi	r24, 0x55	; 85
    167e:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <allow_portal>
	
	allow_easter_egg = eeprom_read_byte((uint8_t*)3);
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_read_byte>
    168a:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <allow_easter_egg>
    168e:	08 95       	ret

00001690 <next_start_mode>:
	
}

void next_start_mode()
{
	start_mode++;
    1690:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <start_mode>

	//If start mode is set to what "Allow Portal" would be, we need to see
	//if the mode can be set to "Allow Portal", or if it can be skipped and
	//go straight to "Easter Egg" mode, or we just roll back to "Standby"
	if (start_mode == BASE_MAX_MODE + 1)
    169a:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    169e:	85 30       	cpi	r24, 0x05	; 5
    16a0:	c9 f4       	brne	.+50     	; 0x16d4 <next_start_mode+0x44>
	{
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))	
    16a2:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <allow_portal>
    16a6:	85 35       	cpi	r24, 0x55	; 85
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <next_start_mode+0x28>
    16aa:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <allow_easter_egg>
    16ae:	85 35       	cpi	r24, 0x55	; 85
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <next_start_mode+0x28>
		{
			start_mode = 0;
    16b2:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <start_mode>
    16b6:	1f c0       	rjmp	.+62     	; 0x16f6 <next_start_mode+0x66>
		}
		else if ((allow_portal != ALLOW_VAL) && (allow_easter_egg == ALLOW_VAL))
    16b8:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <allow_portal>
    16bc:	85 35       	cpi	r24, 0x55	; 85
    16be:	d9 f0       	breq	.+54     	; 0x16f6 <next_start_mode+0x66>
    16c0:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <allow_easter_egg>
    16c4:	85 35       	cpi	r24, 0x55	; 85
    16c6:	b9 f4       	brne	.+46     	; 0x16f6 <next_start_mode+0x66>
		{
			start_mode++;
    16c8:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <start_mode>
    16d2:	11 c0       	rjmp	.+34     	; 0x16f6 <next_start_mode+0x66>
		}
	}
	else if (start_mode == BASE_MAX_MODE + 2)
    16d4:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    16d8:	86 30       	cpi	r24, 0x06	; 6
    16da:	39 f4       	brne	.+14     	; 0x16ea <next_start_mode+0x5a>
	{				
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
    16dc:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <allow_easter_egg>
    16e0:	85 35       	cpi	r24, 0x55	; 85
    16e2:	49 f0       	breq	.+18     	; 0x16f6 <next_start_mode+0x66>
		{
			start_mode = 0;
    16e4:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <start_mode>
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <next_start_mode+0x66>
		}
		
	}	
	else if (start_mode > BASE_MAX_MODE + 2)
    16ea:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <start_mode>
    16ee:	87 30       	cpi	r24, 0x07	; 7
    16f0:	10 f0       	brcs	.+4      	; 0x16f6 <next_start_mode+0x66>
	{
		//Our default restart state
		start_mode = 0;		
    16f2:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <start_mode>
	}
	
	eeprom_write_byte((uint8_t *)1, start_mode);
    16f6:	60 91 82 21 	lds	r22, 0x2182	; 0x802182 <start_mode>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <eeprom_write_byte>
	enable_wdt();
    1702:	0e 94 24 0b 	call	0x1648	; 0x1648 <enable_wdt>
    1706:	08 95       	ret

00001708 <ws2812drv_init>:


void ws2812drv_init(void)
{                                                               
    // Setup EDMA channel 2(+1) 
    EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b1 e0       	ldi	r27, 0x01	; 1
    170c:	80 eb       	ldi	r24, 0xB0	; 176
    170e:	8c 93       	st	X, r24
    EDMA.CH2.CTRLB = 0;// EDMA_CH_INTLVL_OFF_gc;
    1710:	d1 96       	adiw	r26, 0x31	; 49
    1712:	1c 92       	st	X, r1
    1714:	d1 97       	sbiw	r26, 0x31	; 49
    EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	d2 96       	adiw	r26, 0x32	; 50
    171a:	8c 93       	st	X, r24
    171c:	d2 97       	sbiw	r26, 0x32	; 50
    EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    171e:	d3 96       	adiw	r26, 0x33	; 51
    1720:	1c 92       	st	X, r1
    1722:	d3 97       	sbiw	r26, 0x33	; 51
    EDMA.CH2.DESTADDR = (uint16_t)&USARTD0.DATA;
    1724:	e0 ec       	ldi	r30, 0xC0	; 192
    1726:	f9 e0       	ldi	r31, 0x09	; 9
    1728:	dc 96       	adiw	r26, 0x3c	; 60
    172a:	ed 93       	st	X+, r30
    172c:	fc 93       	st	X, r31
    172e:	dd 97       	sbiw	r26, 0x3d	; 61
    EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
    1730:	9d e6       	ldi	r25, 0x6D	; 109
    1732:	d4 96       	adiw	r26, 0x34	; 52
    1734:	9c 93       	st	X, r25
    // Setup port pins for TxD, XCK and LUT0OUT
    PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
    1736:	a0 e6       	ldi	r26, 0x60	; 96
    1738:	b6 e0       	ldi	r27, 0x06	; 6
    173a:	50 96       	adiw	r26, 0x10	; 16
    173c:	1c 92       	st	X, r1
    173e:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
    1740:	51 96       	adiw	r26, 0x11	; 17
    1742:	8c 93       	st	X, r24
    1744:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	53 96       	adiw	r26, 0x13	; 19
    174a:	8c 93       	st	X, r24
    174c:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
    174e:	9b e0       	ldi	r25, 0x0B	; 11
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	9c 93       	st	X, r25
	

    // Setup Event channel 0 to TxD (async)
    EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN3_gc;
    1754:	a0 e8       	ldi	r26, 0x80	; 128
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	9b e6       	ldi	r25, 0x6B	; 107
    175a:	9c 93       	st	X, r25
    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    175c:	18 96       	adiw	r26, 0x08	; 8
    175e:	1c 92       	st	X, r1
    1760:	18 97       	sbiw	r26, 0x08	; 8
    // Setup Event channel 6 to XCK rising edge
    EVSYS.CH6MUX = EVSYS_CHMUX_PORTD_PIN1_gc;
    1762:	99 e6       	ldi	r25, 0x69	; 105
    1764:	16 96       	adiw	r26, 0x06	; 6
    1766:	9c 93       	st	X, r25
    1768:	16 97       	sbiw	r26, 0x06	; 6
    EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    176a:	1e 96       	adiw	r26, 0x0e	; 14
    176c:	1c 92       	st	X, r1

    // Setup USART in master SPI mode 1, MSB first
    USARTD0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
    176e:	93 e1       	ldi	r25, 0x13	; 19
    1770:	96 83       	std	Z+6, r25	; 0x06
    USARTD0.BAUDCTRLB = 0;
    1772:	17 82       	std	Z+7, r1	; 0x07
    USARTD0.CTRLA = 0;// USART_RXSINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc;
    1774:	12 82       	std	Z+2, r1	; 0x02
    USARTD0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
    1776:	92 ec       	ldi	r25, 0xC2	; 194
    1778:	94 83       	std	Z+4, r25	; 0x04
    USARTD0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
    177a:	15 82       	std	Z+5, r1	; 0x05
    USARTD0.CTRLB = USART_TXEN_bm;
    177c:	98 e0       	ldi	r25, 0x08	; 8
    177e:	93 83       	std	Z+3, r25	; 0x03

    // Setup XCL BTC0 timer to 1shot pwm generation
    XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
    1780:	e0 e6       	ldi	r30, 0x60	; 96
    1782:	f4 e0       	ldi	r31, 0x04	; 4
    1784:	91 e1       	ldi	r25, 0x11	; 17
    1786:	94 83       	std	Z+4, r25	; 0x04
    XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
    1788:	85 83       	std	Z+5, r24	; 0x05
    XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
    178a:	8e e9       	ldi	r24, 0x9E	; 158
    178c:	86 83       	std	Z+6, r24	; 0x06
    XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
    178e:	86 e1       	ldi	r24, 0x16	; 22
    1790:	86 87       	std	Z+14, r24	; 0x0e
    XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
    1792:	8d e0       	ldi	r24, 0x0D	; 13
    1794:	84 87       	std	Z+12, r24	; 0x0c

    // Setup XCL LUT
    XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PD_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
    1796:	84 e5       	ldi	r24, 0x54	; 84
    1798:	80 83       	st	Z, r24
    XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
    179a:	80 e5       	ldi	r24, 0x50	; 80
    179c:	81 83       	std	Z+1, r24	; 0x01
    XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLYCONF_DISABLE_gc;      // Async inputs, no delay
    179e:	80 e4       	ldi	r24, 0x40	; 64
    17a0:	82 83       	std	Z+2, r24	; 0x02
    XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
    17a2:	80 ea       	ldi	r24, 0xA0	; 160
    17a4:	83 83       	std	Z+3, r24	; 0x03
    17a6:	08 95       	ret

000017a8 <ws2812drv_start_transfer>:
}


void ws2812drv_start_transfer(ws2812drv_led_t *p, uint16_t cnt)
{
    EDMA.CH2.ADDR = (uint16_t)p;
    17a8:	e0 e0       	ldi	r30, 0x00	; 0
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	80 af       	std	Z+56, r24	; 0x38
    17ae:	91 af       	std	Z+57, r25	; 0x39
    EDMA.CH2.TRFCNT = cnt * sizeof(ws2812drv_led_t);
    17b0:	cb 01       	movw	r24, r22
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	68 0f       	add	r22, r24
    17b8:	79 1f       	adc	r23, r25
    17ba:	66 ab       	std	Z+54, r22	; 0x36
    17bc:	77 ab       	std	Z+55, r23	; 0x37
    EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
    17be:	84 e8       	ldi	r24, 0x84	; 132
    17c0:	80 ab       	std	Z+48, r24	; 0x30
    17c2:	08 95       	ret

000017c4 <__divmodhi4>:
    17c4:	97 fb       	bst	r25, 7
    17c6:	07 2e       	mov	r0, r23
    17c8:	16 f4       	brtc	.+4      	; 0x17ce <__divmodhi4+0xa>
    17ca:	00 94       	com	r0
    17cc:	07 d0       	rcall	.+14     	; 0x17dc <__divmodhi4_neg1>
    17ce:	77 fd       	sbrc	r23, 7
    17d0:	09 d0       	rcall	.+18     	; 0x17e4 <__divmodhi4_neg2>
    17d2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__udivmodhi4>
    17d6:	07 fc       	sbrc	r0, 7
    17d8:	05 d0       	rcall	.+10     	; 0x17e4 <__divmodhi4_neg2>
    17da:	3e f4       	brtc	.+14     	; 0x17ea <__divmodhi4_exit>

000017dc <__divmodhi4_neg1>:
    17dc:	90 95       	com	r25
    17de:	81 95       	neg	r24
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	08 95       	ret

000017e4 <__divmodhi4_neg2>:
    17e4:	70 95       	com	r23
    17e6:	61 95       	neg	r22
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255

000017ea <__divmodhi4_exit>:
    17ea:	08 95       	ret

000017ec <__tablejump2__>:
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	05 90       	lpm	r0, Z+
    17f2:	f4 91       	lpm	r31, Z
    17f4:	e0 2d       	mov	r30, r0
    17f6:	09 94       	ijmp

000017f8 <__udivmodhi4>:
    17f8:	aa 1b       	sub	r26, r26
    17fa:	bb 1b       	sub	r27, r27
    17fc:	51 e1       	ldi	r21, 0x11	; 17
    17fe:	07 c0       	rjmp	.+14     	; 0x180e <__udivmodhi4_ep>

00001800 <__udivmodhi4_loop>:
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	a6 17       	cp	r26, r22
    1806:	b7 07       	cpc	r27, r23
    1808:	10 f0       	brcs	.+4      	; 0x180e <__udivmodhi4_ep>
    180a:	a6 1b       	sub	r26, r22
    180c:	b7 0b       	sbc	r27, r23

0000180e <__udivmodhi4_ep>:
    180e:	88 1f       	adc	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	5a 95       	dec	r21
    1814:	a9 f7       	brne	.-22     	; 0x1800 <__udivmodhi4_loop>
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	08 95       	ret

00001820 <malloc>:
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	10 f4       	brcc	.+4      	; 0x1832 <malloc+0x12>
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	e0 91 52 22 	lds	r30, 0x2252	; 0x802252 <__flp>
    1836:	f0 91 53 22 	lds	r31, 0x2253	; 0x802253 <__flp+0x1>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	30 97       	sbiw	r30, 0x00	; 0
    1844:	19 f1       	breq	.+70     	; 0x188c <malloc+0x6c>
    1846:	40 81       	ld	r20, Z
    1848:	51 81       	ldd	r21, Z+1	; 0x01
    184a:	02 81       	ldd	r16, Z+2	; 0x02
    184c:	13 81       	ldd	r17, Z+3	; 0x03
    184e:	48 17       	cp	r20, r24
    1850:	59 07       	cpc	r21, r25
    1852:	c8 f0       	brcs	.+50     	; 0x1886 <malloc+0x66>
    1854:	84 17       	cp	r24, r20
    1856:	95 07       	cpc	r25, r21
    1858:	69 f4       	brne	.+26     	; 0x1874 <malloc+0x54>
    185a:	10 97       	sbiw	r26, 0x00	; 0
    185c:	31 f0       	breq	.+12     	; 0x186a <malloc+0x4a>
    185e:	12 96       	adiw	r26, 0x02	; 2
    1860:	0c 93       	st	X, r16
    1862:	12 97       	sbiw	r26, 0x02	; 2
    1864:	13 96       	adiw	r26, 0x03	; 3
    1866:	1c 93       	st	X, r17
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <malloc+0x98>
    186a:	00 93 52 22 	sts	0x2252, r16	; 0x802252 <__flp>
    186e:	10 93 53 22 	sts	0x2253, r17	; 0x802253 <__flp+0x1>
    1872:	22 c0       	rjmp	.+68     	; 0x18b8 <malloc+0x98>
    1874:	21 15       	cp	r18, r1
    1876:	31 05       	cpc	r19, r1
    1878:	19 f0       	breq	.+6      	; 0x1880 <malloc+0x60>
    187a:	42 17       	cp	r20, r18
    187c:	53 07       	cpc	r21, r19
    187e:	18 f4       	brcc	.+6      	; 0x1886 <malloc+0x66>
    1880:	9a 01       	movw	r18, r20
    1882:	bd 01       	movw	r22, r26
    1884:	ef 01       	movw	r28, r30
    1886:	df 01       	movw	r26, r30
    1888:	f8 01       	movw	r30, r16
    188a:	db cf       	rjmp	.-74     	; 0x1842 <malloc+0x22>
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	f9 f0       	breq	.+62     	; 0x18d0 <malloc+0xb0>
    1892:	28 1b       	sub	r18, r24
    1894:	39 0b       	sbc	r19, r25
    1896:	24 30       	cpi	r18, 0x04	; 4
    1898:	31 05       	cpc	r19, r1
    189a:	80 f4       	brcc	.+32     	; 0x18bc <malloc+0x9c>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	61 15       	cp	r22, r1
    18a2:	71 05       	cpc	r23, r1
    18a4:	21 f0       	breq	.+8      	; 0x18ae <malloc+0x8e>
    18a6:	fb 01       	movw	r30, r22
    18a8:	82 83       	std	Z+2, r24	; 0x02
    18aa:	93 83       	std	Z+3, r25	; 0x03
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <malloc+0x96>
    18ae:	80 93 52 22 	sts	0x2252, r24	; 0x802252 <__flp>
    18b2:	90 93 53 22 	sts	0x2253, r25	; 0x802253 <__flp+0x1>
    18b6:	fe 01       	movw	r30, r28
    18b8:	32 96       	adiw	r30, 0x02	; 2
    18ba:	44 c0       	rjmp	.+136    	; 0x1944 <malloc+0x124>
    18bc:	fe 01       	movw	r30, r28
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	81 93       	st	Z+, r24
    18c4:	91 93       	st	Z+, r25
    18c6:	22 50       	subi	r18, 0x02	; 2
    18c8:	31 09       	sbc	r19, r1
    18ca:	28 83       	st	Y, r18
    18cc:	39 83       	std	Y+1, r19	; 0x01
    18ce:	3a c0       	rjmp	.+116    	; 0x1944 <malloc+0x124>
    18d0:	20 91 50 22 	lds	r18, 0x2250	; 0x802250 <__brkval>
    18d4:	30 91 51 22 	lds	r19, 0x2251	; 0x802251 <__brkval+0x1>
    18d8:	23 2b       	or	r18, r19
    18da:	41 f4       	brne	.+16     	; 0x18ec <malloc+0xcc>
    18dc:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    18e0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    18e4:	20 93 50 22 	sts	0x2250, r18	; 0x802250 <__brkval>
    18e8:	30 93 51 22 	sts	0x2251, r19	; 0x802251 <__brkval+0x1>
    18ec:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    18f0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    18f4:	21 15       	cp	r18, r1
    18f6:	31 05       	cpc	r19, r1
    18f8:	41 f4       	brne	.+16     	; 0x190a <malloc+0xea>
    18fa:	2d b7       	in	r18, 0x3d	; 61
    18fc:	3e b7       	in	r19, 0x3e	; 62
    18fe:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1902:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1906:	24 1b       	sub	r18, r20
    1908:	35 0b       	sbc	r19, r21
    190a:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <__brkval>
    190e:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <__brkval+0x1>
    1912:	e2 17       	cp	r30, r18
    1914:	f3 07       	cpc	r31, r19
    1916:	a0 f4       	brcc	.+40     	; 0x1940 <malloc+0x120>
    1918:	2e 1b       	sub	r18, r30
    191a:	3f 0b       	sbc	r19, r31
    191c:	28 17       	cp	r18, r24
    191e:	39 07       	cpc	r19, r25
    1920:	78 f0       	brcs	.+30     	; 0x1940 <malloc+0x120>
    1922:	ac 01       	movw	r20, r24
    1924:	4e 5f       	subi	r20, 0xFE	; 254
    1926:	5f 4f       	sbci	r21, 0xFF	; 255
    1928:	24 17       	cp	r18, r20
    192a:	35 07       	cpc	r19, r21
    192c:	48 f0       	brcs	.+18     	; 0x1940 <malloc+0x120>
    192e:	4e 0f       	add	r20, r30
    1930:	5f 1f       	adc	r21, r31
    1932:	40 93 50 22 	sts	0x2250, r20	; 0x802250 <__brkval>
    1936:	50 93 51 22 	sts	0x2251, r21	; 0x802251 <__brkval+0x1>
    193a:	81 93       	st	Z+, r24
    193c:	91 93       	st	Z+, r25
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <malloc+0x124>
    1940:	e0 e0       	ldi	r30, 0x00	; 0
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	cf 01       	movw	r24, r30
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	08 95       	ret

00001950 <free>:
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f4       	brne	.+2      	; 0x195a <free+0xa>
    1958:	81 c0       	rjmp	.+258    	; 0x1a5c <free+0x10c>
    195a:	fc 01       	movw	r30, r24
    195c:	32 97       	sbiw	r30, 0x02	; 2
    195e:	12 82       	std	Z+2, r1	; 0x02
    1960:	13 82       	std	Z+3, r1	; 0x03
    1962:	a0 91 52 22 	lds	r26, 0x2252	; 0x802252 <__flp>
    1966:	b0 91 53 22 	lds	r27, 0x2253	; 0x802253 <__flp+0x1>
    196a:	10 97       	sbiw	r26, 0x00	; 0
    196c:	81 f4       	brne	.+32     	; 0x198e <free+0x3e>
    196e:	20 81       	ld	r18, Z
    1970:	31 81       	ldd	r19, Z+1	; 0x01
    1972:	82 0f       	add	r24, r18
    1974:	93 1f       	adc	r25, r19
    1976:	20 91 50 22 	lds	r18, 0x2250	; 0x802250 <__brkval>
    197a:	30 91 51 22 	lds	r19, 0x2251	; 0x802251 <__brkval+0x1>
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	51 f5       	brne	.+84     	; 0x19d8 <free+0x88>
    1984:	e0 93 50 22 	sts	0x2250, r30	; 0x802250 <__brkval>
    1988:	f0 93 51 22 	sts	0x2251, r31	; 0x802251 <__brkval+0x1>
    198c:	67 c0       	rjmp	.+206    	; 0x1a5c <free+0x10c>
    198e:	ed 01       	movw	r28, r26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	ce 17       	cp	r28, r30
    1996:	df 07       	cpc	r29, r31
    1998:	40 f4       	brcc	.+16     	; 0x19aa <free+0x5a>
    199a:	4a 81       	ldd	r20, Y+2	; 0x02
    199c:	5b 81       	ldd	r21, Y+3	; 0x03
    199e:	9e 01       	movw	r18, r28
    19a0:	41 15       	cp	r20, r1
    19a2:	51 05       	cpc	r21, r1
    19a4:	f1 f0       	breq	.+60     	; 0x19e2 <free+0x92>
    19a6:	ea 01       	movw	r28, r20
    19a8:	f5 cf       	rjmp	.-22     	; 0x1994 <free+0x44>
    19aa:	c2 83       	std	Z+2, r28	; 0x02
    19ac:	d3 83       	std	Z+3, r29	; 0x03
    19ae:	40 81       	ld	r20, Z
    19b0:	51 81       	ldd	r21, Z+1	; 0x01
    19b2:	84 0f       	add	r24, r20
    19b4:	95 1f       	adc	r25, r21
    19b6:	c8 17       	cp	r28, r24
    19b8:	d9 07       	cpc	r29, r25
    19ba:	59 f4       	brne	.+22     	; 0x19d2 <free+0x82>
    19bc:	88 81       	ld	r24, Y
    19be:	99 81       	ldd	r25, Y+1	; 0x01
    19c0:	84 0f       	add	r24, r20
    19c2:	95 1f       	adc	r25, r21
    19c4:	02 96       	adiw	r24, 0x02	; 2
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	82 83       	std	Z+2, r24	; 0x02
    19d0:	93 83       	std	Z+3, r25	; 0x03
    19d2:	21 15       	cp	r18, r1
    19d4:	31 05       	cpc	r19, r1
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <free+0x92>
    19d8:	e0 93 52 22 	sts	0x2252, r30	; 0x802252 <__flp>
    19dc:	f0 93 53 22 	sts	0x2253, r31	; 0x802253 <__flp+0x1>
    19e0:	3d c0       	rjmp	.+122    	; 0x1a5c <free+0x10c>
    19e2:	e9 01       	movw	r28, r18
    19e4:	ea 83       	std	Y+2, r30	; 0x02
    19e6:	fb 83       	std	Y+3, r31	; 0x03
    19e8:	49 91       	ld	r20, Y+
    19ea:	59 91       	ld	r21, Y+
    19ec:	c4 0f       	add	r28, r20
    19ee:	d5 1f       	adc	r29, r21
    19f0:	ec 17       	cp	r30, r28
    19f2:	fd 07       	cpc	r31, r29
    19f4:	61 f4       	brne	.+24     	; 0x1a0e <free+0xbe>
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	84 0f       	add	r24, r20
    19fc:	95 1f       	adc	r25, r21
    19fe:	02 96       	adiw	r24, 0x02	; 2
    1a00:	e9 01       	movw	r28, r18
    1a02:	88 83       	st	Y, r24
    1a04:	99 83       	std	Y+1, r25	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	9b 83       	std	Y+3, r25	; 0x03
    1a0e:	e0 e0       	ldi	r30, 0x00	; 0
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	12 96       	adiw	r26, 0x02	; 2
    1a14:	8d 91       	ld	r24, X+
    1a16:	9c 91       	ld	r25, X
    1a18:	13 97       	sbiw	r26, 0x03	; 3
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <free+0xd4>
    1a1e:	fd 01       	movw	r30, r26
    1a20:	dc 01       	movw	r26, r24
    1a22:	f7 cf       	rjmp	.-18     	; 0x1a12 <free+0xc2>
    1a24:	8d 91       	ld	r24, X+
    1a26:	9c 91       	ld	r25, X
    1a28:	11 97       	sbiw	r26, 0x01	; 1
    1a2a:	9d 01       	movw	r18, r26
    1a2c:	2e 5f       	subi	r18, 0xFE	; 254
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	82 0f       	add	r24, r18
    1a32:	93 1f       	adc	r25, r19
    1a34:	20 91 50 22 	lds	r18, 0x2250	; 0x802250 <__brkval>
    1a38:	30 91 51 22 	lds	r19, 0x2251	; 0x802251 <__brkval+0x1>
    1a3c:	28 17       	cp	r18, r24
    1a3e:	39 07       	cpc	r19, r25
    1a40:	69 f4       	brne	.+26     	; 0x1a5c <free+0x10c>
    1a42:	30 97       	sbiw	r30, 0x00	; 0
    1a44:	29 f4       	brne	.+10     	; 0x1a50 <free+0x100>
    1a46:	10 92 52 22 	sts	0x2252, r1	; 0x802252 <__flp>
    1a4a:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <__flp+0x1>
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <free+0x104>
    1a50:	12 82       	std	Z+2, r1	; 0x02
    1a52:	13 82       	std	Z+3, r1	; 0x03
    1a54:	a0 93 50 22 	sts	0x2250, r26	; 0x802250 <__brkval>
    1a58:	b0 93 51 22 	sts	0x2251, r27	; 0x802251 <__brkval+0x1>
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <eeprom_read_byte>:
    1a62:	03 d0       	rcall	.+6      	; 0x1a6a <eeprom_mapen>
    1a64:	80 81       	ld	r24, Z
    1a66:	99 27       	eor	r25, r25
    1a68:	08 95       	ret

00001a6a <eeprom_mapen>:
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e0 50       	subi	r30, 0x00	; 0
    1a6e:	f0 4f       	sbci	r31, 0xF0	; 240
    1a70:	08 95       	ret

00001a72 <eeprom_write_byte>:
    1a72:	26 2f       	mov	r18, r22

00001a74 <eeprom_write_r18>:
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	e0 ec       	ldi	r30, 0xC0	; 192
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
    1a7c:	37 85       	ldd	r19, Z+15	; 0x0f
    1a7e:	37 fd       	sbrc	r19, 7
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <eeprom_write_r18+0x8>
    1a82:	dc 01       	movw	r26, r24
    1a84:	a0 50       	subi	r26, 0x00	; 0
    1a86:	b0 4f       	sbci	r27, 0xF0	; 240
    1a88:	2c 93       	st	X, r18
    1a8a:	25 e3       	ldi	r18, 0x35	; 53
    1a8c:	22 87       	std	Z+10, r18	; 0x0a
    1a8e:	28 ed       	ldi	r18, 0xD8	; 216
    1a90:	31 e0       	ldi	r19, 0x01	; 1
    1a92:	24 bf       	out	0x34, r18	; 52
    1a94:	33 87       	std	Z+11, r19	; 0x0b
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	08 95       	ret

00001a9e <_exit>:
    1a9e:	f8 94       	cli

00001aa0 <__stop_program>:
    1aa0:	ff cf       	rjmp	.-2      	; 0x1aa0 <__stop_program>
