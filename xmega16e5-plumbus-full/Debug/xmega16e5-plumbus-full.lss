
xmega16e5-plumbus-full.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000295a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00802000  0000295a  000029ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010e  008021a0  008021a0  00002b8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00002c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000882d  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c4f  00000000  00000000  0000b7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b9  00000000  00000000  0000e42c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  00010de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004268  00000000  00000000  00011688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000186e  00000000  00000000  000158f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0001715e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      2c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_11>
      30:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_12>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_38>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	00 00       	nop
      ae:	00 80       	ld	r0, Z

000000b0 <easterEggMainBass>:
      b0:	68 61 61 61 68 61 61 61 68 61 61 61 68 61 61 61     haaahaaahaaahaaa
      c0:	6d 66 66 66 6d 66 66 66 6d 66 66 66 6d 66 66 2d     mfffmfffmfffmff-

000000d0 <easterEggIntroExtBass>:
	...

000000d1 <easterEggIntroBass>:
      d1:	80                                                  .

000000d2 <easterEggMainExtTreble>:
      d2:	00 00 00                                            ...

000000d5 <easterEggMainTreble>:
      d5:	5c 58 96 5c 58 96 5c 58 56 51 93 56 55 56 5a dd     \X.\X.\XVQ.VUVZ.
      e5:	40 5f 5d 5a 7d                                      @_]Z}

000000ea <easterEggIntroExtTreble>:
	...

000000eb <easterEggIntroTreble>:
      eb:	80                                                  .

000000ec <portalMainExtBass>:
	...

00000102 <portalMainBass>:
     102:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     112:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     122:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     132:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     142:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     152:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     162:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     172:	63 5f 5c 57 c0 a8 40 68 a1 40 61 a3 40 63 a8 a1     c_\W..@h.@a.@c..
     182:	a8 40 68 a1 40 61 a3 40 63 a8 9c e3 e1 9c 9d 9f     .@h.@a.@c.......
     192:	a1 e3 a4 b0 ab 40 6b ae 40 6e ab 40 6b ae 40 6e     .....@k.@n.@k.@n
     1a2:	ab 40 6b ae 40 6e ab 40 6b ee                       .@k.@n.@k.

000001ac <portalIntroExtBass>:
	...

000001ad <portalIntroBass>:
     1ad:	c0                                                  .

000001ae <portalMainExtTreble>:
     1ae:	02 00 00 04 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000001c0 <portalMainTreble>:
     1c0:	cf 00 4e 4f 51 91 8f 40 93 51 d8 c0 58 91 4f 8e     ..NOQ..@.Q..X.O.
     1d0:	40 51 94 93 40 91 58 98 8f 40 00 4e 4f 51 51 cf     @Q..@.X..@.NOQQ.
     1e0:	00 4e 4f 51 91 40 4f 93 40 51 d8 40 c0 91 4f 8e     .NOQ.@O.@Q.@..O.
     1f0:	40 51 94 40 53 91 58 53 51 50 51 53 55 80 58 57     @Q.@S.XSQPQSU.XW
     200:	95 90 51 53 53 55 53 55 55 40 95 58 57 95 90 4e     ..QSSUSUU@.XW..N
     210:	50 51 53 53 51 90 90 4e 4c 4b 4b 8c 8e 50 4e 4c     PQSSQ..NLKK..PNL
     220:	4c 8e 90 53 55 53 50 50 51 40 51 4f 4f 40 5f 5b     L..SUSPPQ@QOO@_[
     230:	5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f 64 5f 5b     _b_[_d_[_b_[_d_[
     240:	5f 62 5f 5b 5f 64 5f 5b 58 4e 4f 51 51              _b_[_d_[XNOQQ

0000024d <portalIntroExtTreble>:
	...

0000024e <portalIntroTreble>:
     24e:	4e 4f 51 51                                         NOQQ

00000252 <nyanMainExtBass>:
     252:	00 00 00                                            ...

00000255 <nyanMainBass>:
     255:	75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e 7a 78     uisgvjqexlsg:.zx
     265:	76                                                  v

00000266 <nyanIntroExtBass>:
     266:	03                                                  .

00000267 <nyanIntroBass>:
	...

00000269 <nyanMainExtTreble>:
	...

00000284 <nyanMainTreble>:
     284:	4f 4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12     OM.R...VVTS.....
     294:	0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12     .........RO.....
     2a4:	16 15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16     .......S........
     2b4:	54 56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14     TVTOM.R...VVTS..
     2c4:	16 14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12     ............RO..
     2d4:	0f 14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14     ..........S.....
     2e4:	13 14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16     ...TVVV..V......
     2f4:	11 12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e     ....VV..........
     304:	1d 1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b     ..V..V..........
     314:	56 16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19     V..........VWV..
     324:	56 1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16     V..........VV...
     334:	1b 11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16     .........V..V...
     344:	16 14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12     .......V........
     354:	11 0f 56 54                                         ..VT

00000358 <nyanIntroExtTreble>:
     358:	00 00 00 00                                         ....

0000035c <nyanIntroTreble>:
     35c:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
     36c:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 00     ......J.........

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	cd bf       	out	0x3d, r28	; 61
     384:	d7 e2       	ldi	r29, 0x27	; 39
     386:	de bf       	out	0x3e, r29	; 62

00000388 <__do_copy_data>:
     388:	11 e2       	ldi	r17, 0x21	; 33
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e2       	ldi	r27, 0x20	; 32
     38e:	ea e5       	ldi	r30, 0x5A	; 90
     390:	f9 e2       	ldi	r31, 0x29	; 41
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	a0 3a       	cpi	r26, 0xA0	; 160
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	22 e2       	ldi	r18, 0x22	; 34
     3a0:	a0 ea       	ldi	r26, 0xA0	; 160
     3a2:	b1 e2       	ldi	r27, 0x21	; 33
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	ae 3a       	cpi	r26, 0xAE	; 174
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 76 0d 	call	0x1aec	; 0x1aec <main>
     3b2:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <game_won_easy>:
uint8_t * start_size;


void game_won_easy()
{
	play_lights_won_easy_game();
     3ba:	0e 94 1f 09 	call	0x123e	; 0x123e <play_lights_won_easy_game>
		
	if (!(note_player_playing()))
     3be:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     3c2:	81 11       	cpse	r24, r1
     3c4:	2f c0       	rjmp	.+94     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if (play_index < sizeof(easy_won_notes))
     3c6:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <play_index>
     3ca:	ec 30       	cpi	r30, 0x0C	; 12
     3cc:	78 f4       	brcc	.+30     	; 0x3ec <game_won_easy+0x32>
		{
			timer_counter = 0;
     3ce:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     3d2:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
			note_play(easy_won_notes[play_index++]);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	8e 0f       	add	r24, r30
     3da:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	e2 5f       	subi	r30, 0xF2	; 242
     3e2:	ff 4d       	sbci	r31, 0xDF	; 223
     3e4:	80 81       	ld	r24, Z
     3e6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
     3ea:	08 95       	ret
		}
		else
		{
			if (timer_counter++ > STEP_PAUSE)
     3ec:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     3f0:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     3f4:	9c 01       	movw	r18, r24
     3f6:	2f 5f       	subi	r18, 0xFF	; 255
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     3fe:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     402:	06 97       	sbiw	r24, 0x06	; 6
     404:	78 f0       	brcs	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			{
				play_index = 0;
     406:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
				timer_counter = 0;
     40a:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     40e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				sequence_initialized = 0;
     412:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <sequence_initialized>
				game_state = game_start;
     416:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <__data_end>
				play_lights_game(expander_read_ports(), 0);
     41a:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
     424:	08 95       	ret

00000426 <game_won_hard>:
	}
}

void game_won_hard()
{
	if (timer_counter++ < STEP_PAUSE)
     426:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     42a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     42e:	9c 01       	movw	r18, r24
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     438:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     43c:	05 97       	sbiw	r24, 0x05	; 5
     43e:	30 f0       	brcs	.+12     	; 0x44c <game_won_hard+0x26>
	{
		return;
	}
	
	set_allow_portal(ALLOW_VAL);
     440:	85 e5       	ldi	r24, 0x55	; 85
     442:	0e 94 90 11 	call	0x2320	; 0x2320 <set_allow_portal>
	set_start_mode(PORTAL_sm);
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	0e 94 ed 11 	call	0x23da	; 0x23da <set_start_mode>
     44c:	08 95       	ret

0000044e <easy_sequence_init>:
}

void easy_sequence_init()
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
	sequence_len = EASY_LENGTH;
     454:	8a e0       	ldi	r24, 0x0A	; 10
     456:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <sequence_len>
	sequence = (uint8_t *)malloc(EASY_LENGTH);
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 ad 12 	call	0x255a	; 0x255a <malloc>
     462:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <sequence>
     466:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <sequence+0x1>
	srand(get_seed());
     46a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <get_seed>
     46e:	0e 94 1f 14 	call	0x283e	; 0x283e <srand>
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	18 c0       	rjmp	.+48     	; 0x4a6 <easy_sequence_init+0x58>
	{
		sequence[i] = 0x01 << (rand() % 4);
     476:	00 91 d1 21 	lds	r16, 0x21D1	; 0x8021d1 <sequence>
     47a:	10 91 d2 21 	lds	r17, 0x21D2	; 0x8021d2 <sequence+0x1>
     47e:	0c 0f       	add	r16, r28
     480:	11 1d       	adc	r17, r1
     482:	0e 94 1a 14 	call	0x2834	; 0x2834 <rand>
     486:	83 70       	andi	r24, 0x03	; 3
     488:	90 78       	andi	r25, 0x80	; 128
     48a:	99 23       	and	r25, r25
     48c:	24 f4       	brge	.+8      	; 0x496 <easy_sequence_init+0x48>
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	8c 6f       	ori	r24, 0xFC	; 252
     492:	9f 6f       	ori	r25, 0xFF	; 255
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	01 c0       	rjmp	.+2      	; 0x49c <easy_sequence_init+0x4e>
     49a:	99 0f       	add	r25, r25
     49c:	8a 95       	dec	r24
     49e:	ea f7       	brpl	.-6      	; 0x49a <easy_sequence_init+0x4c>
     4a0:	f8 01       	movw	r30, r16
     4a2:	90 83       	st	Z, r25
void easy_sequence_init()
{
	sequence_len = EASY_LENGTH;
	sequence = (uint8_t *)malloc(EASY_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     4a4:	cf 5f       	subi	r28, 0xFF	; 255
     4a6:	ca 30       	cpi	r28, 0x0A	; 10
     4a8:	30 f3       	brcs	.-52     	; 0x476 <easy_sequence_init+0x28>
	{
		sequence[i] = 0x01 << (rand() % 4);
	}
	
}
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	08 95       	ret

000004b2 <hard_sequence_init>:

void hard_sequence_init()
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
	sequence_len = HARD_LENGTH;
     4b8:	8f e0       	ldi	r24, 0x0F	; 15
     4ba:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <sequence_len>
	sequence = (uint8_t *)malloc(HARD_LENGTH);
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 ad 12 	call	0x255a	; 0x255a <malloc>
     4c6:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <sequence>
     4ca:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <sequence+0x1>
	srand(get_seed());
     4ce:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <get_seed>
     4d2:	0e 94 1f 14 	call	0x283e	; 0x283e <srand>
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	10 c0       	rjmp	.+32     	; 0x4fa <hard_sequence_init+0x48>
	{
		sequence[i] = (rand() % 15) + 1;
     4da:	00 91 d1 21 	lds	r16, 0x21D1	; 0x8021d1 <sequence>
     4de:	10 91 d2 21 	lds	r17, 0x21D2	; 0x8021d2 <sequence+0x1>
     4e2:	0c 0f       	add	r16, r28
     4e4:	11 1d       	adc	r17, r1
     4e6:	0e 94 1a 14 	call	0x2834	; 0x2834 <rand>
     4ea:	6f e0       	ldi	r22, 0x0F	; 15
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	f8 01       	movw	r30, r16
     4f6:	80 83       	st	Z, r24
void hard_sequence_init()
{
	sequence_len = HARD_LENGTH;
	sequence = (uint8_t *)malloc(HARD_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     4f8:	cf 5f       	subi	r28, 0xFF	; 255
     4fa:	cf 30       	cpi	r28, 0x0F	; 15
     4fc:	70 f3       	brcs	.-36     	; 0x4da <hard_sequence_init+0x28>
	{
		sequence[i] = (rand() % 15) + 1;
	}
}
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <games_init>:

void games_init(GameModes mode)
{

	if (mode == easy)
     506:	81 11       	cpse	r24, r1
     508:	19 c0       	rjmp	.+50     	; 0x53c <games_init+0x36>
	{
		sequence_init = easy_sequence_init;
     50a:	87 e2       	ldi	r24, 0x27	; 39
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <sequence_init>
     512:	90 93 da 21 	sts	0x21DA, r25	; 0x8021da <sequence_init+0x1>
		handle_game_won_state = game_won_easy;
     516:	8d ed       	ldi	r24, 0xDD	; 221
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <handle_game_won_state>
     51e:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <handle_game_won_state+0x1>
		start_notes = easy_game_start_notes;
     522:	8e e1       	ldi	r24, 0x1E	; 30
     524:	90 e2       	ldi	r25, 0x20	; 32
     526:	80 93 d7 21 	sts	0x21D7, r24	; 0x8021d7 <start_notes>
     52a:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <start_notes+0x1>
		start_size = sizeof(easy_game_start_notes);
     52e:	84 e0       	ldi	r24, 0x04	; 4
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <start_size>
     536:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <start_size+0x1>
     53a:	08 95       	ret
	}
	else
	{
		sequence_init = hard_sequence_init;
     53c:	89 e5       	ldi	r24, 0x59	; 89
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <sequence_init>
     544:	90 93 da 21 	sts	0x21DA, r25	; 0x8021da <sequence_init+0x1>
		handle_game_won_state = game_won_hard;
     548:	83 e1       	ldi	r24, 0x13	; 19
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <handle_game_won_state>
     550:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <handle_game_won_state+0x1>
		start_notes = hard_game_start_notes;
     554:	8a e1       	ldi	r24, 0x1A	; 26
     556:	90 e2       	ldi	r25, 0x20	; 32
     558:	80 93 d7 21 	sts	0x21D7, r24	; 0x8021d7 <start_notes>
     55c:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <start_notes+0x1>
		start_size = sizeof(hard_game_start_notes);
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <start_size>
     568:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <start_size+0x1>
     56c:	08 95       	ret

0000056e <games_step>:
	
	
}

void games_step(uint8_t buttons)
{
     56e:	cf 93       	push	r28
     570:	c8 2f       	mov	r28, r24
	switch (game_state)
     572:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <__data_end>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	09 f4       	brne	.+2      	; 0x57c <games_step+0xe>
     57a:	ab c0       	rjmp	.+342    	; 0x6d2 <games_step+0x164>
     57c:	30 f4       	brcc	.+12     	; 0x58a <games_step+0x1c>
     57e:	88 23       	and	r24, r24
     580:	59 f0       	breq	.+22     	; 0x598 <games_step+0x2a>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	09 f4       	brne	.+2      	; 0x588 <games_step+0x1a>
     586:	4c c0       	rjmp	.+152    	; 0x620 <games_step+0xb2>
     588:	46 c1       	rjmp	.+652    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	09 f4       	brne	.+2      	; 0x590 <games_step+0x22>
     58e:	08 c1       	rjmp	.+528    	; 0x7a0 <games_step+0x232>
     590:	84 30       	cpi	r24, 0x04	; 4
     592:	09 f4       	brne	.+2      	; 0x596 <games_step+0x28>
     594:	0b c1       	rjmp	.+534    	; 0x7ac <games_step+0x23e>
     596:	3f c1       	rjmp	.+638    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		case game_start:
		
			if (!(sequence_initialized))
     598:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <sequence_initialized>
     59c:	81 11       	cpse	r24, r1
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <games_step+0x42>
			{
				sequence_init();
     5a0:	e0 91 d9 21 	lds	r30, 0x21D9	; 0x8021d9 <sequence_init>
     5a4:	f0 91 da 21 	lds	r31, 0x21DA	; 0x8021da <sequence_init+0x1>
     5a8:	09 95       	icall
				sequence_initialized = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <sequence_initialized>
			}		
		
			play_lights_game(expander_read_ports(), 0);
     5b0:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
			if (play_index == start_size && !(note_player_playing()))
     5ba:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	20 91 d3 21 	lds	r18, 0x21D3	; 0x8021d3 <start_size>
     5c4:	30 91 d4 21 	lds	r19, 0x21D4	; 0x8021d4 <start_size+0x1>
     5c8:	82 17       	cp	r24, r18
     5ca:	93 07       	cpc	r25, r19
     5cc:	a9 f4       	brne	.+42     	; 0x5f8 <games_step+0x8a>
     5ce:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     5d2:	81 11       	cpse	r24, r1
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <games_step+0x8a>
			{
				play_lights_game(expander_read_ports(), 0);
     5d6:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
				game_state = play_sequence;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     5e6:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     5ea:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     5ee:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
				progress_index = 1;
     5f2:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <progress_index>
				break;
     5f6:	0f c1       	rjmp	.+542    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			}
			
			if (!(note_player_playing()))
     5f8:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     5fc:	81 11       	cpse	r24, r1
     5fe:	0b c1       	rjmp	.+534    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			{
				note_play(start_notes[play_index++]);
     600:	e0 91 d7 21 	lds	r30, 0x21D7	; 0x8021d7 <start_notes>
     604:	f0 91 d8 21 	lds	r31, 0x21D8	; 0x8021d8 <start_notes+0x1>
     608:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	98 0f       	add	r25, r24
     610:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <play_index>
     614:	e8 0f       	add	r30, r24
     616:	f1 1d       	adc	r31, r1
     618:	80 81       	ld	r24, Z
     61a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
     61e:	fb c0       	rjmp	.+502    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			

			break;
		case play_sequence:
		
			if (timer_counter < STEP_PAUSE)
     620:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     624:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	91 05       	cpc	r25, r1
     62c:	30 f4       	brcc	.+12     	; 0x63a <games_step+0xcc>
			{
				timer_counter++;
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <timer_counter>
     634:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <timer_counter+0x1>
				break;
     638:	ee c0       	rjmp	.+476    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			}
		
			if (timer_counter < NOTE_PAUSE)
     63a:	08 97       	sbiw	r24, 0x08	; 8
     63c:	78 f4       	brcc	.+30     	; 0x65c <games_step+0xee>
			{
				play_lights_game(expander_read_ports(), 0);
     63e:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
				timer_counter++;
     648:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     64c:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <timer_counter>
     656:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <timer_counter+0x1>
				break;
     65a:	dd c0       	rjmp	.+442    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			}
		
			if (play_index == progress_index)
     65c:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <play_index>
     660:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <progress_index>
     664:	98 13       	cpse	r25, r24
     666:	0f c0       	rjmp	.+30     	; 0x686 <games_step+0x118>
			{
			
				play_lights_game(expander_read_ports(), 0);
     668:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
				game_state = get_input;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     678:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     67c:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     680:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>

				break;
     684:	c8 c0       	rjmp	.+400    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			}
		
			if (!(note_player_playing()))
     686:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     68a:	81 11       	cpse	r24, r1
     68c:	c4 c0       	rjmp	.+392    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			{
				play_lights_game(expander_read_ports(), sequence[play_index]);
     68e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     692:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     696:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     69a:	e8 0f       	add	r30, r24
     69c:	f1 1d       	adc	r31, r1
     69e:	c0 81       	ld	r28, Z
     6a0:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     6a4:	6c 2f       	mov	r22, r28
     6a6:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
				note_play(sequence[play_index++]);
     6aa:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     6ae:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     6b2:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	98 0f       	add	r25, r24
     6ba:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <play_index>
     6be:	e8 0f       	add	r30, r24
     6c0:	f1 1d       	adc	r31, r1
     6c2:	80 81       	ld	r24, Z
     6c4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
				timer_counter = 0;
     6c8:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     6cc:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
     6d0:	a2 c0       	rjmp	.+324    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		
		
			break;
		case get_input:
		
			play_lights_game(expander_read_ports(), buttons);
     6d2:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     6d6:	6c 2f       	mov	r22, r28
     6d8:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
		
			if (timer_counter++ > INPUT_TIMEOUT && !(note_player_playing()))
     6dc:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     6e0:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     6e4:	9c 01       	movw	r18, r24
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     6ee:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     6f2:	4a 97       	sbiw	r24, 0x1a	; 26
     6f4:	98 f0       	brcs	.+38     	; 0x71c <games_step+0x1ae>
     6f6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     6fa:	81 11       	cpse	r24, r1
     6fc:	0f c0       	rjmp	.+30     	; 0x71c <games_step+0x1ae>
			{
				play_lights_game(expander_read_ports(), 0);
     6fe:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
				game_state = game_lost;
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
				timer_counter = 0;
     70e:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     712:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
				play_index = 0;
     716:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>

				break;
     71a:	7d c0       	rjmp	.+250    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			}

		
			if (buttons && expander_get_val_changed() && !(note_player_playing()))
     71c:	cc 23       	and	r28, r28
     71e:	09 f4       	brne	.+2      	; 0x722 <games_step+0x1b4>
     720:	7a c0       	rjmp	.+244    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     722:	0e 94 59 05 	call	0xab2	; 0xab2 <expander_get_val_changed>
     726:	88 23       	and	r24, r24
     728:	09 f4       	brne	.+2      	; 0x72c <games_step+0x1be>
     72a:	75 c0       	rjmp	.+234    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     72c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     730:	81 11       	cpse	r24, r1
     732:	71 c0       	rjmp	.+226    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			{
				timer_counter = 0;
     734:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     738:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
			
				if (buttons == sequence[play_index])
     73c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     740:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <sequence>
     744:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <sequence+0x1>
     748:	e8 0f       	add	r30, r24
     74a:	f1 1d       	adc	r31, r1
     74c:	80 81       	ld	r24, Z
     74e:	c8 13       	cpse	r28, r24
     750:	21 c0       	rjmp	.+66     	; 0x794 <games_step+0x226>
				{
					note_play(buttons);
     752:	8c 2f       	mov	r24, r28
     754:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
					play_index++;
     758:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <play_index>
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
				

					if (play_index == progress_index)
     762:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <progress_index>
     766:	89 13       	cpse	r24, r25
     768:	56 c0       	rjmp	.+172    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
					{
						progress_index++;
     76a:	9f 5f       	subi	r25, 0xFF	; 255
     76c:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <progress_index>
					
						if (progress_index > sequence_len)
     770:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <sequence_len>
     774:	89 17       	cp	r24, r25
     776:	20 f4       	brcc	.+8      	; 0x780 <games_step+0x212>
						{
							game_state = game_won;
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
     77e:	03 c0       	rjmp	.+6      	; 0x786 <games_step+0x218>
						}
						else
						{
							game_state = play_sequence;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
						}
					
						timer_counter = 0;
     786:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     78a:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
						play_index = 0;
     78e:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
						break;
     792:	41 c0       	rjmp	.+130    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
					}
				}
				else
				{
					game_state = game_lost;
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <__data_end>
					timer_counter = 0;
					play_index = 0;
     79a:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
					break;
     79e:	3b c0       	rjmp	.+118    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
				}
			}
		
			break;
		case game_won:
			handle_game_won_state();
     7a0:	e0 91 d5 21 	lds	r30, 0x21D5	; 0x8021d5 <handle_game_won_state>
     7a4:	f0 91 d6 21 	lds	r31, 0x21D6	; 0x8021d6 <handle_game_won_state+0x1>
     7a8:	09 95       	icall
			break;
     7aa:	35 c0       	rjmp	.+106    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		case game_lost:
		
			play_lights_game_over();
     7ac:	0e 94 ed 08 	call	0x11da	; 0x11da <play_lights_game_over>
			if (!(note_player_playing()))
     7b0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
     7b4:	81 11       	cpse	r24, r1
     7b6:	2f c0       	rjmp	.+94     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			{
				if (play_index < sizeof(game_lost_notes))
     7b8:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <play_index>
     7bc:	e4 30       	cpi	r30, 0x04	; 4
     7be:	78 f4       	brcc	.+30     	; 0x7de <games_step+0x270>
				{
					timer_counter = 0;
     7c0:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     7c4:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
					note_play(game_lost_notes[play_index++]);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	8e 0f       	add	r24, r30
     7cc:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <play_index>
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e6 5f       	subi	r30, 0xF6	; 246
     7d4:	ff 4d       	sbci	r31, 0xDF	; 223
     7d6:	80 81       	ld	r24, Z
     7d8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
     7dc:	1c c0       	rjmp	.+56     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
				}
				else
				{
					if (timer_counter++ > STEP_PAUSE)
     7de:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <timer_counter>
     7e2:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <timer_counter+0x1>
     7e6:	9c 01       	movw	r18, r24
     7e8:	2f 5f       	subi	r18, 0xFF	; 255
     7ea:	3f 4f       	sbci	r19, 0xFF	; 255
     7ec:	20 93 a3 21 	sts	0x21A3, r18	; 0x8021a3 <timer_counter>
     7f0:	30 93 a4 21 	sts	0x21A4, r19	; 0x8021a4 <timer_counter+0x1>
     7f4:	06 97       	sbiw	r24, 0x06	; 6
     7f6:	78 f0       	brcs	.+30     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
					{
						play_index = 0;
     7f8:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <play_index>
						timer_counter = 0;
     7fc:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <timer_counter>
     800:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <timer_counter+0x1>
						sequence_initialized = 0;
     804:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <sequence_initialized>
						game_state = game_start;
     808:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <__data_end>
						play_lights_game(expander_read_ports(), 0);
     80c:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	0e 94 a2 08 	call	0x1144	; 0x1144 <play_lights_game>
			}

			break;
	}
	
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
	
	while(twi_transfer_complete!=1);

	return 0;
}
     81a:	84 e9       	ldi	r24, 0x94	; 148
     81c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
     820:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
     824:	e1 e8       	ldi	r30, 0x81	; 129
     826:	f4 e0       	ldi	r31, 0x04	; 4
     828:	80 81       	ld	r24, Z
     82a:	88 6f       	ori	r24, 0xF8	; 248
     82c:	80 83       	st	Z, r24
     82e:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
     832:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
     836:	e4 e8       	ldi	r30, 0x84	; 132
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	80 81       	ld	r24, Z
     83c:	8d 6c       	ori	r24, 0xCD	; 205
     83e:	80 83       	st	Z, r24
     840:	08 95       	ret

00000842 <twi_read>:
     842:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <twi_no_of_bytes>
     846:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <twi_no_of_bytes+0x1>
     84a:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <twi_data_count>
     84e:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <twi_data_count+0x1>
     852:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <twi_transfer_complete>
     856:	60 93 e5 21 	sts	0x21E5, r22	; 0x8021e5 <twi_data>
     85a:	70 93 e6 21 	sts	0x21E6, r23	; 0x8021e6 <twi_data+0x1>
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	81 60       	ori	r24, 0x01	; 1
     866:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
     86a:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	e1 f7       	brne	.-8      	; 0x86a <twi_read+0x28>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret

00000876 <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     876:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     87a:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <twi_no_of_bytes>
     87e:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     882:	10 92 e1 21 	sts	0x21E1, r1	; 0x8021e1 <twi_data_count>
     886:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     88a:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <twi_transfer_complete>
	
	twi_data=data;
     88e:	60 93 e5 21 	sts	0x21E5, r22	; 0x8021e5 <twi_data>
     892:	70 93 e6 21 	sts	0x21E6, r23	; 0x8021e6 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     896:	88 0f       	add	r24, r24
     898:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     89c:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	e1 f7       	brne	.-8      	; 0x89c <twi_write+0x26>
	
	return 0;
}
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret

000008a8 <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     8c2:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     8c6:	83 ff       	sbrs	r24, 3
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     8d0:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     8d4:	82 fd       	sbrc	r24, 2
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__vector_11+0x38>
     8d8:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     8dc:	84 ff       	sbrs	r24, 4
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     8e0:	e3 e8       	ldi	r30, 0x83	; 131
     8e2:	f4 e0       	ldi	r31, 0x04	; 4
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     8ec:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     8f0:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <twi_transfer_complete>
     8f4:	88 23       	and	r24, r24
     8f6:	31 f0       	breq	.+12     	; 0x904 <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     8f8:	e4 e8       	ldi	r30, 0x84	; 132
     8fa:	f4 e0       	ldi	r31, 0x04	; 4
     8fc:	80 81       	ld	r24, Z
     8fe:	80 64       	ori	r24, 0x40	; 64
     900:	80 83       	st	Z, r24
		return;
     902:	79 c0       	rjmp	.+242    	; 0x9f6 <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     904:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     908:	86 ff       	sbrs	r24, 6
     90a:	47 c0       	rjmp	.+142    	; 0x99a <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     90c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     910:	84 fd       	sbrc	r24, 4
     912:	43 c0       	rjmp	.+134    	; 0x99a <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     914:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <twi_repeat_mode>
     918:	88 23       	and	r24, r24
     91a:	c9 f0       	breq	.+50     	; 0x94e <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     91c:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <twi_repeat_cmd_sent>
     920:	88 23       	and	r24, r24
     922:	69 f0       	breq	.+26     	; 0x93e <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     924:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <twi_repeat_data>
     928:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     92c:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     930:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	80 93 e1 21 	sts	0x21E1, r24	; 0x8021e1 <twi_data_count>
     93a:	90 93 e2 21 	sts	0x21E2, r25	; 0x8021e2 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     93e:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <twi_repeat_cmd>
     942:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <twi_repeat_cmd_sent>
     94c:	15 c0       	rjmp	.+42     	; 0x978 <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     94e:	20 91 e5 21 	lds	r18, 0x21E5	; 0x8021e5 <twi_data>
     952:	30 91 e6 21 	lds	r19, 0x21E6	; 0x8021e6 <twi_data+0x1>
     956:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     95a:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     95e:	ac 01       	movw	r20, r24
     960:	4f 5f       	subi	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	40 93 e1 21 	sts	0x21E1, r20	; 0x8021e1 <twi_data_count>
     968:	50 93 e2 21 	sts	0x21E2, r21	; 0x8021e2 <twi_data_count+0x1>
     96c:	f9 01       	movw	r30, r18
     96e:	e8 0f       	add	r30, r24
     970:	f9 1f       	adc	r31, r25
     972:	80 81       	ld	r24, Z
     974:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     978:	20 91 e1 21 	lds	r18, 0x21E1	; 0x8021e1 <twi_data_count>
     97c:	30 91 e2 21 	lds	r19, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     980:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <twi_no_of_bytes>
     984:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <twi_no_of_bytes+0x1>
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	31 f4       	brne	.+12     	; 0x99a <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     99a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     99e:	88 23       	and	r24, r24
     9a0:	54 f5       	brge	.+84     	; 0x9f6 <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     9a2:	20 91 e5 21 	lds	r18, 0x21E5	; 0x8021e5 <twi_data>
     9a6:	30 91 e6 21 	lds	r19, 0x21E6	; 0x8021e6 <twi_data+0x1>
     9aa:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <twi_data_count>
     9ae:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     9b2:	ac 01       	movw	r20, r24
     9b4:	4f 5f       	subi	r20, 0xFF	; 255
     9b6:	5f 4f       	sbci	r21, 0xFF	; 255
     9b8:	40 93 e1 21 	sts	0x21E1, r20	; 0x8021e1 <twi_data_count>
     9bc:	50 93 e2 21 	sts	0x21E2, r21	; 0x8021e2 <twi_data_count+0x1>
     9c0:	f9 01       	movw	r30, r18
     9c2:	e8 0f       	add	r30, r24
     9c4:	f9 1f       	adc	r31, r25
     9c6:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     9ca:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     9cc:	20 91 e1 21 	lds	r18, 0x21E1	; 0x8021e1 <twi_data_count>
     9d0:	30 91 e2 21 	lds	r19, 0x21E2	; 0x8021e2 <twi_data_count+0x1>
     9d4:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <twi_no_of_bytes>
     9d8:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <twi_no_of_bytes+0x1>
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	39 f4       	brne	.+14     	; 0x9f0 <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     9e2:	87 e0       	ldi	r24, 0x07	; 7
     9e4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <twi_transfer_complete>
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <expander_read_port>:
	twi_write(addr, cmd, 3);
	last_val = expander_read_ports();
}

uint8_t expander_read_port(uint8_t portAddr)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	00 d0       	rcall	.+0      	; 0xa16 <expander_read_port+0x6>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     a1a:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	be 01       	movw	r22, r28
     a22:	6e 5f       	subi	r22, 0xFE	; 254
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	0e 94 3b 04 	call	0x876	; 0x876 <twi_write>
	
	twi_read(addr, &port_val, 1);
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	0e 94 21 04 	call	0x842	; 0x842 <twi_read>
	
	return port_val;
	
}
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <expander_read_ports>:

uint16_t expander_read_ports()
{
     a48:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 08 05 	call	0xa10	; 0xa10 <expander_read_port>
     a50:	c8 2f       	mov	r28, r24
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	0e 94 08 05 	call	0xa10	; 0xa10 <expander_read_port>
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	98 2f       	mov	r25, r24
     a5c:	88 27       	eor	r24, r24
	return port_data;
	
}
     a5e:	8c 0f       	add	r24, r28
     a60:	91 1d       	adc	r25, r1
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <expander_init>:
#include "i2c.h"

volatile uint16_t last_val = 0;

void expander_init()
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <expander_init+0x6>
     a6c:	1f 92       	push	r1
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     a72:	0e 94 0d 04 	call	0x81a	; 0x81a <twi_init>
	
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	8a 83       	std	Y+2, r24	; 0x02
     a7e:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     a80:	43 e0       	ldi	r20, 0x03	; 3
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	be 01       	movw	r22, r28
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	80 e2       	ldi	r24, 0x20	; 32
     a8c:	0e 94 3b 04 	call	0x876	; 0x876 <twi_write>
	last_val = expander_read_ports();
     a90:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
     a94:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     a98:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
}
     a9c:	23 96       	adiw	r28, 0x03	; 3
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <expander_get_last_value>:
	
}

uint16_t expander_get_last_value()
{
	return last_val;
     aa8:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <last_val>
     aac:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <last_val+0x1>
}
     ab0:	08 95       	ret

00000ab2 <expander_get_val_changed>:

uint8_t expander_get_val_changed()
{
	uint16_t val = expander_read_ports();
     ab2:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
	
	if (val == 0xFFFF)
     ab6:	8f 3f       	cpi	r24, 0xFF	; 255
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	92 07       	cpc	r25, r18
     abc:	d1 f0       	breq	.+52     	; 0xaf2 <expander_get_val_changed+0x40>
	{
		return 0;
	}
	
	if (val == last_val)
     abe:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <last_val>
     ac2:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <last_val+0x1>
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	a9 f0       	breq	.+42     	; 0xaf6 <expander_get_val_changed+0x44>
	{
		return 0;
	}
	
	if (val > last_val)
     acc:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <last_val>
     ad0:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <last_val+0x1>
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	30 f4       	brcc	.+12     	; 0xae6 <expander_get_val_changed+0x34>
	{
		last_val = val;
     ada:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     ade:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
		return 2;		
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	08 95       	ret
	}
	
	last_val = val;
     ae6:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <last_val>
     aea:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <last_val+0x1>
	return 1;	
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	08 95       	ret
{
	uint16_t val = expander_read_ports();
	
	if (val == 0xFFFF)
	{
		return 0;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret
	}
	
	if (val == last_val)
	{
		return 0;
     af6:	80 e0       	ldi	r24, 0x00	; 0
		return 2;		
	}
	
	last_val = val;
	return 1;	
     af8:	08 95       	ret

00000afa <play_lights_overlay_note_button_leds>:



void play_lights_overlay_note_button_leds(uint8_t buttons)
{
	if (buttons & 0x01)
     afa:	80 ff       	sbrs	r24, 0
     afc:	12 c0       	rjmp	.+36     	; 0xb22 <play_lights_overlay_note_button_leds+0x28>
	{
		leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
     afe:	e8 e7       	ldi	r30, 0x78	; 120
     b00:	f2 e2       	ldi	r31, 0x22	; 34
     b02:	10 82       	st	Z, r1
     b04:	90 e4       	ldi	r25, 0x40	; 64
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	12 82       	std	Z+2, r1	; 0x02
     b0a:	10 82       	st	Z, r1
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
     b10:	eb e7       	ldi	r30, 0x7B	; 123
     b12:	f2 e2       	ldi	r31, 0x22	; 34
     b14:	10 82       	st	Z, r1
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	12 82       	std	Z+2, r1	; 0x02
     b1a:	10 82       	st	Z, r1
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	12 82       	std	Z+2, r1	; 0x02
     b20:	10 c0       	rjmp	.+32     	; 0xb42 <play_lights_overlay_note_button_leds+0x48>
	}
	else
	{
		leds[GRUMBO_LED_COUNT] = game_colors[LED_OFF];
     b22:	e8 e7       	ldi	r30, 0x78	; 120
     b24:	f2 e2       	ldi	r31, 0x22	; 34
     b26:	10 82       	st	Z, r1
     b28:	11 82       	std	Z+1, r1	; 0x01
     b2a:	12 82       	std	Z+2, r1	; 0x02
     b2c:	10 82       	st	Z, r1
     b2e:	11 82       	std	Z+1, r1	; 0x01
     b30:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[LED_OFF];
     b32:	eb e7       	ldi	r30, 0x7B	; 123
     b34:	f2 e2       	ldi	r31, 0x22	; 34
     b36:	10 82       	st	Z, r1
     b38:	11 82       	std	Z+1, r1	; 0x01
     b3a:	12 82       	std	Z+2, r1	; 0x02
     b3c:	10 82       	st	Z, r1
     b3e:	11 82       	std	Z+1, r1	; 0x01
     b40:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x02)
     b42:	81 ff       	sbrs	r24, 1
     b44:	12 c0       	rjmp	.+36     	; 0xb6a <play_lights_overlay_note_button_leds+0x70>
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
     b46:	ee e7       	ldi	r30, 0x7E	; 126
     b48:	f2 e2       	ldi	r31, 0x22	; 34
     b4a:	90 e4       	ldi	r25, 0x40	; 64
     b4c:	90 83       	st	Z, r25
     b4e:	11 82       	std	Z+1, r1	; 0x01
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	90 83       	st	Z, r25
     b54:	11 82       	std	Z+1, r1	; 0x01
     b56:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
     b58:	e1 e8       	ldi	r30, 0x81	; 129
     b5a:	f2 e2       	ldi	r31, 0x22	; 34
     b5c:	90 83       	st	Z, r25
     b5e:	11 82       	std	Z+1, r1	; 0x01
     b60:	12 82       	std	Z+2, r1	; 0x02
     b62:	90 83       	st	Z, r25
     b64:	11 82       	std	Z+1, r1	; 0x01
     b66:	12 82       	std	Z+2, r1	; 0x02
     b68:	10 c0       	rjmp	.+32     	; 0xb8a <play_lights_overlay_note_button_leds+0x90>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[LED_OFF];
     b6a:	ee e7       	ldi	r30, 0x7E	; 126
     b6c:	f2 e2       	ldi	r31, 0x22	; 34
     b6e:	10 82       	st	Z, r1
     b70:	11 82       	std	Z+1, r1	; 0x01
     b72:	12 82       	std	Z+2, r1	; 0x02
     b74:	10 82       	st	Z, r1
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[LED_OFF];
     b7a:	e1 e8       	ldi	r30, 0x81	; 129
     b7c:	f2 e2       	ldi	r31, 0x22	; 34
     b7e:	10 82       	st	Z, r1
     b80:	11 82       	std	Z+1, r1	; 0x01
     b82:	12 82       	std	Z+2, r1	; 0x02
     b84:	10 82       	st	Z, r1
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x04)
     b8a:	82 ff       	sbrs	r24, 2
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <play_lights_overlay_note_button_leds+0xb8>
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
     b8e:	e4 e8       	ldi	r30, 0x84	; 132
     b90:	f2 e2       	ldi	r31, 0x22	; 34
     b92:	10 82       	st	Z, r1
     b94:	11 82       	std	Z+1, r1	; 0x01
     b96:	90 e4       	ldi	r25, 0x40	; 64
     b98:	92 83       	std	Z+2, r25	; 0x02
     b9a:	10 82       	st	Z, r1
     b9c:	11 82       	std	Z+1, r1	; 0x01
     b9e:	92 83       	std	Z+2, r25	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
     ba0:	e7 e8       	ldi	r30, 0x87	; 135
     ba2:	f2 e2       	ldi	r31, 0x22	; 34
     ba4:	10 82       	st	Z, r1
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	92 83       	std	Z+2, r25	; 0x02
     baa:	10 82       	st	Z, r1
     bac:	11 82       	std	Z+1, r1	; 0x01
     bae:	92 83       	std	Z+2, r25	; 0x02
     bb0:	10 c0       	rjmp	.+32     	; 0xbd2 <play_lights_overlay_note_button_leds+0xd8>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[LED_OFF];
     bb2:	e4 e8       	ldi	r30, 0x84	; 132
     bb4:	f2 e2       	ldi	r31, 0x22	; 34
     bb6:	10 82       	st	Z, r1
     bb8:	11 82       	std	Z+1, r1	; 0x01
     bba:	12 82       	std	Z+2, r1	; 0x02
     bbc:	10 82       	st	Z, r1
     bbe:	11 82       	std	Z+1, r1	; 0x01
     bc0:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[LED_OFF];
     bc2:	e7 e8       	ldi	r30, 0x87	; 135
     bc4:	f2 e2       	ldi	r31, 0x22	; 34
     bc6:	10 82       	st	Z, r1
     bc8:	11 82       	std	Z+1, r1	; 0x01
     bca:	12 82       	std	Z+2, r1	; 0x02
     bcc:	10 82       	st	Z, r1
     bce:	11 82       	std	Z+1, r1	; 0x01
     bd0:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x08)
     bd2:	83 ff       	sbrs	r24, 3
     bd4:	12 c0       	rjmp	.+36     	; 0xbfa <play_lights_overlay_note_button_leds+0x100>
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
     bd6:	ea e8       	ldi	r30, 0x8A	; 138
     bd8:	f2 e2       	ldi	r31, 0x22	; 34
     bda:	80 e2       	ldi	r24, 0x20	; 32
     bdc:	80 83       	st	Z, r24
     bde:	81 83       	std	Z+1, r24	; 0x01
     be0:	12 82       	std	Z+2, r1	; 0x02
     be2:	80 83       	st	Z, r24
     be4:	81 83       	std	Z+1, r24	; 0x01
     be6:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
     be8:	ed e8       	ldi	r30, 0x8D	; 141
     bea:	f2 e2       	ldi	r31, 0x22	; 34
     bec:	80 83       	st	Z, r24
     bee:	81 83       	std	Z+1, r24	; 0x01
     bf0:	12 82       	std	Z+2, r1	; 0x02
     bf2:	80 83       	st	Z, r24
     bf4:	81 83       	std	Z+1, r24	; 0x01
     bf6:	12 82       	std	Z+2, r1	; 0x02
     bf8:	08 95       	ret
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[LED_OFF];
     bfa:	ea e8       	ldi	r30, 0x8A	; 138
     bfc:	f2 e2       	ldi	r31, 0x22	; 34
     bfe:	10 82       	st	Z, r1
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	12 82       	std	Z+2, r1	; 0x02
     c04:	10 82       	st	Z, r1
     c06:	11 82       	std	Z+1, r1	; 0x01
     c08:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[LED_OFF];
     c0a:	ed e8       	ldi	r30, 0x8D	; 141
     c0c:	f2 e2       	ldi	r31, 0x22	; 34
     c0e:	10 82       	st	Z, r1
     c10:	11 82       	std	Z+1, r1	; 0x01
     c12:	12 82       	std	Z+2, r1	; 0x02
     c14:	10 82       	st	Z, r1
     c16:	11 82       	std	Z+1, r1	; 0x01
     c18:	12 82       	std	Z+2, r1	; 0x02
     c1a:	08 95       	ret

00000c1c <overlay_dingle_pos>:
	}
}
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	bc 01       	movw	r22, r24
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	42 c0       	rjmp	.+132    	; 0xcaa <overlay_dingle_pos+0x8e>
	{
		if (!(dingle_pos & (0x01 << i)))
     c26:	8d 2f       	mov	r24, r29
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	0d 2e       	mov	r0, r29
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <overlay_dingle_pos+0x1a>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <overlay_dingle_pos+0x16>
     c3a:	26 23       	and	r18, r22
     c3c:	37 23       	and	r19, r23
     c3e:	23 2b       	or	r18, r19
     c40:	99 f5       	brne	.+102    	; 0xca8 <overlay_dingle_pos+0x8c>
			//if i is 0, since we are using unsigned ints, we have to manually calc the starting index
			//in the LED array
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
     c42:	dd 23       	and	r29, r29
     c44:	29 f0       	breq	.+10     	; 0xc50 <overlay_dingle_pos+0x34>
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
			}
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	98 2f       	mov	r25, r24
     c4a:	99 0f       	add	r25, r25
     c4c:	89 0f       	add	r24, r25
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <overlay_dingle_pos+0x36>
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
     c50:	8d e2       	ldi	r24, 0x2D	; 45
     c52:	c0 e0       	ldi	r28, 0x00	; 0
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <overlay_dingle_pos+0x88>
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
			{				
				leds[led_i % GRUMBO_LED_COUNT] = pos_leds[j];
     c56:	9b ea       	ldi	r25, 0xAB	; 171
     c58:	89 9f       	mul	r24, r25
     c5a:	91 2d       	mov	r25, r1
     c5c:	11 24       	eor	r1, r1
     c5e:	92 95       	swap	r25
     c60:	96 95       	lsr	r25
     c62:	97 70       	andi	r25, 0x07	; 7
     c64:	28 2f       	mov	r18, r24
     c66:	30 e3       	ldi	r19, 0x30	; 48
     c68:	93 9f       	mul	r25, r19
     c6a:	20 19       	sub	r18, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4c 2f       	mov	r20, r28
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	2e 0f       	add	r18, r30
     c7c:	3f 1f       	adc	r19, r31
     c7e:	f9 01       	movw	r30, r18
     c80:	e8 51       	subi	r30, 0x18	; 24
     c82:	fe 4d       	sbci	r31, 0xDE	; 222
     c84:	da 01       	movw	r26, r20
     c86:	aa 0f       	add	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	4a 0f       	add	r20, r26
     c8c:	5b 1f       	adc	r21, r27
     c8e:	da 01       	movw	r26, r20
     c90:	a2 5a       	subi	r26, 0xA2	; 162
     c92:	bf 4d       	sbci	r27, 0xDF	; 223
     c94:	2d 91       	ld	r18, X+
     c96:	3d 91       	ld	r19, X+
     c98:	4c 91       	ld	r20, X
     c9a:	20 83       	st	Z, r18
     c9c:	31 83       	std	Z+1, r19	; 0x01
     c9e:	42 83       	std	Z+2, r20	; 0x02
				led_i++;
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
     ca2:	cf 5f       	subi	r28, 0xFF	; 255
     ca4:	c7 30       	cpi	r28, 0x07	; 7
     ca6:	b8 f2       	brcs	.-82     	; 0xc56 <overlay_dingle_pos+0x3a>
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     ca8:	df 5f       	subi	r29, 0xFF	; 255
     caa:	d0 31       	cpi	r29, 0x10	; 16
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <overlay_dingle_pos+0x94>
     cae:	bb cf       	rjmp	.-138    	; 0xc26 <overlay_dingle_pos+0xa>
				led_i++;
			}
		}
		
	}
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <play_lights_standby>:
uint8_t red = 2;
uint8_t green = 2;
uint8_t blue = 2;

void play_lights_standby()
{
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
	ws2812drv_led_t color = {.r = red, .g = green, .b = blue};
     cbc:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <green>
     cc0:	c2 2e       	mov	r12, r18
     cc2:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <red>
     cc6:	d9 2e       	mov	r13, r25
     cc8:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <blue>
     ccc:	e8 2e       	mov	r14, r24
	blue++;
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <blue>
	if (blue >= MAX_BRIGHTNESS / 8)
     cd4:	88 30       	cpi	r24, 0x08	; 8
     cd6:	88 f0       	brcs	.+34     	; 0xcfa <play_lights_standby+0x44>
	{
		blue = 2;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <blue>
		red++;
     cde:	9f 5f       	subi	r25, 0xFF	; 255
     ce0:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <red>
		if (red >= MAX_BRIGHTNESS / 8)
     ce4:	98 30       	cpi	r25, 0x08	; 8
     ce6:	48 f0       	brcs	.+18     	; 0xcfa <play_lights_standby+0x44>
		{
			red = 2;
     ce8:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <red>
			green++;
     cec:	2f 5f       	subi	r18, 0xFF	; 255
     cee:	20 93 23 20 	sts	0x2023, r18	; 0x802023 <green>
			if (green >= MAX_BRIGHTNESS / 8)
     cf2:	28 30       	cpi	r18, 0x08	; 8
     cf4:	10 f0       	brcs	.+4      	; 0xcfa <play_lights_standby+0x44>
			{
				green = 2;
     cf6:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <green>
uint8_t red = 2;
uint8_t green = 2;
uint8_t blue = 2;

void play_lights_standby()
{
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <play_lights_standby+0x64>
	
	
	
	for (uint8_t i = 0; i < LED_COUNT; i++)
	{
		leds[i] = color;
     cfe:	82 2f       	mov	r24, r18
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	8e 0f       	add	r24, r30
     d0a:	9f 1f       	adc	r25, r31
     d0c:	fc 01       	movw	r30, r24
     d0e:	e8 51       	subi	r30, 0x18	; 24
     d10:	fe 4d       	sbci	r31, 0xDE	; 222
     d12:	c0 82       	st	Z, r12
     d14:	d1 82       	std	Z+1, r13	; 0x01
     d16:	e2 82       	std	Z+2, r14	; 0x02
		}
	}
	
	
	
	for (uint8_t i = 0; i < LED_COUNT; i++)
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	28 33       	cpi	r18, 0x38	; 56
     d1c:	80 f3       	brcs	.-32     	; 0xcfe <play_lights_standby+0x48>
	{
		leds[i] = color;
	}

	ws2812drv_start_transfer(leds, LED_COUNT);
     d1e:	68 e3       	ldi	r22, 0x38	; 56
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	88 ee       	ldi	r24, 0xE8	; 232
     d24:	91 e2       	ldi	r25, 0x21	; 33
     d26:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	08 95       	ret

00000d32 <play_lights_free_play>:

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
     d3e:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	36 c0       	rjmp	.+108    	; 0xdb0 <play_lights_free_play+0x7e>
	{
		leds[(i + offset) % GRUMBO_LED_COUNT] = rainbow_leds[i % RAINBOW_LED_COUNT];
     d44:	00 91 a9 21 	lds	r16, 0x21A9	; 0x8021a9 <offset>
     d48:	80 2f       	mov	r24, r16
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	81 0f       	add	r24, r17
     d4e:	91 1d       	adc	r25, r1
     d50:	60 e3       	ldi	r22, 0x30	; 48
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
     d58:	ac 01       	movw	r20, r24
     d5a:	9b ea       	ldi	r25, 0xAB	; 171
     d5c:	19 9f       	mul	r17, r25
     d5e:	91 2d       	mov	r25, r1
     d60:	11 24       	eor	r1, r1
     d62:	96 95       	lsr	r25
     d64:	96 95       	lsr	r25
     d66:	96 95       	lsr	r25
     d68:	89 2f       	mov	r24, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	98 0f       	add	r25, r24
     d6e:	89 2f       	mov	r24, r25
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	21 2f       	mov	r18, r17
     d76:	28 1b       	sub	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	da 01       	movw	r26, r20
     d7c:	aa 0f       	add	r26, r26
     d7e:	bb 1f       	adc	r27, r27
     d80:	4a 0f       	add	r20, r26
     d82:	5b 1f       	adc	r21, r27
     d84:	da 01       	movw	r26, r20
     d86:	a8 51       	subi	r26, 0x18	; 24
     d88:	be 4d       	sbci	r27, 0xDE	; 222
     d8a:	f9 01       	movw	r30, r18
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	2e 0f       	add	r18, r30
     d92:	3f 1f       	adc	r19, r31
     d94:	f9 01       	movw	r30, r18
     d96:	e6 5c       	subi	r30, 0xC6	; 198
     d98:	ff 4d       	sbci	r31, 0xDF	; 223
     d9a:	20 81       	ld	r18, Z
     d9c:	31 81       	ldd	r19, Z+1	; 0x01
     d9e:	42 81       	ldd	r20, Z+2	; 0x02
     da0:	2d 93       	st	X+, r18
     da2:	3d 93       	st	X+, r19
     da4:	4c 93       	st	X, r20
		
		if (offset == GRUMBO_LED_COUNT)
     da6:	00 33       	cpi	r16, 0x30	; 48
     da8:	11 f4       	brne	.+4      	; 0xdae <play_lights_free_play+0x7c>
		{
			offset = 0;
     daa:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     dae:	1f 5f       	subi	r17, 0xFF	; 255
     db0:	10 33       	cpi	r17, 0x30	; 48
     db2:	40 f2       	brcs	.-112    	; 0xd44 <play_lights_free_play+0x12>
		if (offset == GRUMBO_LED_COUNT)
		{
			offset = 0;
		}
	}
	offset++;
     db4:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
		
	play_lights_overlay_note_button_leds(buttons);
     dbe:	8f 2d       	mov	r24, r15
     dc0:	0e 94 7d 05 	call	0xafa	; 0xafa <play_lights_overlay_note_button_leds>
	overlay_dingle_pos(dingle_pos);
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <overlay_dingle_pos>
	ws2812drv_start_transfer(leds, LED_COUNT);
     dca:	68 e3       	ldi	r22, 0x38	; 56
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	88 ee       	ldi	r24, 0xE8	; 232
     dd0:	91 e2       	ldi	r25, 0x21	; 33
     dd2:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	08 95       	ret

00000de2 <play_lights_nyan>:



void play_lights_nyan()
{
     de2:	6f 92       	push	r6
     de4:	7f 92       	push	r7
     de6:	8f 92       	push	r8
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	cf 93       	push	r28
	uint8_t i = 0;
	uint8_t j = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	uint8_t margin = ((half - RAINBOW_LED_COUNT) / 2);
	
	if (offset == 0)
     df0:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     df4:	81 11       	cpse	r24, r1
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <play_lights_nyan+0x1e>
	{
		srand(get_seed);
     df8:	84 ea       	ldi	r24, 0xA4	; 164
     dfa:	9e e0       	ldi	r25, 0x0E	; 14
     dfc:	0e 94 1f 14 	call	0x283e	; 0x283e <srand>
	}
	
	if (!(offset % 2))
     e00:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     e04:	80 fd       	sbrc	r24, 0
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <play_lights_nyan+0x3c>
	{
		
		if (bump > 0)
     e08:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
     e0c:	18 16       	cp	r1, r24
     e0e:	24 f4       	brge	.+8      	; 0xe18 <play_lights_nyan+0x36>
		{
			bump = -1;
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <bump>
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <play_lights_nyan+0x3c>
		}
		else
		{
			bump = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <bump>
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	7b c0       	rjmp	.+246    	; 0xf1a <play_lights_nyan+0x138>
		}
	}
	
	for (i = 0; i < half; i++)
	{
		if (i < margin || i >= half - margin)
     e24:	96 30       	cpi	r25, 0x06	; 6
     e26:	28 f0       	brcs	.+10     	; 0xe32 <play_lights_nyan+0x50>
     e28:	a9 2f       	mov	r26, r25
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	a2 31       	cpi	r26, 0x12	; 18
     e2e:	b1 05       	cpc	r27, r1
     e30:	7c f1       	brlt	.+94     	; 0xe90 <play_lights_nyan+0xae>
		{
			
			leds[i + bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     e32:	e9 2f       	mov	r30, r25
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <bump>
     e3a:	02 2e       	mov	r0, r18
     e3c:	00 0c       	add	r0, r0
     e3e:	33 0b       	sbc	r19, r19
     e40:	df 01       	movw	r26, r30
     e42:	a2 0f       	add	r26, r18
     e44:	b3 1f       	adc	r27, r19
     e46:	bd 01       	movw	r22, r26
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	a6 0f       	add	r26, r22
     e4e:	b7 1f       	adc	r27, r23
     e50:	a8 51       	subi	r26, 0x18	; 24
     e52:	be 4d       	sbci	r27, 0xDE	; 222
     e54:	1c 92       	st	X, r1
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 92       	st	X, r1
     e5a:	11 97       	sbiw	r26, 0x01	; 1
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	1c 92       	st	X, r1
     e60:	12 97       	sbiw	r26, 0x02	; 2
     e62:	1c 92       	st	X, r1
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	1c 92       	st	X, r1
     e68:	11 97       	sbiw	r26, 0x01	; 1
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	1c 92       	st	X, r1
			leds[i + half - bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     e6e:	78 96       	adiw	r30, 0x18	; 24
     e70:	e2 1b       	sub	r30, r18
     e72:	f3 0b       	sbc	r31, r19
     e74:	9f 01       	movw	r18, r30
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	e2 0f       	add	r30, r18
     e7c:	f3 1f       	adc	r31, r19
     e7e:	e8 51       	subi	r30, 0x18	; 24
     e80:	fe 4d       	sbci	r31, 0xDE	; 222
     e82:	10 82       	st	Z, r1
     e84:	11 82       	std	Z+1, r1	; 0x01
     e86:	12 82       	std	Z+2, r1	; 0x02
     e88:	10 82       	st	Z, r1
     e8a:	11 82       	std	Z+1, r1	; 0x01
     e8c:	12 82       	std	Z+2, r1	; 0x02
     e8e:	44 c0       	rjmp	.+136    	; 0xf18 <play_lights_nyan+0x136>
		}
		else
		{
			
			leds[i + bump] = 	
     e90:	60 91 25 20 	lds	r22, 0x2025	; 0x802025 <bump>
     e94:	06 2e       	mov	r0, r22
     e96:	00 0c       	add	r0, r0
     e98:	77 0b       	sbc	r23, r23
     e9a:	9d 01       	movw	r18, r26
     e9c:	26 0f       	add	r18, r22
     e9e:	37 1f       	adc	r19, r23
     ea0:	61 2c       	mov	r6, r1
     ea2:	68 94       	set
     ea4:	77 24       	eor	r7, r7
     ea6:	74 f8       	bld	r7, 4
     ea8:	68 94       	set
     eaa:	88 24       	eor	r8, r8
     eac:	84 f8       	bld	r8, 4
     eae:	f9 01       	movw	r30, r18
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	2e 0f       	add	r18, r30
     eb6:	3f 1f       	adc	r19, r31
     eb8:	f9 01       	movw	r30, r18
     eba:	e8 51       	subi	r30, 0x18	; 24
     ebc:	fe 4d       	sbci	r31, 0xDE	; 222
     ebe:	60 82       	st	Z, r6
     ec0:	71 82       	std	Z+1, r7	; 0x01
     ec2:	82 82       	std	Z+2, r8	; 0x02
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     ec4:	58 96       	adiw	r26, 0x18	; 24
     ec6:	a6 1b       	sub	r26, r22
     ec8:	b7 0b       	sbc	r27, r23
     eca:	8b ea       	ldi	r24, 0xAB	; 171
     ecc:	48 9f       	mul	r20, r24
     ece:	81 2d       	mov	r24, r1
     ed0:	11 24       	eor	r1, r1
     ed2:	86 95       	lsr	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	28 2f       	mov	r18, r24
     eda:	22 0f       	add	r18, r18
     edc:	82 0f       	add	r24, r18
     ede:	28 2f       	mov	r18, r24
     ee0:	22 0f       	add	r18, r18
     ee2:	22 0f       	add	r18, r18
     ee4:	84 2f       	mov	r24, r20
     ee6:	82 1b       	sub	r24, r18
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	bd 01       	movw	r22, r26
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	a6 0f       	add	r26, r22
     ef4:	b7 1f       	adc	r27, r23
     ef6:	a8 51       	subi	r26, 0x18	; 24
     ef8:	be 4d       	sbci	r27, 0xDE	; 222
     efa:	f9 01       	movw	r30, r18
     efc:	ee 0f       	add	r30, r30
     efe:	ff 1f       	adc	r31, r31
     f00:	2e 0f       	add	r18, r30
     f02:	3f 1f       	adc	r19, r31
     f04:	f9 01       	movw	r30, r18
     f06:	e6 5c       	subi	r30, 0xC6	; 198
     f08:	ff 4d       	sbci	r31, 0xDF	; 223
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	6d 93       	st	X+, r22
     f12:	7d 93       	st	X+, r23
     f14:	8c 93       	st	X, r24
     f16:	4f 5f       	subi	r20, 0xFF	; 255
		{
			bump = 1;
		}
	}
	
	for (i = 0; i < half; i++)
     f18:	9f 5f       	subi	r25, 0xFF	; 255
     f1a:	98 31       	cpi	r25, 0x18	; 24
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <play_lights_nyan+0x13e>
     f1e:	82 cf       	rjmp	.-252    	; 0xe24 <play_lights_nyan+0x42>
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
		}
				
	}
	
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f20:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
     f24:	08 2e       	mov	r0, r24
     f26:	00 0c       	add	r0, r0
     f28:	99 0b       	sbc	r25, r25
     f2a:	9c 01       	movw	r18, r24
     f2c:	2a 5f       	subi	r18, 0xFA	; 250
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	f9 01       	movw	r30, r18
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	e8 51       	subi	r30, 0x18	; 24
     f3c:	fe 4d       	sbci	r31, 0xDE	; 222
     f3e:	20 e1       	ldi	r18, 0x10	; 16
     f40:	20 83       	st	Z, r18
     f42:	21 83       	std	Z+1, r18	; 0x01
     f44:	22 83       	std	Z+2, r18	; 0x02
     f46:	20 83       	st	Z, r18
     f48:	21 83       	std	Z+1, r18	; 0x01
     f4a:	22 83       	std	Z+2, r18	; 0x02
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f4c:	41 96       	adiw	r24, 0x11	; 17
     f4e:	fc 01       	movw	r30, r24
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	e8 0f       	add	r30, r24
     f56:	f9 1f       	adc	r31, r25
     f58:	e8 51       	subi	r30, 0x18	; 24
     f5a:	fe 4d       	sbci	r31, 0xDE	; 222
     f5c:	20 83       	st	Z, r18
     f5e:	21 83       	std	Z+1, r18	; 0x01
     f60:	22 83       	std	Z+2, r18	; 0x02
     f62:	20 83       	st	Z, r18
     f64:	21 83       	std	Z+1, r18	; 0x01
     f66:	22 83       	std	Z+2, r18	; 0x02
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     f68:	c0 e3       	ldi	r28, 0x30	; 48
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <play_lights_nyan+0x1e2>
	{

		if ((rand() % 23))
     f6c:	0e 94 1a 14 	call	0x2834	; 0x2834 <rand>
     f70:	67 e1       	ldi	r22, 0x17	; 23
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
     f78:	89 2b       	or	r24, r25
     f7a:	99 f0       	breq	.+38     	; 0xfa2 <play_lights_nyan+0x1c0>
		{
			leds[i] = (ws2812drv_led_t){ .r=0, .g=0, .b = MAX_BRIGHTNESS};
     f7c:	8c 2f       	mov	r24, r28
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	c1 2c       	mov	r12, r1
     f82:	d1 2c       	mov	r13, r1
     f84:	68 94       	set
     f86:	ee 24       	eor	r14, r14
     f88:	e6 f8       	bld	r14, 6
     f8a:	fc 01       	movw	r30, r24
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	8e 0f       	add	r24, r30
     f92:	9f 1f       	adc	r25, r31
     f94:	fc 01       	movw	r30, r24
     f96:	e8 51       	subi	r30, 0x18	; 24
     f98:	fe 4d       	sbci	r31, 0xDE	; 222
     f9a:	c0 82       	st	Z, r12
     f9c:	d1 82       	std	Z+1, r13	; 0x01
     f9e:	e2 82       	std	Z+2, r14	; 0x02
     fa0:	10 c0       	rjmp	.+32     	; 0xfc2 <play_lights_nyan+0x1e0>
		}
		else
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     fa2:	ec 2f       	mov	r30, r28
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	cf 01       	movw	r24, r30
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	e8 51       	subi	r30, 0x18	; 24
     fb2:	fe 4d       	sbci	r31, 0xDE	; 222
     fb4:	80 e1       	ldi	r24, 0x10	; 16
     fb6:	80 83       	st	Z, r24
     fb8:	81 83       	std	Z+1, r24	; 0x01
     fba:	82 83       	std	Z+2, r24	; 0x02
     fbc:	80 83       	st	Z, r24
     fbe:	81 83       	std	Z+1, r24	; 0x01
     fc0:	82 83       	std	Z+2, r24	; 0x02
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     fc2:	cf 5f       	subi	r28, 0xFF	; 255
     fc4:	c8 33       	cpi	r28, 0x38	; 56
     fc6:	90 f2       	brcs	.-92     	; 0xf6c <play_lights_nyan+0x18a>
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
		}
	}
	
	offset++;
     fc8:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
     fd2:	68 e3       	ldi	r22, 0x38	; 56
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	88 ee       	ldi	r24, 0xE8	; 232
     fd8:	91 e2       	ldi	r25, 0x21	; 33
     fda:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
     fde:	cf 91       	pop	r28
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	8f 90       	pop	r8
     fe8:	7f 90       	pop	r7
     fea:	6f 90       	pop	r6
     fec:	08 95       	ret

00000fee <play_lights_portal>:

void play_lights_portal()
{
     fee:	6f 92       	push	r6
     ff0:	7f 92       	push	r7
     ff2:	8f 92       	push	r8
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	
	if (offset <= 16)
     ffe:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    1002:	81 31       	cpi	r24, 0x11	; 17
    1004:	30 f4       	brcc	.+12     	; 0x1012 <play_lights_portal+0x24>
	{
		bump += 4;
    1006:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <bump>
    100a:	9c 5f       	subi	r25, 0xFC	; 252
    100c:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <bump>
    1010:	05 c0       	rjmp	.+10     	; 0x101c <play_lights_portal+0x2e>
	}
	else
	{
		bump -= 4;
    1012:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <bump>
    1016:	94 50       	subi	r25, 0x04	; 4
    1018:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <bump>
	}
	
	if (offset == 32)
    101c:	80 32       	cpi	r24, 0x20	; 32
    101e:	11 f4       	brne	.+4      	; 0x1024 <play_lights_portal+0x36>
	{
		offset = 0;
    1020:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <offset>
	offset++;
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_portal()
{
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	34 c0       	rjmp	.+104    	; 0x1090 <play_lights_portal+0xa2>
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
			.r = 0,
			.g = ((i * 2) + bump) / 8,
    1028:	2a 2f       	mov	r18, r26
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <bump>
    1036:	68 2f       	mov	r22, r24
    1038:	88 0f       	add	r24, r24
    103a:	77 0b       	sbc	r23, r23
    103c:	46 0f       	add	r20, r22
    103e:	57 1f       	adc	r21, r23
    1040:	55 23       	and	r21, r21
    1042:	14 f4       	brge	.+4      	; 0x1048 <play_lights_portal+0x5a>
    1044:	49 5f       	subi	r20, 0xF9	; 249
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	55 95       	asr	r21
    104e:	47 95       	ror	r20
    1050:	55 95       	asr	r21
    1052:	47 95       	ror	r20
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	82 1b       	sub	r24, r18
    105a:	93 0b       	sbc	r25, r19
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	86 0f       	add	r24, r22
    1062:	97 1f       	adc	r25, r23
    1064:	99 23       	and	r25, r25
    1066:	0c f4       	brge	.+2      	; 0x106a <play_lights_portal+0x7c>
    1068:	03 96       	adiw	r24, 0x03	; 3
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	95 95       	asr	r25
    1070:	87 95       	ror	r24
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
    1072:	64 2e       	mov	r6, r20
    1074:	71 2c       	mov	r7, r1
    1076:	88 2e       	mov	r8, r24
    1078:	f9 01       	movw	r30, r18
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	2e 0f       	add	r18, r30
    1080:	3f 1f       	adc	r19, r31
    1082:	f9 01       	movw	r30, r18
    1084:	e8 51       	subi	r30, 0x18	; 24
    1086:	fe 4d       	sbci	r31, 0xDE	; 222
    1088:	60 82       	st	Z, r6
    108a:	71 82       	std	Z+1, r7	; 0x01
    108c:	82 82       	std	Z+2, r8	; 0x02
	if (offset == 32)
	{
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
    108e:	af 5f       	subi	r26, 0xFF	; 255
    1090:	a8 31       	cpi	r26, 0x18	; 24
    1092:	50 f2       	brcs	.-108    	; 0x1028 <play_lights_portal+0x3a>
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <play_lights_portal+0x128>
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    1098:	6a 2f       	mov	r22, r26
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	9b 01       	movw	r18, r22
    109e:	28 5e       	subi	r18, 0xE8	; 232
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	86 1b       	sub	r24, r22
    10a8:	97 0b       	sbc	r25, r23
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <bump>
    10b2:	84 0f       	add	r24, r20
    10b4:	91 1d       	adc	r25, r1
    10b6:	47 fd       	sbrc	r20, 7
    10b8:	9a 95       	dec	r25
    10ba:	fc 01       	movw	r30, r24
    10bc:	99 23       	and	r25, r25
    10be:	0c f4       	brge	.+2      	; 0x10c2 <play_lights_portal+0xd4>
    10c0:	33 96       	adiw	r30, 0x03	; 3
    10c2:	f5 95       	asr	r31
    10c4:	e7 95       	ror	r30
    10c6:	f5 95       	asr	r31
    10c8:	e7 95       	ror	r30
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
    10ca:	ac 01       	movw	r20, r24
    10cc:	99 23       	and	r25, r25
    10ce:	14 f4       	brge	.+4      	; 0x10d4 <play_lights_portal+0xe6>
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
			.b = (half-i)/16
    10d8:	88 e1       	ldi	r24, 0x18	; 24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	ec 01       	movw	r28, r24
    10de:	c6 1b       	sub	r28, r22
    10e0:	d7 0b       	sbc	r29, r23
    10e2:	ce 01       	movw	r24, r28
    10e4:	0a f4       	brpl	.+2      	; 0x10e8 <play_lights_portal+0xfa>
    10e6:	0f 96       	adiw	r24, 0x0f	; 15
    10e8:	95 95       	asr	r25
    10ea:	87 95       	ror	r24
    10ec:	95 95       	asr	r25
    10ee:	87 95       	ror	r24
    10f0:	95 95       	asr	r25
    10f2:	87 95       	ror	r24
    10f4:	95 95       	asr	r25
    10f6:	87 95       	ror	r24
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    10f8:	ce 2e       	mov	r12, r30
    10fa:	d4 2e       	mov	r13, r20
    10fc:	e8 2e       	mov	r14, r24
    10fe:	f9 01       	movw	r30, r18
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	2e 0f       	add	r18, r30
    1106:	3f 1f       	adc	r19, r31
    1108:	f9 01       	movw	r30, r18
    110a:	e8 51       	subi	r30, 0x18	; 24
    110c:	fe 4d       	sbci	r31, 0xDE	; 222
    110e:	c0 82       	st	Z, r12
    1110:	d1 82       	std	Z+1, r13	; 0x01
    1112:	e2 82       	std	Z+2, r14	; 0x02
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
		};
		
	}
	
	for (i = 0; i < half; i++)
    1114:	af 5f       	subi	r26, 0xFF	; 255
    1116:	a8 31       	cpi	r26, 0x18	; 24
    1118:	08 f4       	brcc	.+2      	; 0x111c <play_lights_portal+0x12e>
    111a:	be cf       	rjmp	.-132    	; 0x1098 <play_lights_portal+0xaa>
			.b = (half-i)/16
		};
			
	}
	
	offset++;
    111c:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
    1126:	68 e3       	ldi	r22, 0x38	; 56
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	88 ee       	ldi	r24, 0xE8	; 232
    112c:	91 e2       	ldi	r25, 0x21	; 33
    112e:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	8f 90       	pop	r8
    113e:	7f 90       	pop	r7
    1140:	6f 90       	pop	r6
    1142:	08 95       	ret

00001144 <play_lights_game>:

void play_lights_game(uint16_t dingle_pos, uint8_t buttons)
{
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	cf 93       	push	r28
    114c:	c6 2f       	mov	r28, r22
	uint8_t i = 0;
    114e:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    1150:	32 c0       	rjmp	.+100    	; 0x11b6 <play_lights_game+0x72>
	{
		b_i = i/quarter;
    1152:	eb ea       	ldi	r30, 0xAB	; 171
    1154:	4e 9f       	mul	r20, r30
    1156:	e1 2d       	mov	r30, r1
    1158:	11 24       	eor	r1, r1
    115a:	e6 95       	lsr	r30
    115c:	e6 95       	lsr	r30
    115e:	e6 95       	lsr	r30
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
    1160:	24 2f       	mov	r18, r20
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	bf 01       	movw	r22, r30
    1168:	66 0f       	add	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	e6 0f       	add	r30, r22
    116e:	f7 1f       	adc	r31, r23
    1170:	ed 58       	subi	r30, 0x8D	; 141
    1172:	ff 4d       	sbci	r31, 0xDF	; 223
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	60 81       	ld	r22, Z
    1178:	52 81       	ldd	r21, Z+2	; 0x02
    117a:	c7 2e       	mov	r12, r23
    117c:	c6 94       	lsr	r12
    117e:	c6 94       	lsr	r12
    1180:	c6 94       	lsr	r12
    1182:	c6 94       	lsr	r12
    1184:	c6 94       	lsr	r12
    1186:	d6 2e       	mov	r13, r22
    1188:	d6 94       	lsr	r13
    118a:	d6 94       	lsr	r13
    118c:	d6 94       	lsr	r13
    118e:	d6 94       	lsr	r13
    1190:	d6 94       	lsr	r13
    1192:	e5 2e       	mov	r14, r21
    1194:	e6 94       	lsr	r14
    1196:	e6 94       	lsr	r14
    1198:	e6 94       	lsr	r14
    119a:	e6 94       	lsr	r14
    119c:	e6 94       	lsr	r14
    119e:	f9 01       	movw	r30, r18
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	2e 0f       	add	r18, r30
    11a6:	3f 1f       	adc	r19, r31
    11a8:	f9 01       	movw	r30, r18
    11aa:	e8 51       	subi	r30, 0x18	; 24
    11ac:	fe 4d       	sbci	r31, 0xDE	; 222
    11ae:	c0 82       	st	Z, r12
    11b0:	d1 82       	std	Z+1, r13	; 0x01
    11b2:	e2 82       	std	Z+2, r14	; 0x02
{
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    11b4:	4f 5f       	subi	r20, 0xFF	; 255
    11b6:	40 33       	cpi	r20, 0x30	; 48
    11b8:	60 f2       	brcs	.-104    	; 0x1152 <play_lights_game+0xe>
	{
		b_i = i/quarter;
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
	}	
	
	overlay_dingle_pos(dingle_pos);	
    11ba:	0e 94 0e 06 	call	0xc1c	; 0xc1c <overlay_dingle_pos>
	play_lights_overlay_note_button_leds(buttons);
    11be:	8c 2f       	mov	r24, r28
    11c0:	0e 94 7d 05 	call	0xafa	; 0xafa <play_lights_overlay_note_button_leds>
	ws2812drv_start_transfer(leds, LED_COUNT);
    11c4:	68 e3       	ldi	r22, 0x38	; 56
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	88 ee       	ldi	r24, 0xE8	; 232
    11ca:	91 e2       	ldi	r25, 0x21	; 33
    11cc:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
    11d0:	cf 91       	pop	r28
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	08 95       	ret

000011da <play_lights_game_over>:

void play_lights_game_over()
{
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
	uint8_t i = 0;
	ws2812drv_led_t color;
	
	if (!(offset++ % 4))
    11e0:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	98 0f       	add	r25, r24
    11e8:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <offset>
    11ec:	83 70       	andi	r24, 0x03	; 3
    11ee:	49 f4       	brne	.+18     	; 0x1202 <play_lights_game_over+0x28>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
    11f0:	c1 2c       	mov	r12, r1
    11f2:	d1 2c       	mov	r13, r1
    11f4:	e1 2c       	mov	r14, r1
    11f6:	68 94       	set
    11f8:	dd 24       	eor	r13, r13
    11fa:	d6 f8       	bld	r13, 6
    11fc:	e1 2c       	mov	r14, r1
	play_lights_overlay_note_button_leds(buttons);
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_game_over()
{
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <play_lights_game_over+0x4c>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
	}
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
    1202:	c1 2c       	mov	r12, r1
    1204:	d1 2c       	mov	r13, r1
    1206:	e1 2c       	mov	r14, r1
    1208:	fa cf       	rjmp	.-12     	; 0x11fe <play_lights_game_over+0x24>
	}
	
	for (i = 0; i < LED_COUNT; i++)
	{
		leds[i] = color;
    120a:	82 2f       	mov	r24, r18
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	8e 0f       	add	r24, r30
    1216:	9f 1f       	adc	r25, r31
    1218:	fc 01       	movw	r30, r24
    121a:	e8 51       	subi	r30, 0x18	; 24
    121c:	fe 4d       	sbci	r31, 0xDE	; 222
    121e:	c0 82       	st	Z, r12
    1220:	d1 82       	std	Z+1, r13	; 0x01
    1222:	e2 82       	std	Z+2, r14	; 0x02
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
	}
	
	for (i = 0; i < LED_COUNT; i++)
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	28 33       	cpi	r18, 0x38	; 56
    1228:	80 f3       	brcs	.-32     	; 0x120a <play_lights_game_over+0x30>
	{
		leds[i] = color;
	}
	ws2812drv_start_transfer(leds, LED_COUNT);
    122a:	68 e3       	ldi	r22, 0x38	; 56
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	88 ee       	ldi	r24, 0xE8	; 232
    1230:	91 e2       	ldi	r25, 0x21	; 33
    1232:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	08 95       	ret

0000123e <play_lights_won_easy_game>:

void play_lights_won_easy_game()
{
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
	
	uint8_t i = 0;
    1244:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    1246:	25 c0       	rjmp	.+74     	; 0x1292 <play_lights_won_easy_game+0x54>
	{
		b_i = i/quarter;
    1248:	8b ea       	ldi	r24, 0xAB	; 171
    124a:	48 9f       	mul	r20, r24
    124c:	81 2d       	mov	r24, r1
    124e:	11 24       	eor	r1, r1
    1250:	86 95       	lsr	r24
    1252:	86 95       	lsr	r24
    1254:	86 95       	lsr	r24
		b_i += offset;
    1256:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <offset>
    125a:	89 0f       	add	r24, r25
		b_i %= 4;
    125c:	83 70       	andi	r24, 0x03	; 3
			
		leds[i] = game_colors[b_i];
    125e:	24 2f       	mov	r18, r20
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	d9 01       	movw	r26, r18
    1266:	aa 0f       	add	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	2a 0f       	add	r18, r26
    126c:	3b 1f       	adc	r19, r27
    126e:	d9 01       	movw	r26, r18
    1270:	a8 51       	subi	r26, 0x18	; 24
    1272:	be 4d       	sbci	r27, 0xDE	; 222
    1274:	fc 01       	movw	r30, r24
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	8e 0f       	add	r24, r30
    127c:	9f 1f       	adc	r25, r31
    127e:	fc 01       	movw	r30, r24
    1280:	ed 58       	subi	r30, 0x8D	; 141
    1282:	ff 4d       	sbci	r31, 0xDF	; 223
    1284:	c0 80       	ld	r12, Z
    1286:	d1 80       	ldd	r13, Z+1	; 0x01
    1288:	e2 80       	ldd	r14, Z+2	; 0x02
    128a:	cd 92       	st	X+, r12
    128c:	dd 92       	st	X+, r13
    128e:	ec 92       	st	X, r14
{
	
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    1290:	4f 5f       	subi	r20, 0xFF	; 255
    1292:	40 33       	cpi	r20, 0x30	; 48
    1294:	c8 f2       	brcs	.-78     	; 0x1248 <play_lights_won_easy_game+0xa>
		b_i %= 4;
			
		leds[i] = game_colors[b_i];
	}
	
	offset++;
    1296:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <offset>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <offset>
	
	leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
    12a0:	e8 e7       	ldi	r30, 0x78	; 120
    12a2:	f2 e2       	ldi	r31, 0x22	; 34
    12a4:	10 82       	st	Z, r1
    12a6:	80 e4       	ldi	r24, 0x40	; 64
    12a8:	81 83       	std	Z+1, r24	; 0x01
    12aa:	12 82       	std	Z+2, r1	; 0x02
    12ac:	10 82       	st	Z, r1
    12ae:	81 83       	std	Z+1, r24	; 0x01
    12b0:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
    12b2:	eb e7       	ldi	r30, 0x7B	; 123
    12b4:	f2 e2       	ldi	r31, 0x22	; 34
    12b6:	10 82       	st	Z, r1
    12b8:	81 83       	std	Z+1, r24	; 0x01
    12ba:	12 82       	std	Z+2, r1	; 0x02
    12bc:	10 82       	st	Z, r1
    12be:	81 83       	std	Z+1, r24	; 0x01
    12c0:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
    12c2:	ee e7       	ldi	r30, 0x7E	; 126
    12c4:	f2 e2       	ldi	r31, 0x22	; 34
    12c6:	80 83       	st	Z, r24
    12c8:	11 82       	std	Z+1, r1	; 0x01
    12ca:	12 82       	std	Z+2, r1	; 0x02
    12cc:	80 83       	st	Z, r24
    12ce:	11 82       	std	Z+1, r1	; 0x01
    12d0:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
    12d2:	e1 e8       	ldi	r30, 0x81	; 129
    12d4:	f2 e2       	ldi	r31, 0x22	; 34
    12d6:	80 83       	st	Z, r24
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	12 82       	std	Z+2, r1	; 0x02
    12dc:	80 83       	st	Z, r24
    12de:	11 82       	std	Z+1, r1	; 0x01
    12e0:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
    12e2:	e4 e8       	ldi	r30, 0x84	; 132
    12e4:	f2 e2       	ldi	r31, 0x22	; 34
    12e6:	10 82       	st	Z, r1
    12e8:	11 82       	std	Z+1, r1	; 0x01
    12ea:	82 83       	std	Z+2, r24	; 0x02
    12ec:	10 82       	st	Z, r1
    12ee:	11 82       	std	Z+1, r1	; 0x01
    12f0:	82 83       	std	Z+2, r24	; 0x02
	leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
    12f2:	e7 e8       	ldi	r30, 0x87	; 135
    12f4:	f2 e2       	ldi	r31, 0x22	; 34
    12f6:	10 82       	st	Z, r1
    12f8:	11 82       	std	Z+1, r1	; 0x01
    12fa:	82 83       	std	Z+2, r24	; 0x02
    12fc:	10 82       	st	Z, r1
    12fe:	11 82       	std	Z+1, r1	; 0x01
    1300:	82 83       	std	Z+2, r24	; 0x02

	leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
    1302:	ea e8       	ldi	r30, 0x8A	; 138
    1304:	f2 e2       	ldi	r31, 0x22	; 34
    1306:	80 e2       	ldi	r24, 0x20	; 32
    1308:	80 83       	st	Z, r24
    130a:	81 83       	std	Z+1, r24	; 0x01
    130c:	12 82       	std	Z+2, r1	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	81 83       	std	Z+1, r24	; 0x01
    1312:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
    1314:	ed e8       	ldi	r30, 0x8D	; 141
    1316:	f2 e2       	ldi	r31, 0x22	; 34
    1318:	80 83       	st	Z, r24
    131a:	81 83       	std	Z+1, r24	; 0x01
    131c:	12 82       	std	Z+2, r1	; 0x02
    131e:	80 83       	st	Z, r24
    1320:	81 83       	std	Z+1, r24	; 0x01
    1322:	12 82       	std	Z+2, r1	; 0x02


	ws2812drv_start_transfer(leds, LED_COUNT);
    1324:	68 e3       	ldi	r22, 0x38	; 56
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	88 ee       	ldi	r24, 0xE8	; 232
    132a:	91 e2       	ldi	r25, 0x21	; 33
    132c:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	08 95       	ret

00001338 <play_lights_easter_egg>:

void play_lights_easter_egg(uint16_t dingle_pos, uint8_t buttons)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ac 01       	movw	r20, r24
    133e:	d6 2f       	mov	r29, r22
		uint8_t i = 0;
    1340:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t half = GRUMBO_LED_COUNT / 2;		
		
		for (;i<LED_COUNT; i++)
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <play_lights_easter_egg+0x2e>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS / 2, .g = MAX_BRIGHTNESS / 4, .b = 0};			
    1344:	29 2f       	mov	r18, r25
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	a0 e1       	ldi	r26, 0x10	; 16
    134a:	b0 e2       	ldi	r27, 0x20	; 32
    134c:	c0 e0       	ldi	r28, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	2e 0f       	add	r18, r30
    1356:	3f 1f       	adc	r19, r31
    1358:	f9 01       	movw	r30, r18
    135a:	e8 51       	subi	r30, 0x18	; 24
    135c:	fe 4d       	sbci	r31, 0xDE	; 222
    135e:	a0 83       	st	Z, r26
    1360:	b1 83       	std	Z+1, r27	; 0x01
    1362:	c2 83       	std	Z+2, r28	; 0x02
void play_lights_easter_egg(uint16_t dingle_pos, uint8_t buttons)
{
		uint8_t i = 0;
		uint8_t half = GRUMBO_LED_COUNT / 2;		
		
		for (;i<LED_COUNT; i++)
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	98 33       	cpi	r25, 0x38	; 56
    1368:	68 f3       	brcs	.-38     	; 0x1344 <play_lights_easter_egg+0xc>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS / 2, .g = MAX_BRIGHTNESS / 4, .b = 0};			
		}
		
		if (!(offset % GRUMBO_LED_COUNT))
    136a:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <offset>
    136e:	8b ea       	ldi	r24, 0xAB	; 171
    1370:	28 9f       	mul	r18, r24
    1372:	81 2d       	mov	r24, r1
    1374:	11 24       	eor	r1, r1
    1376:	82 95       	swap	r24
    1378:	86 95       	lsr	r24
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	92 2f       	mov	r25, r18
    137e:	30 e3       	ldi	r19, 0x30	; 48
    1380:	83 9f       	mul	r24, r19
    1382:	90 19       	sub	r25, r0
    1384:	11 24       	eor	r1, r1
    1386:	91 11       	cpse	r25, r1
    1388:	0a c0       	rjmp	.+20     	; 0x139e <play_lights_easter_egg+0x66>
		{
			leds[0] = game_colors[LED_MAX_ON];
    138a:	e8 ee       	ldi	r30, 0xE8	; 232
    138c:	f1 e2       	ldi	r31, 0x21	; 33
    138e:	80 e1       	ldi	r24, 0x10	; 16
    1390:	80 83       	st	Z, r24
    1392:	81 83       	std	Z+1, r24	; 0x01
    1394:	82 83       	std	Z+2, r24	; 0x02
    1396:	80 83       	st	Z, r24
    1398:	81 83       	std	Z+1, r24	; 0x01
    139a:	82 83       	std	Z+2, r24	; 0x02
    139c:	39 c0       	rjmp	.+114    	; 0x1410 <play_lights_easter_egg+0xd8>
		}
		else if (!(offset % half))
    139e:	8b ea       	ldi	r24, 0xAB	; 171
    13a0:	28 9f       	mul	r18, r24
    13a2:	81 2d       	mov	r24, r1
    13a4:	11 24       	eor	r1, r1
    13a6:	82 95       	swap	r24
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	92 2f       	mov	r25, r18
    13ac:	38 e1       	ldi	r19, 0x18	; 24
    13ae:	83 9f       	mul	r24, r19
    13b0:	90 19       	sub	r25, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	91 11       	cpse	r25, r1
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <play_lights_easter_egg+0x94>
		{
			//bottom center
			leds[half] = game_colors[LED_MAX_ON];
    13b8:	e0 e3       	ldi	r30, 0x30	; 48
    13ba:	f2 e2       	ldi	r31, 0x22	; 34
    13bc:	80 e1       	ldi	r24, 0x10	; 16
    13be:	80 83       	st	Z, r24
    13c0:	81 83       	std	Z+1, r24	; 0x01
    13c2:	82 83       	std	Z+2, r24	; 0x02
    13c4:	80 83       	st	Z, r24
    13c6:	81 83       	std	Z+1, r24	; 0x01
    13c8:	82 83       	std	Z+2, r24	; 0x02
    13ca:	22 c0       	rjmp	.+68     	; 0x1410 <play_lights_easter_egg+0xd8>
		}		
		else
		{
			leds[half - (offset % half)] = game_colors[LED_MAX_ON];
    13cc:	89 2f       	mov	r24, r25
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	68 e1       	ldi	r22, 0x18	; 24
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	68 1b       	sub	r22, r24
    13d6:	79 0b       	sbc	r23, r25
    13d8:	fb 01       	movw	r30, r22
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	e6 0f       	add	r30, r22
    13e0:	f7 1f       	adc	r31, r23
    13e2:	e8 51       	subi	r30, 0x18	; 24
    13e4:	fe 4d       	sbci	r31, 0xDE	; 222
    13e6:	30 e1       	ldi	r19, 0x10	; 16
    13e8:	30 83       	st	Z, r19
    13ea:	31 83       	std	Z+1, r19	; 0x01
    13ec:	32 83       	std	Z+2, r19	; 0x02
    13ee:	30 83       	st	Z, r19
    13f0:	31 83       	std	Z+1, r19	; 0x01
    13f2:	32 83       	std	Z+2, r19	; 0x02
			leds[half + (offset % half)] = game_colors[LED_MAX_ON];
    13f4:	48 96       	adiw	r24, 0x18	; 24
    13f6:	fc 01       	movw	r30, r24
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	e8 0f       	add	r30, r24
    13fe:	f9 1f       	adc	r31, r25
    1400:	e8 51       	subi	r30, 0x18	; 24
    1402:	fe 4d       	sbci	r31, 0xDE	; 222
    1404:	30 83       	st	Z, r19
    1406:	31 83       	std	Z+1, r19	; 0x01
    1408:	32 83       	std	Z+2, r19	; 0x02
    140a:	30 83       	st	Z, r19
    140c:	31 83       	std	Z+1, r19	; 0x01
    140e:	32 83       	std	Z+2, r19	; 0x02
		}
		
		offset++;
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	20 93 a9 21 	sts	0x21A9, r18	; 0x8021a9 <offset>
		
		overlay_dingle_pos(dingle_pos);
    1416:	ca 01       	movw	r24, r20
    1418:	0e 94 0e 06 	call	0xc1c	; 0xc1c <overlay_dingle_pos>
		play_lights_overlay_note_button_leds(buttons);
    141c:	8d 2f       	mov	r24, r29
    141e:	0e 94 7d 05 	call	0xafa	; 0xafa <play_lights_overlay_note_button_leds>
		ws2812drv_start_transfer(leds, LED_COUNT);
    1422:	68 e3       	ldi	r22, 0x38	; 56
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	88 ee       	ldi	r24, 0xE8	; 232
    1428:	91 e2       	ldi	r25, 0x21	; 33
    142a:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <play_lights_easter_egg_intro>:

void play_lights_easter_egg_intro()
{
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
	uint8_t i = 0;
    143e:	20 e0       	ldi	r18, 0x00	; 0
	
	for (;i<GRUMBO_LED_COUNT; i++)
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <play_lights_easter_egg_intro+0x34>
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
    1442:	82 2f       	mov	r24, r18
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	68 94       	set
    1448:	cc 24       	eor	r12, r12
    144a:	c6 f8       	bld	r12, 6
    144c:	d1 2c       	mov	r13, r1
    144e:	e1 2c       	mov	r14, r1
    1450:	fc 01       	movw	r30, r24
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	8e 0f       	add	r24, r30
    1458:	9f 1f       	adc	r25, r31
    145a:	fc 01       	movw	r30, r24
    145c:	e8 51       	subi	r30, 0x18	; 24
    145e:	fe 4d       	sbci	r31, 0xDE	; 222
    1460:	c0 82       	st	Z, r12
    1462:	d1 82       	std	Z+1, r13	; 0x01
    1464:	e2 82       	std	Z+2, r14	; 0x02

void play_lights_easter_egg_intro()
{
	uint8_t i = 0;
	
	for (;i<GRUMBO_LED_COUNT; i++)
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	20 33       	cpi	r18, 0x30	; 48
    146a:	58 f3       	brcs	.-42     	; 0x1442 <play_lights_easter_egg_intro+0xe>
    146c:	24 c0       	rjmp	.+72     	; 0x14b6 <play_lights_easter_egg_intro+0x82>
		
	}

	for (;i < LED_COUNT; i++)
	{
		if (i%2)
    146e:	20 ff       	sbrs	r18, 0
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <play_lights_easter_egg_intro+0x60>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = 0, .b = MAX_BRIGHTNESS};
    1472:	82 2f       	mov	r24, r18
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e0       	ldi	r26, 0x00	; 0
    1478:	b0 e4       	ldi	r27, 0x40	; 64
    147a:	c0 e4       	ldi	r28, 0x40	; 64
    147c:	fc 01       	movw	r30, r24
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	8e 0f       	add	r24, r30
    1484:	9f 1f       	adc	r25, r31
    1486:	fc 01       	movw	r30, r24
    1488:	e8 51       	subi	r30, 0x18	; 24
    148a:	fe 4d       	sbci	r31, 0xDE	; 222
    148c:	a0 83       	st	Z, r26
    148e:	b1 83       	std	Z+1, r27	; 0x01
    1490:	c2 83       	std	Z+2, r28	; 0x02
    1492:	10 c0       	rjmp	.+32     	; 0x14b4 <play_lights_easter_egg_intro+0x80>
		}
		else
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
    1494:	82 2f       	mov	r24, r18
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	40 e4       	ldi	r20, 0x40	; 64
    149a:	50 e4       	ldi	r21, 0x40	; 64
    149c:	60 e4       	ldi	r22, 0x40	; 64
    149e:	fc 01       	movw	r30, r24
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	8e 0f       	add	r24, r30
    14a6:	9f 1f       	adc	r25, r31
    14a8:	fc 01       	movw	r30, r24
    14aa:	e8 51       	subi	r30, 0x18	; 24
    14ac:	fe 4d       	sbci	r31, 0xDE	; 222
    14ae:	40 83       	st	Z, r20
    14b0:	51 83       	std	Z+1, r21	; 0x01
    14b2:	62 83       	std	Z+2, r22	; 0x02
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
		
	}

	for (;i < LED_COUNT; i++)
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	28 33       	cpi	r18, 0x38	; 56
    14b8:	d0 f2       	brcs	.-76     	; 0x146e <play_lights_easter_egg_intro+0x3a>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
		}
	}

	offset += 3;
    14ba:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <offset>
    14be:	2d 5f       	subi	r18, 0xFD	; 253
    14c0:	20 93 a9 21 	sts	0x21A9, r18	; 0x8021a9 <offset>

	leds[offset % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    14c4:	8b ea       	ldi	r24, 0xAB	; 171
    14c6:	28 9f       	mul	r18, r24
    14c8:	81 2d       	mov	r24, r1
    14ca:	11 24       	eor	r1, r1
    14cc:	82 95       	swap	r24
    14ce:	86 95       	lsr	r24
    14d0:	87 70       	andi	r24, 0x07	; 7
    14d2:	42 2f       	mov	r20, r18
    14d4:	90 e3       	ldi	r25, 0x30	; 48
    14d6:	89 9f       	mul	r24, r25
    14d8:	40 19       	sub	r20, r0
    14da:	11 24       	eor	r1, r1
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	80 e4       	ldi	r24, 0x40	; 64
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	90 e4       	ldi	r25, 0x40	; 64
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	fa 01       	movw	r30, r20
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	4e 0f       	add	r20, r30
    14f0:	5f 1f       	adc	r21, r31
    14f2:	fa 01       	movw	r30, r20
    14f4:	e8 51       	subi	r30, 0x18	; 24
    14f6:	fe 4d       	sbci	r31, 0xDE	; 222
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	a2 83       	std	Z+2, r26	; 0x02
	leds[(offset + 1) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	c9 01       	movw	r24, r18
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	c0 e3       	ldi	r28, 0x30	; 48
    1506:	d0 e0       	ldi	r29, 0x00	; 0
    1508:	be 01       	movw	r22, r28
    150a:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    150e:	68 94       	set
    1510:	cc 24       	eor	r12, r12
    1512:	c6 f8       	bld	r12, 6
    1514:	d1 2c       	mov	r13, r1
    1516:	e1 2c       	mov	r14, r1
    1518:	68 94       	set
    151a:	dd 24       	eor	r13, r13
    151c:	d6 f8       	bld	r13, 6
    151e:	e1 2c       	mov	r14, r1
    1520:	fc 01       	movw	r30, r24
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	8e 0f       	add	r24, r30
    1528:	9f 1f       	adc	r25, r31
    152a:	fc 01       	movw	r30, r24
    152c:	e8 51       	subi	r30, 0x18	; 24
    152e:	fe 4d       	sbci	r31, 0xDE	; 222
    1530:	c0 82       	st	Z, r12
    1532:	d1 82       	std	Z+1, r13	; 0x01
    1534:	e2 82       	std	Z+2, r14	; 0x02
	leds[(offset + 2) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};	
    1536:	c9 01       	movw	r24, r18
    1538:	02 96       	adiw	r24, 0x02	; 2
    153a:	be 01       	movw	r22, r28
    153c:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1540:	20 e4       	ldi	r18, 0x40	; 64
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	30 e4       	ldi	r19, 0x40	; 64
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	fc 01       	movw	r30, r24
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	8e 0f       	add	r24, r30
    1552:	9f 1f       	adc	r25, r31
    1554:	fc 01       	movw	r30, r24
    1556:	e8 51       	subi	r30, 0x18	; 24
    1558:	fe 4d       	sbci	r31, 0xDE	; 222
    155a:	20 83       	st	Z, r18
    155c:	31 83       	std	Z+1, r19	; 0x01
    155e:	42 83       	std	Z+2, r20	; 0x02
		
	ws2812drv_start_transfer(leds, LED_COUNT);
    1560:	68 e3       	ldi	r22, 0x38	; 56
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	88 ee       	ldi	r24, 0xE8	; 232
    1566:	91 e2       	ldi	r25, 0x21	; 33
    1568:	0e 94 77 12 	call	0x24ee	; 0x24ee <ws2812drv_start_transfer>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	08 95       	ret

00001578 <clk_init>:
	
}

void clk_init()
{
	CCP = CCP_IOREG_gc;
    1578:	88 ed       	ldi	r24, 0xD8	; 216
    157a:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
    1582:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
    1586:	81 ff       	sbrs	r24, 1
    1588:	fc cf       	rjmp	.-8      	; 0x1582 <clk_init+0xa>
	
	CCP = CCP_IOREG_gc;
    158a:	88 ed       	ldi	r24, 0xD8	; 216
    158c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
	
	CCP = CCP_IOREG_gc;
    1594:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = 0;
    1596:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
    159a:	08 95       	ret

0000159c <interrupt_init>:
	
}

void interrupt_init()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    159c:	87 e0       	ldi	r24, 0x07	; 7
    159e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
    15a2:	08 95       	ret

000015a4 <io_init>:

void io_init()
{
	
	//Mode change pin
	PORTA.DIRCLR = PIN0_bm;
    15a4:	e0 e0       	ldi	r30, 0x00	; 0
    15a6:	f6 e0       	ldi	r31, 0x06	; 6
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc;
    15ac:	88 e1       	ldi	r24, 0x18	; 24
    15ae:	80 8b       	std	Z+16, r24	; 0x10

	//Mode indication lights (all off by default)
	PORTD.DIRSET = PIN5_bm | PIN6_bm | PIN7_bm;
    15b0:	a0 e6       	ldi	r26, 0x60	; 96
    15b2:	b6 e0       	ldi	r27, 0x06	; 6
    15b4:	80 ee       	ldi	r24, 0xE0	; 224
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	8c 93       	st	X, r24
    15ba:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTCLR = PIN5_bm | PIN6_bm | PIN7_bm;
    15bc:	16 96       	adiw	r26, 0x06	; 6
    15be:	8c 93       	st	X, r24
	
	//Hall sensor enable (off by default)
	PORTC.DIRSET = PIN7_bm;
    15c0:	a0 e4       	ldi	r26, 0x40	; 64
    15c2:	b6 e0       	ldi	r27, 0x06	; 6
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	8c 93       	st	X, r24
    15ca:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.OUTCLR = PIN7_bm;
    15cc:	16 96       	adiw	r26, 0x06	; 6
    15ce:	8c 93       	st	X, r24
	
	//DACA0 out
	PORTA.DIRSET = PIN2_bm;
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	81 83       	std	Z+1, r24	; 0x01
    15d4:	08 95       	ret

000015d6 <note_buttons_init>:
}

void note_buttons_init()
{
	//Turn on hall sensors
	PORTC.OUTSET = PIN7_bm;
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
	
	//note button
	PORTA.DIRCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    15dc:	e0 e0       	ldi	r30, 0x00	; 0
    15de:	f6 e0       	ldi	r31, 0x06	; 6
    15e0:	80 ef       	ldi	r24, 0xF0	; 240
    15e2:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
    15e4:	88 e1       	ldi	r24, 0x18	; 24
    15e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_OPC_PULLUP_gc;
    15e8:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLUP_gc;
    15ea:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLUP_gc;
    15ec:	87 8b       	std	Z+23, r24	; 0x17
    15ee:	08 95       	ret

000015f0 <dingle_input_init>:
}

void dingle_input_init()
{
	expander_init();
    15f0:	0e 94 33 05 	call	0xa66	; 0xa66 <expander_init>
    15f4:	08 95       	ret

000015f6 <song_out_init>:
}

void song_out_init()
{
	//TCC5 and TCD5 out 
	PORTC.DIRSET = PIN4_bm; 	
    15f6:	80 e1       	ldi	r24, 0x10	; 16
    15f8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	PORTD.DIRSET = PIN4_bm;
    15fc:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	//Force dac0 output high 
	PORTA.OUTSET = PIN2_bm;
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
    1606:	08 95       	ret

00001608 <start_up>:
}

void start_up(uint8_t mode)
{
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	a2 97       	sbiw	r28, 0x22	; 34
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	de bf       	out	0x3e, r29	; 62
	SongInitParams params;
	
	switch(mode)
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	81 f1       	breq	.+96     	; 0x167a <start_up+0x72>
    161a:	20 f4       	brcc	.+8      	; 0x1624 <start_up+0x1c>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 f0       	breq	.+36     	; 0x1644 <start_up+0x3c>
    1620:	60 f0       	brcs	.+24     	; 0x163a <start_up+0x32>
    1622:	1c c0       	rjmp	.+56     	; 0x165c <start_up+0x54>
    1624:	85 30       	cpi	r24, 0x05	; 5
    1626:	09 f4       	brne	.+2      	; 0x162a <start_up+0x22>
    1628:	99 c0       	rjmp	.+306    	; 0x175c <start_up+0x154>
    162a:	b0 f1       	brcs	.+108    	; 0x1698 <start_up+0x90>
    162c:	86 30       	cpi	r24, 0x06	; 6
    162e:	09 f4       	brne	.+2      	; 0x1632 <start_up+0x2a>
    1630:	f8 c0       	rjmp	.+496    	; 0x1822 <start_up+0x21a>
    1632:	8f 3e       	cpi	r24, 0xEF	; 239
    1634:	09 f4       	brne	.+2      	; 0x1638 <start_up+0x30>
    1636:	03 c1       	rjmp	.+518    	; 0x183e <start_up+0x236>
    1638:	5f c1       	rjmp	.+702    	; 0x18f8 <start_up+0x2f0>
	{
		case STANDBY_sm:
			sys_timer_D5_init();
    163a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <sys_timer_D5_init>
			ws2812drv_init();
    163e:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			break;
    1642:	5a c1       	rjmp	.+692    	; 0x18f8 <start_up+0x2f0>
		case FREEPLAY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    1644:	80 e1       	ldi	r24, 0x10	; 16
    1646:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    164a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <note_buttons_init>
			note_player_init();
    164e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <note_player_init>
			dingle_input_init();
    1652:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <dingle_input_init>
			ws2812drv_init();
    1656:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			
			break;
    165a:	4e c1       	rjmp	.+668    	; 0x18f8 <start_up+0x2f0>
		case GAME_EASY_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;
    165c:	80 e1       	ldi	r24, 0x10	; 16
    165e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    1662:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <note_buttons_init>
			note_player_init();
    1666:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <note_player_init>
			dingle_input_init();
    166a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <dingle_input_init>
			games_init(easy);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	0e 94 83 02 	call	0x506	; 0x506 <games_init>
			ws2812drv_init();
    1674:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			
			break;
    1678:	3f c1       	rjmp	.+638    	; 0x18f8 <start_up+0x2f0>
		case GAME_HARD_sm:
			//TCC5 out
			PORTC.DIRSET = PIN4_bm;		
    167a:	80 e1       	ldi	r24, 0x10	; 16
    167c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
			note_buttons_init();
    1680:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <note_buttons_init>
			note_player_init();
    1684:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <note_player_init>
			dingle_input_init();
    1688:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <dingle_input_init>
			games_init(hard);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 83 02 	call	0x506	; 0x506 <games_init>
			ws2812drv_init();
    1692:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			
			break;
    1696:	30 c1       	rjmp	.+608    	; 0x18f8 <start_up+0x2f0>
		case NYAN_sm:
			
			song_out_init();
    1698:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <song_out_init>
			ws2812drv_init();
    169c:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			params.bmp_period = nyanBPMPeriod;
    16a0:	8b ed       	ldi	r24, 0xDB	; 219
    16a2:	95 e3       	ldi	r25, 0x35	; 53
    16a4:	89 a3       	std	Y+33, r24	; 0x21
    16a6:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = nyanIntroTreble;
    16a8:	8c e5       	ldi	r24, 0x5C	; 92
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(nyanIntroTreble);
    16b0:	8f e1       	ldi	r24, 0x1F	; 31
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	8b 83       	std	Y+3, r24	; 0x03
    16b6:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = nyanIntroExtTreble;
    16b8:	88 e5       	ldi	r24, 0x58	; 88
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	9e 83       	std	Y+6, r25	; 0x06
			params.ch0.intro.extension_size = sizeof(nyanIntroExtTreble);
    16c0:	84 e0       	ldi	r24, 0x04	; 4
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	8f 83       	std	Y+7, r24	; 0x07
    16c6:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = nyanMainTreble;
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	89 87       	std	Y+9, r24	; 0x09
    16ce:	9a 87       	std	Y+10, r25	; 0x0a
			params.ch0.main.track_size = sizeof(nyanMainTreble);
    16d0:	84 ed       	ldi	r24, 0xD4	; 212
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	8b 87       	std	Y+11, r24	; 0x0b
    16d6:	9c 87       	std	Y+12, r25	; 0x0c
			params.ch0.main.extension_data = nyanMainExtTreble;
    16d8:	89 e6       	ldi	r24, 0x69	; 105
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	8d 87       	std	Y+13, r24	; 0x0d
    16de:	9e 87       	std	Y+14, r25	; 0x0e
			params.ch0.main.extension_size = sizeof(nyanMainExtTreble);
    16e0:	8b e1       	ldi	r24, 0x1B	; 27
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	8f 87       	std	Y+15, r24	; 0x0f
    16e6:	98 8b       	std	Y+16, r25	; 0x10
			params.ch1.intro.track_data = nyanIntroBass;
    16e8:	87 e6       	ldi	r24, 0x67	; 103
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	89 8b       	std	Y+17, r24	; 0x11
    16ee:	9a 8b       	std	Y+18, r25	; 0x12
			params.ch1.intro.track_size = sizeof(nyanIntroBass);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = nyanIntroExtBass;
    16f8:	86 e6       	ldi	r24, 0x66	; 102
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	8d 8b       	std	Y+21, r24	; 0x15
    16fe:	9e 8b       	std	Y+22, r25	; 0x16
			params.ch1.intro.extension_size = sizeof(nyanIntroExtBass);			
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	8f 8b       	std	Y+23, r24	; 0x17
    1706:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = nyanMainBass;
    1708:	85 e5       	ldi	r24, 0x55	; 85
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	89 8f       	std	Y+25, r24	; 0x19
    170e:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(nyanMainBass);
    1710:	81 e1       	ldi	r24, 0x11	; 17
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	8b 8f       	std	Y+27, r24	; 0x1b
    1716:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = nyanMainExtBass;
    1718:	82 e5       	ldi	r24, 0x52	; 82
    171a:	92 e0       	ldi	r25, 0x02	; 2
    171c:	8d 8f       	std	Y+29, r24	; 0x1d
    171e:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(nyanMainExtBass);
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	8f 8f       	std	Y+31, r24	; 0x1f
    1726:	98 a3       	std	Y+32, r25	; 0x20
			
			song_player_init(params, play_lights_nyan);
    1728:	81 ef       	ldi	r24, 0xF1	; 241
    172a:	96 e0       	ldi	r25, 0x06	; 6
    172c:	9f 93       	push	r25
    172e:	8f 93       	push	r24
    1730:	8d b7       	in	r24, 0x3d	; 61
    1732:	9e b7       	in	r25, 0x3e	; 62
    1734:	82 97       	sbiw	r24, 0x22	; 34
    1736:	8d bf       	out	0x3d, r24	; 61
    1738:	9e bf       	out	0x3e, r25	; 62
    173a:	ad b7       	in	r26, 0x3d	; 61
    173c:	be b7       	in	r27, 0x3e	; 62
    173e:	11 96       	adiw	r26, 0x01	; 1
    1740:	82 e2       	ldi	r24, 0x22	; 34
    1742:	fe 01       	movw	r30, r28
    1744:	31 96       	adiw	r30, 0x01	; 1
    1746:	01 90       	ld	r0, Z+
    1748:	0d 92       	st	X+, r0
    174a:	8a 95       	dec	r24
    174c:	e1 f7       	brne	.-8      	; 0x1746 <start_up+0x13e>
    174e:	0e 94 3e 10 	call	0x207c	; 0x207c <song_player_init>
			song_start();
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <song_start>
			
			
			break;
    175a:	ce c0       	rjmp	.+412    	; 0x18f8 <start_up+0x2f0>
		case PORTAL_sm:		
			if (get_allow_portal())
    175c:	0e 94 8d 11 	call	0x231a	; 0x231a <get_allow_portal>
    1760:	88 23       	and	r24, r24
    1762:	09 f4       	brne	.+2      	; 0x1766 <start_up+0x15e>
    1764:	c9 c0       	rjmp	.+402    	; 0x18f8 <start_up+0x2f0>
			{
				song_out_init();
    1766:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <song_out_init>
				ws2812drv_init();
    176a:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
				params.bmp_period = portalBPMPeriod;
    176e:	89 e0       	ldi	r24, 0x09	; 9
    1770:	9d e3       	ldi	r25, 0x3D	; 61
    1772:	89 a3       	std	Y+33, r24	; 0x21
    1774:	9a a3       	std	Y+34, r25	; 0x22
				params.ch0.intro.track_data = portalIntroTreble;
    1776:	8e e4       	ldi	r24, 0x4E	; 78
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	9a 83       	std	Y+2, r25	; 0x02
				params.ch0.intro.track_size = sizeof(portalIntroTreble);
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	8b 83       	std	Y+3, r24	; 0x03
    1784:	9c 83       	std	Y+4, r25	; 0x04
				params.ch0.intro.extension_data = portalIntroExtTreble;
    1786:	8d e4       	ldi	r24, 0x4D	; 77
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	9e 83       	std	Y+6, r25	; 0x06
				params.ch0.intro.extension_size = sizeof(portalIntroExtTreble);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	98 87       	std	Y+8, r25	; 0x08
				params.ch0.main.track_data = portalMainTreble;
    1796:	20 ec       	ldi	r18, 0xC0	; 192
    1798:	31 e0       	ldi	r19, 0x01	; 1
    179a:	29 87       	std	Y+9, r18	; 0x09
    179c:	3a 87       	std	Y+10, r19	; 0x0a
				params.ch0.main.track_size = sizeof(portalMainTreble);
    179e:	2d e8       	ldi	r18, 0x8D	; 141
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	2b 87       	std	Y+11, r18	; 0x0b
    17a4:	3c 87       	std	Y+12, r19	; 0x0c
				params.ch0.main.extension_data = portalMainExtTreble;
    17a6:	2e ea       	ldi	r18, 0xAE	; 174
    17a8:	31 e0       	ldi	r19, 0x01	; 1
    17aa:	2d 87       	std	Y+13, r18	; 0x0d
    17ac:	3e 87       	std	Y+14, r19	; 0x0e
				params.ch0.main.extension_size = sizeof(portalMainExtTreble);
    17ae:	22 e1       	ldi	r18, 0x12	; 18
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	2f 87       	std	Y+15, r18	; 0x0f
    17b4:	38 8b       	std	Y+16, r19	; 0x10
				params.ch1.intro.track_data = portalIntroBass;
    17b6:	2d ea       	ldi	r18, 0xAD	; 173
    17b8:	31 e0       	ldi	r19, 0x01	; 1
    17ba:	29 8b       	std	Y+17, r18	; 0x11
    17bc:	3a 8b       	std	Y+18, r19	; 0x12
				params.ch1.intro.track_size = sizeof(portalIntroBass);
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	9c 8b       	std	Y+20, r25	; 0x14
				params.ch1.intro.extension_data = portalIntroExtBass;
    17c2:	2c ea       	ldi	r18, 0xAC	; 172
    17c4:	31 e0       	ldi	r19, 0x01	; 1
    17c6:	2d 8b       	std	Y+21, r18	; 0x15
    17c8:	3e 8b       	std	Y+22, r19	; 0x16
				params.ch1.intro.extension_size = sizeof(portalIntroExtBass);
    17ca:	8f 8b       	std	Y+23, r24	; 0x17
    17cc:	98 8f       	std	Y+24, r25	; 0x18
				params.ch1.main.track_data = portalMainBass;
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	89 8f       	std	Y+25, r24	; 0x19
    17d4:	9a 8f       	std	Y+26, r25	; 0x1a
				params.ch1.main.track_size = sizeof(portalMainBass);
    17d6:	8a ea       	ldi	r24, 0xAA	; 170
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	8b 8f       	std	Y+27, r24	; 0x1b
    17dc:	9c 8f       	std	Y+28, r25	; 0x1c
				params.ch1.main.extension_data = portalMainExtBass;
    17de:	8c ee       	ldi	r24, 0xEC	; 236
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	8d 8f       	std	Y+29, r24	; 0x1d
    17e4:	9e 8f       	std	Y+30, r25	; 0x1e
				params.ch1.main.extension_size = sizeof(portalMainExtBass);
    17e6:	86 e1       	ldi	r24, 0x16	; 22
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	8f 8f       	std	Y+31, r24	; 0x1f
    17ec:	98 a3       	std	Y+32, r25	; 0x20
			
				song_player_init(params, play_lights_portal);
    17ee:	87 ef       	ldi	r24, 0xF7	; 247
    17f0:	97 e0       	ldi	r25, 0x07	; 7
    17f2:	9f 93       	push	r25
    17f4:	8f 93       	push	r24
    17f6:	8d b7       	in	r24, 0x3d	; 61
    17f8:	9e b7       	in	r25, 0x3e	; 62
    17fa:	82 97       	sbiw	r24, 0x22	; 34
    17fc:	8d bf       	out	0x3d, r24	; 61
    17fe:	9e bf       	out	0x3e, r25	; 62
    1800:	ad b7       	in	r26, 0x3d	; 61
    1802:	be b7       	in	r27, 0x3e	; 62
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	82 e2       	ldi	r24, 0x22	; 34
    1808:	fe 01       	movw	r30, r28
    180a:	31 96       	adiw	r30, 0x01	; 1
    180c:	01 90       	ld	r0, Z+
    180e:	0d 92       	st	X+, r0
    1810:	8a 95       	dec	r24
    1812:	e1 f7       	brne	.-8      	; 0x180c <start_up+0x204>
    1814:	0e 94 3e 10 	call	0x207c	; 0x207c <song_player_init>
				song_start();
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <song_start>
    1820:	6b c0       	rjmp	.+214    	; 0x18f8 <start_up+0x2f0>
						
			}
			break;
		case EASTER_EGG_sm:
			if (get_allow_easter_egg())
    1822:	0e 94 9b 11 	call	0x2336	; 0x2336 <get_allow_easter_egg>
    1826:	88 23       	and	r24, r24
    1828:	09 f4       	brne	.+2      	; 0x182c <start_up+0x224>
    182a:	66 c0       	rjmp	.+204    	; 0x18f8 <start_up+0x2f0>
			{
				sys_timer_D5_init();
    182c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <sys_timer_D5_init>
				ws2812drv_init();
    1830:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
				note_buttons_init();
    1834:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <note_buttons_init>
				dingle_input_init();
    1838:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <dingle_input_init>
    183c:	5d c0       	rjmp	.+186    	; 0x18f8 <start_up+0x2f0>
			}
			break;
		case EASTER_EGG_START_sm:
			
			song_out_init();
    183e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <song_out_init>
			ws2812drv_init();
    1842:	0e 94 27 12 	call	0x244e	; 0x244e <ws2812drv_init>
			params.bmp_period = easterEggBPMPeriod;
    1846:	89 e0       	ldi	r24, 0x09	; 9
    1848:	9d e3       	ldi	r25, 0x3D	; 61
    184a:	89 a3       	std	Y+33, r24	; 0x21
    184c:	9a a3       	std	Y+34, r25	; 0x22
			params.ch0.intro.track_data = easterEggIntroTreble;
    184e:	8b ee       	ldi	r24, 0xEB	; 235
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	9a 83       	std	Y+2, r25	; 0x02
			params.ch0.intro.track_size = sizeof(easterEggIntroTreble);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	9c 83       	std	Y+4, r25	; 0x04
			params.ch0.intro.extension_data = easterEggIntroExtTreble;
    185e:	2a ee       	ldi	r18, 0xEA	; 234
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	2d 83       	std	Y+5, r18	; 0x05
    1864:	3e 83       	std	Y+6, r19	; 0x06
			params.ch0.intro.extension_size = sizeof(easterEggIntroExtTreble);
    1866:	8f 83       	std	Y+7, r24	; 0x07
    1868:	98 87       	std	Y+8, r25	; 0x08
			params.ch0.main.track_data = easterEggMainTreble;
    186a:	25 ed       	ldi	r18, 0xD5	; 213
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	29 87       	std	Y+9, r18	; 0x09
    1870:	3a 87       	std	Y+10, r19	; 0x0a
			params.ch0.main.track_size = sizeof(easterEggMainTreble);
    1872:	25 e1       	ldi	r18, 0x15	; 21
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	2b 87       	std	Y+11, r18	; 0x0b
    1878:	3c 87       	std	Y+12, r19	; 0x0c
			params.ch0.main.extension_data = easterEggMainExtTreble;
    187a:	22 ed       	ldi	r18, 0xD2	; 210
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	2d 87       	std	Y+13, r18	; 0x0d
    1880:	3e 87       	std	Y+14, r19	; 0x0e
			params.ch0.main.extension_size = sizeof(easterEggMainExtTreble);
    1882:	23 e0       	ldi	r18, 0x03	; 3
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	2f 87       	std	Y+15, r18	; 0x0f
    1888:	38 8b       	std	Y+16, r19	; 0x10
			params.ch1.intro.track_data = easterEggIntroBass;
    188a:	21 ed       	ldi	r18, 0xD1	; 209
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	29 8b       	std	Y+17, r18	; 0x11
    1890:	3a 8b       	std	Y+18, r19	; 0x12
			params.ch1.intro.track_size = sizeof(easterEggIntroBass);
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	9c 8b       	std	Y+20, r25	; 0x14
			params.ch1.intro.extension_data = easterEggIntroExtBass;
    1896:	20 ed       	ldi	r18, 0xD0	; 208
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	2d 8b       	std	Y+21, r18	; 0x15
    189c:	3e 8b       	std	Y+22, r19	; 0x16
			params.ch1.intro.extension_size = sizeof(easterEggIntroExtBass);
    189e:	8f 8b       	std	Y+23, r24	; 0x17
    18a0:	98 8f       	std	Y+24, r25	; 0x18
			params.ch1.main.track_data = easterEggMainBass;
    18a2:	80 eb       	ldi	r24, 0xB0	; 176
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	89 8f       	std	Y+25, r24	; 0x19
    18a8:	9a 8f       	std	Y+26, r25	; 0x1a
			params.ch1.main.track_size = sizeof(easterEggMainBass);
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	8b 8f       	std	Y+27, r24	; 0x1b
    18b0:	9c 8f       	std	Y+28, r25	; 0x1c
			params.ch1.main.extension_data = easterEggMainExtBass;
    18b2:	8c ea       	ldi	r24, 0xAC	; 172
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
    18b8:	9e 8f       	std	Y+30, r25	; 0x1e
			params.ch1.main.extension_size = sizeof(easterEggMainExtBass);
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	8f 8f       	std	Y+31, r24	; 0x1f
    18c0:	98 a3       	std	Y+32, r25	; 0x20
				
			song_player_init(params, play_lights_easter_egg_intro);
    18c2:	8a e1       	ldi	r24, 0x1A	; 26
    18c4:	9a e0       	ldi	r25, 0x0A	; 10
    18c6:	9f 93       	push	r25
    18c8:	8f 93       	push	r24
    18ca:	8d b7       	in	r24, 0x3d	; 61
    18cc:	9e b7       	in	r25, 0x3e	; 62
    18ce:	82 97       	sbiw	r24, 0x22	; 34
    18d0:	8d bf       	out	0x3d, r24	; 61
    18d2:	9e bf       	out	0x3e, r25	; 62
    18d4:	ad b7       	in	r26, 0x3d	; 61
    18d6:	be b7       	in	r27, 0x3e	; 62
    18d8:	11 96       	adiw	r26, 0x01	; 1
    18da:	82 e2       	ldi	r24, 0x22	; 34
    18dc:	fe 01       	movw	r30, r28
    18de:	31 96       	adiw	r30, 0x01	; 1
    18e0:	01 90       	ld	r0, Z+
    18e2:	0d 92       	st	X+, r0
    18e4:	8a 95       	dec	r24
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <start_up+0x2d8>
    18e8:	0e 94 3e 10 	call	0x207c	; 0x207c <song_player_init>
			//song_start();
			song_play_once(next_start_mode);
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	8e e1       	ldi	r24, 0x1E	; 30
    18f2:	92 e1       	ldi	r25, 0x12	; 18
    18f4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <song_play_once>
			break;		
	}	
}
    18f8:	a2 96       	adiw	r28, 0x22	; 34
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <check_start_mode_pin>:


void check_start_mode_pin()
{
	if (!(PORTA.IN & PIN0_bm))
    1904:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1908:	80 fd       	sbrc	r24, 0
    190a:	13 c0       	rjmp	.+38     	; 0x1932 <check_start_mode_pin+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    190c:	2f ef       	ldi	r18, 0xFF	; 255
    190e:	80 e7       	ldi	r24, 0x70	; 112
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	21 50       	subi	r18, 0x01	; 1
    1914:	80 40       	sbci	r24, 0x00	; 0
    1916:	90 40       	sbci	r25, 0x00	; 0
    1918:	e1 f7       	brne	.-8      	; 0x1912 <check_start_mode_pin+0xe>
    191a:	00 c0       	rjmp	.+0      	; 0x191c <check_start_mode_pin+0x18>
    191c:	00 00       	nop
	{
		//Simple blocking debounce
		_delay_ms(25);
		if(!(PORTA.IN & PIN0_bm))
    191e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1922:	80 fd       	sbrc	r24, 0
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <check_start_mode_pin+0x2e>
		{
			//Hold until the pin is released.
			while (!(PORTA.IN & PIN0_bm));
    1926:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    192a:	80 ff       	sbrs	r24, 0
    192c:	fc cf       	rjmp	.-8      	; 0x1926 <check_start_mode_pin+0x22>
			next_start_mode();
    192e:	0e 94 1e 12 	call	0x243c	; 0x243c <next_start_mode>
    1932:	08 95       	ret

00001934 <set_startup_mode_lights>:
		}
	}	
}

void set_startup_mode_lights(uint8_t mode)
{
    1934:	98 2f       	mov	r25, r24
	uint8_t temp = PORTD.OUT & 0x1F;
    1936:	e0 e6       	ldi	r30, 0x60	; 96
    1938:	f6 e0       	ldi	r31, 0x06	; 6
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	28 2f       	mov	r18, r24
    193e:	2f 71       	andi	r18, 0x1F	; 31
	temp |= ((mode + 1) << 5);
    1940:	89 2f       	mov	r24, r25
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	82 95       	swap	r24
    194c:	92 95       	swap	r25
    194e:	90 7f       	andi	r25, 0xF0	; 240
    1950:	98 27       	eor	r25, r24
    1952:	80 7f       	andi	r24, 0xF0	; 240
    1954:	98 27       	eor	r25, r24
    1956:	82 2b       	or	r24, r18
	PORTD.OUT = temp;
    1958:	84 83       	std	Z+4, r24	; 0x04
    195a:	08 95       	ret

0000195c <get_note_buttons>:
}

uint8_t get_note_buttons()
{
	uint8_t buttons = ((~PORTA.IN) & 0xF0) >> 4;
    195c:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	20 95       	com	r18
    1964:	30 95       	com	r19
    1966:	20 7f       	andi	r18, 0xF0	; 240
    1968:	33 27       	eor	r19, r19
    196a:	35 95       	asr	r19
    196c:	27 95       	ror	r18
    196e:	35 95       	asr	r19
    1970:	27 95       	ror	r18
    1972:	35 95       	asr	r19
    1974:	27 95       	ror	r18
    1976:	35 95       	asr	r19
    1978:	27 95       	ror	r18
	//need to flip the order
	uint8_t flipped = ((buttons & 0x01) << 3) | ((buttons & 0x02) << 1) | ((buttons & 0x04) >> 1) | ((buttons & 0x08) >> 3);
    197a:	c9 01       	movw	r24, r18
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	99 27       	eor	r25, r25
    1980:	bc 01       	movw	r22, r24
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	c9 01       	movw	r24, r18
    1990:	82 70       	andi	r24, 0x02	; 2
    1992:	99 27       	eor	r25, r25
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	a9 01       	movw	r20, r18
    199a:	44 70       	andi	r20, 0x04	; 4
    199c:	55 27       	eor	r21, r21
    199e:	55 95       	asr	r21
    19a0:	47 95       	ror	r20
    19a2:	36 95       	lsr	r19
    19a4:	27 95       	ror	r18
    19a6:	36 95       	lsr	r19
    19a8:	27 95       	ror	r18
    19aa:	36 95       	lsr	r19
    19ac:	27 95       	ror	r18
    19ae:	86 2b       	or	r24, r22
    19b0:	84 2b       	or	r24, r20
	return flipped;
}
    19b2:	82 2b       	or	r24, r18
    19b4:	08 95       	ret

000019b6 <check_play_note>:

uint8_t check_play_note()
{
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
	uint8_t note_buttons = get_note_buttons();
    19ba:	0e 94 ae 0c 	call	0x195c	; 0x195c <get_note_buttons>
    19be:	c8 2f       	mov	r28, r24
	uint8_t val_changed = expander_get_val_changed();
    19c0:	0e 94 59 05 	call	0xab2	; 0xab2 <expander_get_val_changed>
    19c4:	d8 2f       	mov	r29, r24
	uint8_t playing = note_player_playing();
    19c6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <note_player_playing>
	if (note_buttons && val_changed && !(playing))
    19ca:	cc 23       	and	r28, r28
    19cc:	11 f1       	breq	.+68     	; 0x1a12 <check_play_note+0x5c>
    19ce:	dd 23       	and	r29, r29
    19d0:	01 f1       	breq	.+64     	; 0x1a12 <check_play_note+0x5c>
    19d2:	81 11       	cpse	r24, r1
    19d4:	1e c0       	rjmp	.+60     	; 0x1a12 <check_play_note+0x5c>
	{
		note_play(note_buttons);		
    19d6:	8c 2f       	mov	r24, r28
    19d8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <note_play>
		
		if (note_buttons == easter_egg_pattern[easter_egg_index])
    19dc:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <easter_egg_index>
    19e0:	e8 2f       	mov	r30, r24
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	e9 5d       	subi	r30, 0xD9	; 217
    19e6:	ff 4d       	sbci	r31, 0xDF	; 223
    19e8:	90 81       	ld	r25, Z
    19ea:	c9 13       	cpse	r28, r25
    19ec:	10 c0       	rjmp	.+32     	; 0x1a0e <check_play_note+0x58>
		{
			easter_egg_index++;
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <easter_egg_index>
			
			if (easter_egg_index == easter_egg_size)
    19f4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <easter_egg_size>
    19f8:	89 13       	cpse	r24, r25
    19fa:	0b c0       	rjmp	.+22     	; 0x1a12 <check_play_note+0x5c>
			{
				
				set_allow_easter_egg(ALLOW_VAL);
    19fc:	85 e5       	ldi	r24, 0x55	; 85
    19fe:	0e 94 9e 11 	call	0x233c	; 0x233c <set_allow_easter_egg>
				easter_egg_index = 0;
    1a02:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <easter_egg_index>
				set_start_mode(EASTER_EGG_START_sm);
    1a06:	8f ee       	ldi	r24, 0xEF	; 239
    1a08:	0e 94 ed 11 	call	0x23da	; 0x23da <set_start_mode>
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <check_play_note+0x5c>
			}			
		}
		else
		{
			easter_egg_index = 0;
    1a0e:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <easter_egg_index>
		}
	}

	return note_buttons;
}
    1a12:	8c 2f       	mov	r24, r28
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <check_play_easter_egg>:

uint8_t check_play_easter_egg()
{
    1a1a:	cf 93       	push	r28
	uint8_t note_buttons = get_note_buttons();
    1a1c:	0e 94 ae 0c 	call	0x195c	; 0x195c <get_note_buttons>
    1a20:	c8 2f       	mov	r28, r24

	if (note_buttons && expander_get_val_changed())
    1a22:	88 23       	and	r24, r24
    1a24:	69 f0       	breq	.+26     	; 0x1a40 <check_play_easter_egg+0x26>
    1a26:	0e 94 59 05 	call	0xab2	; 0xab2 <expander_get_val_changed>
    1a2a:	88 23       	and	r24, r24
    1a2c:	49 f0       	breq	.+18     	; 0x1a40 <check_play_easter_egg+0x26>
	{
		meeseeks_data[1] = note_buttons;
    1a2e:	c0 93 38 20 	sts	0x2038, r28	; 0x802038 <meeseeks_data+0x1>
		twi_write(MEESEEKS_ADDR, meeseeks_data, sizeof(meeseeks_data));
    1a32:	42 e0       	ldi	r20, 0x02	; 2
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	67 e3       	ldi	r22, 0x37	; 55
    1a38:	70 e2       	ldi	r23, 0x20	; 32
    1a3a:	82 e1       	ldi	r24, 0x12	; 18
    1a3c:	0e 94 3b 04 	call	0x876	; 0x876 <twi_write>
	}

	return note_buttons;	
	
}
    1a40:	8c 2f       	mov	r24, r28
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <get_unlock_detected>:

uint8_t get_unlock_detected()
{
	PORTC.DIRSET = PIN5_bm;
    1a46:	e0 e4       	ldi	r30, 0x40	; 64
    1a48:	f6 e0       	ldi	r31, 0x06	; 6
    1a4a:	80 e2       	ldi	r24, 0x20	; 32
    1a4c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN6_bm;
    1a4e:	80 e4       	ldi	r24, 0x40	; 64
    1a50:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    1a52:	80 e1       	ldi	r24, 0x10	; 16
    1a54:	86 8b       	std	Z+22, r24	; 0x16
    1a56:	8f e3       	ldi	r24, 0x3F	; 63
    1a58:	9f e1       	ldi	r25, 0x1F	; 31
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <get_unlock_detected+0x14>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <get_unlock_detected+0x1a>
    1a60:	00 00       	nop
	_delay_ms(1);
	//PIN6 should be low
	if (PORTC.IN & PIN6_bm)
    1a62:	80 85       	ldd	r24, Z+8	; 0x08
    1a64:	28 2f       	mov	r18, r24
    1a66:	20 74       	andi	r18, 0x40	; 64
    1a68:	86 fd       	sbrc	r24, 6
    1a6a:	3c c0       	rjmp	.+120    	; 0x1ae4 <get_unlock_detected+0x9e>
    1a6c:	8f e3       	ldi	r24, 0x3F	; 63
    1a6e:	9f e1       	ldi	r25, 0x1F	; 31
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <get_unlock_detected+0x2a>
    1a74:	00 c0       	rjmp	.+0      	; 0x1a76 <get_unlock_detected+0x30>
    1a76:	00 00       	nop
	{
		return 0;
	}
	_delay_ms(1);
	PORTC.OUTSET = PIN5_bm;
    1a78:	80 e2       	ldi	r24, 0x20	; 32
    1a7a:	85 83       	std	Z+5, r24	; 0x05
    1a7c:	8f e3       	ldi	r24, 0x3F	; 63
    1a7e:	9f e1       	ldi	r25, 0x1F	; 31
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <get_unlock_detected+0x3a>
    1a84:	00 c0       	rjmp	.+0      	; 0x1a86 <get_unlock_detected+0x40>
    1a86:	00 00       	nop
	_delay_ms(1);
	//PIN6 should be high
	if (!(PORTC.IN & PIN6_bm))
    1a88:	90 85       	ldd	r25, Z+8	; 0x08
    1a8a:	89 2f       	mov	r24, r25
    1a8c:	80 74       	andi	r24, 0x40	; 64
    1a8e:	96 ff       	sbrs	r25, 6
    1a90:	2c c0       	rjmp	.+88     	; 0x1aea <get_unlock_detected+0xa4>
    1a92:	8f e3       	ldi	r24, 0x3F	; 63
    1a94:	9f e1       	ldi	r25, 0x1F	; 31
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <get_unlock_detected+0x50>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <get_unlock_detected+0x56>
    1a9c:	00 00       	nop
	{
		return 0;
	}	
	_delay_ms(1);
	PORTC.OUTCLR = PIN5_bm;
    1a9e:	80 e2       	ldi	r24, 0x20	; 32
    1aa0:	86 83       	std	Z+6, r24	; 0x06
    1aa2:	8f e3       	ldi	r24, 0x3F	; 63
    1aa4:	9f e1       	ldi	r25, 0x1F	; 31
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <get_unlock_detected+0x60>
    1aaa:	00 c0       	rjmp	.+0      	; 0x1aac <get_unlock_detected+0x66>
    1aac:	00 00       	nop
	_delay_ms(1);
	
	//PIN6 should be low
	if (PORTC.IN & PIN6_bm)
    1aae:	80 85       	ldd	r24, Z+8	; 0x08
    1ab0:	86 fd       	sbrc	r24, 6
    1ab2:	1a c0       	rjmp	.+52     	; 0x1ae8 <get_unlock_detected+0xa2>
    1ab4:	8f e3       	ldi	r24, 0x3F	; 63
    1ab6:	9f e1       	ldi	r25, 0x1F	; 31
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <get_unlock_detected+0x72>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <get_unlock_detected+0x78>
    1abe:	00 00       	nop
	{
		return 0;
	}
	_delay_ms(1);
	PORTC.OUTSET = PIN5_bm;
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	85 83       	std	Z+5, r24	; 0x05
    1ac4:	8f e3       	ldi	r24, 0x3F	; 63
    1ac6:	9f e1       	ldi	r25, 0x1F	; 31
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <get_unlock_detected+0x82>
    1acc:	00 c0       	rjmp	.+0      	; 0x1ace <get_unlock_detected+0x88>
    1ace:	00 00       	nop
	_delay_ms(1);
	//PIN6 should be high
	if (!(PORTC.IN & PIN6_bm))
    1ad0:	90 85       	ldd	r25, Z+8	; 0x08
    1ad2:	89 2f       	mov	r24, r25
    1ad4:	80 74       	andi	r24, 0x40	; 64
    1ad6:	96 ff       	sbrs	r25, 6
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <get_unlock_detected+0xa4>
	{
		return 0;
	}
	
	PORTC.OUTCLR = PIN5_bm;
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN5_bm;
    1ade:	82 83       	std	Z+2, r24	; 0x02
	return ALLOW_VAL;	
    1ae0:	85 e5       	ldi	r24, 0x55	; 85
    1ae2:	08 95       	ret
	PORTC.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
	_delay_ms(1);
	//PIN6 should be low
	if (PORTC.IN & PIN6_bm)
	{
		return 0;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	08 95       	ret
	_delay_ms(1);
	
	//PIN6 should be low
	if (PORTC.IN & PIN6_bm)
	{
		return 0;
    1ae8:	82 2f       	mov	r24, r18
	}
	
	PORTC.OUTCLR = PIN5_bm;
	PORTC.DIRCLR = PIN5_bm;
	return ALLOW_VAL;	
}
    1aea:	08 95       	ret

00001aec <main>:
int main(void)
{
	uint8_t note_buttons;
	
	//Debug pin
	PORTA.DIRSET = PIN3_bm;
    1aec:	e0 e0       	ldi	r30, 0x00	; 0
    1aee:	f6 e0       	ldi	r31, 0x06	; 6
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN3_bm;
    1af4:	86 83       	std	Z+6, r24	; 0x06
			
	cli();
    1af6:	f8 94       	cli
	clk_init();
    1af8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <clk_init>
	interrupt_init();
    1afc:	0e 94 ce 0a 	call	0x159c	; 0x159c <interrupt_init>
	sei();
    1b00:	78 94       	sei
		
	io_init();
    1b02:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <io_init>
	expander_init();
    1b06:	0e 94 33 05 	call	0xa66	; 0xa66 <expander_init>
	
	//Hold until the pin is released.
	while (!(PORTA.IN & PIN0_bm));
    1b0a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1b0e:	80 ff       	sbrs	r24, 0
    1b10:	fc cf       	rjmp	.-8      	; 0x1b0a <main+0x1e>

	


	start_mode_init(get_unlock_detected());
    1b12:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <get_unlock_detected>
    1b16:	0e 94 b8 11 	call	0x2370	; 0x2370 <start_mode_init>
	set_startup_mode_lights(get_start_mode());
    1b1a:	0e 94 a9 11 	call	0x2352	; 0x2352 <get_start_mode>
    1b1e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <set_startup_mode_lights>
	start_up(get_start_mode());	
    1b22:	0e 94 a9 11 	call	0x2352	; 0x2352 <get_start_mode>
    1b26:	0e 94 04 0b 	call	0x1608	; 0x1608 <start_up>
	reset_start_mode_in_eeprom();
    1b2a:	0e 94 ac 11 	call	0x2358	; 0x2358 <reset_start_mode_in_eeprom>

    /* Replace with your application code */
    while (1) 
    {
		//TEMP: move to interrupt handler
		check_start_mode_pin();
    1b2e:	0e 94 82 0c 	call	0x1904	; 0x1904 <check_start_mode_pin>
		if (display_ctr >= 10)
    1b32:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <display_ctr>
    1b36:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <display_ctr+0x1>
    1b3a:	0a 97       	sbiw	r24, 0x0a	; 10
    1b3c:	c0 f3       	brcs	.-16     	; 0x1b2e <main+0x42>
		{		
			PORTA.OUTTGL = PIN3_bm;
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
			switch (get_start_mode())
    1b44:	0e 94 a9 11 	call	0x2352	; 0x2352 <get_start_mode>
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	38 f4       	brcc	.+14     	; 0x1b5a <main+0x6e>
    1b4c:	82 30       	cpi	r24, 0x02	; 2
    1b4e:	a0 f4       	brcc	.+40     	; 0x1b78 <main+0x8c>
    1b50:	88 23       	and	r24, r24
    1b52:	31 f0       	breq	.+12     	; 0x1b60 <main+0x74>
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	39 f0       	breq	.+14     	; 0x1b66 <main+0x7a>
    1b58:	1c c0       	rjmp	.+56     	; 0x1b92 <main+0xa6>
    1b5a:	86 30       	cpi	r24, 0x06	; 6
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <main+0x96>
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <main+0xa6>
			{
				case STANDBY_sm:
					play_lights_standby();
    1b60:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <play_lights_standby>
					break;
    1b64:	16 c0       	rjmp	.+44     	; 0x1b92 <main+0xa6>
				case FREEPLAY_sm:
					note_buttons = check_play_note();
    1b66:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <check_play_note>
    1b6a:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
 					play_lights_free_play(expander_get_last_value(), note_buttons);
    1b6c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <expander_get_last_value>
    1b70:	6c 2f       	mov	r22, r28
    1b72:	0e 94 99 06 	call	0xd32	; 0xd32 <play_lights_free_play>

					break;
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <main+0xa6>
				case GAME_EASY_sm:					
				case GAME_HARD_sm:
					games_step(get_note_buttons());
    1b78:	0e 94 ae 0c 	call	0x195c	; 0x195c <get_note_buttons>
    1b7c:	0e 94 b7 02 	call	0x56e	; 0x56e <games_step>
					break;
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <main+0xa6>
				case EASTER_EGG_sm:
					note_buttons = check_play_easter_egg();
    1b82:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <check_play_easter_egg>
    1b86:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
					play_lights_easter_egg(expander_read_ports(), note_buttons);	
    1b88:	0e 94 24 05 	call	0xa48	; 0xa48 <expander_read_ports>
    1b8c:	6c 2f       	mov	r22, r28
    1b8e:	0e 94 9c 09 	call	0x1338	; 0x1338 <play_lights_easter_egg>
					break;
			}
			display_ctr = 0;
    1b92:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <display_ctr>
    1b96:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <display_ctr+0x1>
    1b9a:	c9 cf       	rjmp	.-110    	; 0x1b2e <main+0x42>

00001b9c <__vector_12>:

    }
}

ISR(TCC4_OVF_vect)
{
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	af 93       	push	r26
    1bb8:	bf 93       	push	r27
    1bba:	ef 93       	push	r30
    1bbc:	ff 93       	push	r31
// 	PORTA.OUTTGL = PIN3_bm;
	song_interrupt_handler();
    1bbe:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <song_interrupt_handler>
}
    1bc2:	ff 91       	pop	r31
    1bc4:	ef 91       	pop	r30
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	0f 90       	pop	r0
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	0f 90       	pop	r0
    1be0:	1f 90       	pop	r1
    1be2:	18 95       	reti

00001be4 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	note_interrupt_handler();
    1c06:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <note_interrupt_handler>
}
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_38>:

ISR(TCD5_CCA_vect)
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
	display_ctr++;
    1c3a:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <display_ctr>
    1c3e:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <display_ctr+0x1>
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <display_ctr>
    1c48:	90 93 ac 21 	sts	0x21AC, r25	; 0x8021ac <display_ctr+0x1>
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <note_timer_C5_init>:
uint8_t playing = 0;


void note_timer_C5_init()
{
	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1c5a:	e0 e4       	ldi	r30, 0x40	; 64
    1c5c:	f8 e0       	ldi	r31, 0x08	; 8
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc;
    1c62:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1c64:	84 e0       	ldi	r24, 0x04	; 4
    1c66:	80 83       	st	Z, r24
    1c68:	08 95       	ret

00001c6a <sys_timer_D5_init>:
}

void sys_timer_D5_init()
{
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1c6a:	e0 e4       	ldi	r30, 0x40	; 64
    1c6c:	f9 e0       	ldi	r31, 0x09	; 9
    1c6e:	11 82       	std	Z+1, r1	; 0x01
	TCD5.CTRLE = 0;
    1c70:	14 82       	std	Z+4, r1	; 0x04
	TCD5.INTCTRLB = TC_OVFINTLVL_HI_gc;
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	87 83       	std	Z+7, r24	; 0x07
	TCD5.CTRLA = TC_CLKSEL_DIV1024_gc;
    1c76:	87 e0       	ldi	r24, 0x07	; 7
    1c78:	80 83       	st	Z, r24
	TCD5.PER = 312; //100Hz
    1c7a:	88 e3       	ldi	r24, 0x38	; 56
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	86 a3       	std	Z+38, r24	; 0x26
    1c80:	97 a3       	std	Z+39, r25	; 0x27
    1c82:	08 95       	ret

00001c84 <note_decay_init>:
}

void note_decay_init()
{
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
    1c84:	80 ec       	ldi	r24, 0xC0	; 192
    1c86:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
    1c8a:	e0 e0       	ldi	r30, 0x00	; 0
    1c8c:	f8 e0       	ldi	r31, 0x08	; 8
    1c8e:	80 eb       	ldi	r24, 0xB0	; 176
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	86 a3       	std	Z+38, r24	; 0x26
    1c94:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
    1c9a:	e0 e0       	ldi	r30, 0x00	; 0
    1c9c:	f3 e0       	ldi	r31, 0x03	; 3
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
    1ca2:	98 e0       	ldi	r25, 0x08	; 8
    1ca4:	92 83       	std	Z+2, r25	; 0x02
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
    1ca6:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
    1ca8:	85 e0       	ldi	r24, 0x05	; 5
    1caa:	80 83       	st	Z, r24
	
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
    1cac:	e0 e0       	ldi	r30, 0x00	; 0
    1cae:	f1 e0       	ldi	r31, 0x01	; 1
    1cb0:	80 e4       	ldi	r24, 0x40	; 64
    1cb2:	80 8b       	std	Z+16, r24	; 0x10
	EDMA.CH0.ADDRCTRL =
    1cb4:	81 e3       	ldi	r24, 0x31	; 49
    1cb6:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
    1cb8:	85 e1       	ldi	r24, 0x15	; 21
    1cba:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	
	EDMA.CH0.CTRLB =
    1cbc:	83 e1       	ldi	r24, 0x13	; 19
    1cbe:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction
	
	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
    1cc0:	80 e8       	ldi	r24, 0x80	; 128
    1cc2:	80 83       	st	Z, r24
    1cc4:	08 95       	ret

00001cc6 <run_note_decay>:
}

void run_note_decay()
{
	
	EDMA.CH0.TRFCNT = decay_table_len;                  // data array has len values
    1cc6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <decay_table_len>
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	e0 e0       	ldi	r30, 0x00	; 0
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	86 8b       	std	Z+22, r24	; 0x16
    1cd2:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.ADDR = (uint16_t)expDecayVals;           // this is the source SRAM address
    1cd4:	85 e8       	ldi	r24, 0x85	; 133
    1cd6:	90 e2       	ldi	r25, 0x20	; 32
    1cd8:	80 8f       	std	Z+24, r24	; 0x18
    1cda:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.CTRLA =
    1cdc:	85 e8       	ldi	r24, 0x85	; 133
    1cde:	80 8b       	std	Z+16, r24	; 0x10
    1ce0:	08 95       	ret

00001ce2 <note_play>:
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
}

void note_play(uint8_t note_index)
{
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
	playing = 1;
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <playing>
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + note_index];
    1cec:	e8 2f       	mov	r30, r24
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	37 96       	adiw	r30, 0x07	; 7
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	e1 56       	subi	r30, 0x61	; 97
    1cf8:	ff 4d       	sbci	r31, 0xDF	; 223
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	c0 e4       	ldi	r28, 0x40	; 64
    1d00:	d8 e0       	ldi	r29, 0x08	; 8
    1d02:	88 a7       	std	Y+40, r24	; 0x28
    1d04:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay();
    1d06:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	88 83       	st	Y, r24
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <reset_play>:

void reset_play()
{
	playing = 0;
    1d14:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <playing>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
    1d18:	e0 e0       	ldi	r30, 0x00	; 0
    1d1a:	f1 e0       	ldi	r31, 0x01	; 1
    1d1c:	81 89       	ldd	r24, Z+17	; 0x11
    1d1e:	80 61       	ori	r24, 0x10	; 16
    1d20:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
    1d22:	e0 e4       	ldi	r30, 0x40	; 64
    1d24:	f8 e0       	ldi	r31, 0x08	; 8
    1d26:	10 a2       	std	Z+32, r1	; 0x20
    1d28:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
    1d2a:	10 82       	st	Z, r1
    1d2c:	08 95       	ret

00001d2e <note_player_init>:
}

void note_player_init()
{
	note_timer_C5_init();
    1d2e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <note_timer_C5_init>
	sys_timer_D5_init();
    1d32:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <sys_timer_D5_init>
	note_decay_init();
    1d36:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <note_decay_init>
    1d3a:	08 95       	ret

00001d3c <note_interrupt_handler>:
}

void note_interrupt_handler()
{
	reset_play();
    1d3c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <reset_play>
    1d40:	08 95       	ret

00001d42 <note_player_playing>:
}

uint8_t note_player_playing()
{
	return playing;
    1d42:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <playing>
    1d46:	08 95       	ret

00001d48 <get_seed>:
#include <stdlib.h>
#include <avr/io.h>

unsigned int get_seed()
{
	ADCA.CTRLB|=ADC_CURRLIMIT1_bm|ADC_CONMODE_bm; //medium current consumption, maximum sampling speed 150ksps, resolution 12-bit right adjusted, signed mode
    1d48:	e0 e0       	ldi	r30, 0x00	; 0
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	81 81       	ldd	r24, Z+1	; 0x01
    1d4e:	80 65       	ori	r24, 0x50	; 80
    1d50:	81 83       	std	Z+1, r24	; 0x01
	
	ADCA.REFCTRL|=ADC_REFSEL0_bm; //INTVCC2 i.e. Vcc/1.6 is selected as reference voltage
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	80 61       	ori	r24, 0x10	; 16
    1d56:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.EVCTRL=0x00;               //no event channel input is selected
    1d58:	13 82       	std	Z+3, r1	; 0x03
	
	ADCA.PRESCALER|=ADC_PRESCALER2_bm; //prescaler 64 is selected and peripheral clock is 8MHz
    1d5a:	84 81       	ldd	r24, Z+4	; 0x04
    1d5c:	84 60       	ori	r24, 0x04	; 4
    1d5e:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.INTFLAGS=ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	86 83       	std	Z+6, r24	; 0x06
	
	ADCA.CH0.CTRL|=ADC_CH_INPUTMODE0_bm; //signed mode, single ended positive input selected
    1d64:	80 a1       	ldd	r24, Z+32	; 0x20
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL|=ADC_CH_MUXPOS1_bm; //select PIN1 as input for ADC
    1d6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1d6c:	80 61       	ori	r24, 0x10	; 16
    1d6e:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CTRLA=ADC_ENABLE_bm | ADC_START_bm; //enable ADC and start
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	80 83       	st	Z, r24
	
	while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
    1d74:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fb206>
    1d78:	80 ff       	sbrs	r24, 0
    1d7a:	fc cf       	rjmp	.-8      	; 0x1d74 <get_seed+0x2c>
	
	ADCA.INTFLAGS=ADC_CH0IF_bm;  //clear flag immediately after conversion
    1d7c:	e0 e0       	ldi	r30, 0x00	; 0
    1d7e:	f2 e0       	ldi	r31, 0x02	; 2
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	86 83       	std	Z+6, r24	; 0x06
	
	unsigned int result = ADCA.CH0.RES;
    1d84:	84 a1       	ldd	r24, Z+36	; 0x24
    1d86:	95 a1       	ldd	r25, Z+37	; 0x25
	
	ADCA.CTRLA = 0;
    1d88:	10 82       	st	Z, r1
	return result;
    1d8a:	08 95       	ret

00001d8c <beat_timer_C4_init>:
void (*play_once_callback_ptr)() = 0;

void beat_timer_C4_init(uint16_t per)
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1d8c:	e0 e0       	ldi	r30, 0x00	; 0
    1d8e:	f8 e0       	ldi	r31, 0x08	; 8
    1d90:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
    1d92:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1d94:	23 e0       	ldi	r18, 0x03	; 3
    1d96:	26 83       	std	Z+6, r18	; 0x06
	TCC4.CTRLA = 0;
    1d98:	10 82       	st	Z, r1
	TCC4.PER = per;
    1d9a:	86 a3       	std	Z+38, r24	; 0x26
    1d9c:	97 a3       	std	Z+39, r25	; 0x27
    1d9e:	08 95       	ret

00001da0 <note_0_timer_C5_init>:

//Channel 0 Counter
void note_0_timer_C5_init()
{

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1da0:	e0 e4       	ldi	r30, 0x40	; 64
    1da2:	f8 e0       	ldi	r31, 0x08	; 8
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc; 
    1da8:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	80 83       	st	Z, r24
    1dae:	08 95       	ret

00001db0 <note_1_timer_D5_init>:

//Channel 1 Counter
void note_1_timer_D5_init()
{
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1db0:	e0 e4       	ldi	r30, 0x40	; 64
    1db2:	f9 e0       	ldi	r31, 0x09	; 9
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc;
    1db8:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	80 83       	st	Z, r24
    1dbe:	08 95       	ret

00001dc0 <set_note_and_beat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t set_note_and_beat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	6c 01       	movw	r12, r24
    1dd2:	e9 01       	movw	r28, r18
    1dd4:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	f6 01       	movw	r30, r12
    1dda:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
    1ddc:	88 81       	ld	r24, Y
    1dde:	99 81       	ldd	r25, Y+1	; 0x01
    1de0:	68 0f       	add	r22, r24
    1de2:	79 1f       	adc	r23, r25
    1de4:	fb 01       	movw	r30, r22
    1de6:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
    1de8:	89 2f       	mov	r24, r25
    1dea:	82 95       	swap	r24
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	83 70       	andi	r24, 0x03	; 3
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <set_note_and_beat+0x3c>
    1df8:	66 0f       	add	r22, r22
    1dfa:	77 1f       	adc	r23, r23
    1dfc:	8a 95       	dec	r24
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <set_note_and_beat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
    1e00:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
    1e02:	f8 01       	movw	r30, r16
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
    1e08:	42 0f       	add	r20, r18
    1e0a:	53 1f       	adc	r21, r19
    1e0c:	fa 01       	movw	r30, r20
    1e0e:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	0c 90       	ld	r0, X
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <set_note_and_beat+0x5a>
    1e16:	35 95       	asr	r19
    1e18:	27 95       	ror	r18
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <set_note_and_beat+0x56>
    1e1e:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
    1e20:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
    1e22:	f6 01       	movw	r30, r12
    1e24:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
    1e26:	9f 73       	andi	r25, 0x3F	; 63
    1e28:	89 2f       	mov	r24, r25
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	51 f0       	breq	.+20     	; 0x1e44 <set_note_and_beat+0x84>
	{
		count = noteClocks[index] / 2;
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	fc 01       	movw	r30, r24
    1e36:	e1 5e       	subi	r30, 0xE1	; 225
    1e38:	fe 4d       	sbci	r31, 0xDE	; 222
    1e3a:	40 81       	ld	r20, Z
    1e3c:	51 81       	ldd	r21, Z+1	; 0x01
    1e3e:	56 95       	lsr	r21
    1e40:	47 95       	ror	r20
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <set_note_and_beat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
    1e48:	28 81       	ld	r18, Y
    1e4a:	39 81       	ldd	r19, Y+1	; 0x01
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	28 83       	st	Y, r18
    1e52:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
    1e54:	9c 91       	ld	r25, X
    1e56:	9f 5f       	subi	r25, 0xFF	; 255
    1e58:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
    1e5a:	98 30       	cpi	r25, 0x08	; 8
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <set_note_and_beat+0xac>
	{
		*extBitPosPtr = 0;
    1e5e:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
    1e60:	f8 01       	movw	r30, r16
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	80 83       	st	Z, r24
    1e6a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	08 95       	ret

00001e80 <set_ch0_note_and_beat>:


//Uses the current note indexes for treble
void set_ch0_note_and_beat()
{
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = set_note_and_beat(&noteCh0BeatCount, ch0Track, ch0Ext, &noteCh0Index, &noteCh0ExtIndex, &noteCh0ExtBitPos);
    1e88:	40 91 94 22 	lds	r20, 0x2294	; 0x802294 <ch0Ext>
    1e8c:	50 91 95 22 	lds	r21, 0x2295	; 0x802295 <ch0Ext+0x1>
    1e90:	60 91 a6 22 	lds	r22, 0x22A6	; 0x8022a6 <ch0Track>
    1e94:	70 91 a7 22 	lds	r23, 0x22A7	; 0x8022a7 <ch0Track+0x1>
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	f7 ec       	ldi	r31, 0xC7	; 199
    1e9c:	ef 2e       	mov	r14, r31
    1e9e:	f1 e2       	ldi	r31, 0x21	; 33
    1ea0:	ff 2e       	mov	r15, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	08 ec       	ldi	r16, 0xC8	; 200
    1ea6:	11 e2       	ldi	r17, 0x21	; 33
    1ea8:	2a ec       	ldi	r18, 0xCA	; 202
    1eaa:	31 e2       	ldi	r19, 0x21	; 33
    1eac:	86 ec       	ldi	r24, 0xC6	; 198
    1eae:	91 e2       	ldi	r25, 0x21	; 33
    1eb0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <set_note_and_beat>
    1eb4:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
    1eb8:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	08 95       	ret

00001ec6 <set_ch1_note_and_beat>:

//Uses the current note indexes for Bass
void set_ch1_note_and_beat()
{
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = set_note_and_beat(&noteCh1BeatCount, ch1Track, ch1Ext, &noteCh1Index, &noteCh1ExtIndex, &noteCh1ExtBitPos);
    1ece:	40 91 a8 22 	lds	r20, 0x22A8	; 0x8022a8 <ch1Ext>
    1ed2:	50 91 a9 22 	lds	r21, 0x22A9	; 0x8022a9 <ch1Ext+0x1>
    1ed6:	60 91 a4 22 	lds	r22, 0x22A4	; 0x8022a4 <ch1Track>
    1eda:	70 91 a5 22 	lds	r23, 0x22A5	; 0x8022a5 <ch1Track+0x1>
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	f8 eb       	ldi	r31, 0xB8	; 184
    1ee2:	ef 2e       	mov	r14, r31
    1ee4:	f1 e2       	ldi	r31, 0x21	; 33
    1ee6:	ff 2e       	mov	r15, r31
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	09 eb       	ldi	r16, 0xB9	; 185
    1eec:	11 e2       	ldi	r17, 0x21	; 33
    1eee:	2b eb       	ldi	r18, 0xBB	; 187
    1ef0:	31 e2       	ldi	r19, 0x21	; 33
    1ef2:	87 eb       	ldi	r24, 0xB7	; 183
    1ef4:	91 e2       	ldi	r25, 0x21	; 33
    1ef6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <set_note_and_beat>
    1efa:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
    1efe:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	08 95       	ret

00001f0c <song_init>:

void song_init()
{
	if (hasCh0Intro)
    1f0c:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <hasCh0Intro>
    1f10:	88 23       	and	r24, r24
    1f12:	99 f0       	breq	.+38     	; 0x1f3a <song_init+0x2e>
	{
		isCh0Intro = 1;
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	90 93 bf 21 	sts	0x21BF, r25	; 0x8021bf <isCh0Intro>
		ch0Track = ch0IntroTrack;
    1f1a:	20 91 98 22 	lds	r18, 0x2298	; 0x802298 <ch0IntroTrack>
    1f1e:	30 91 99 22 	lds	r19, 0x2299	; 0x802299 <ch0IntroTrack+0x1>
    1f22:	20 93 a6 22 	sts	0x22A6, r18	; 0x8022a6 <ch0Track>
    1f26:	30 93 a7 22 	sts	0x22A7, r19	; 0x8022a7 <ch0Track+0x1>
		ch0Ext = ch0IntroExt;
    1f2a:	20 91 9e 22 	lds	r18, 0x229E	; 0x80229e <ch0IntroExt>
    1f2e:	30 91 9f 22 	lds	r19, 0x229F	; 0x80229f <ch0IntroExt+0x1>
    1f32:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch0Ext>
    1f36:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch0Ext+0x1>
	}

	if (!(hasCh0Intro) && hasCh0Main)
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	16 c0       	rjmp	.+44     	; 0x1f6a <song_init+0x5e>
    1f3e:	90 91 cc 21 	lds	r25, 0x21CC	; 0x8021cc <hasCh0Main>
    1f42:	99 23       	and	r25, r25
    1f44:	91 f0       	breq	.+36     	; 0x1f6a <song_init+0x5e>
	{
		isCh0Intro = 0;
    1f46:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <isCh0Intro>
		ch0Track = ch0MainTrack;
    1f4a:	20 91 96 22 	lds	r18, 0x2296	; 0x802296 <ch0MainTrack>
    1f4e:	30 91 97 22 	lds	r19, 0x2297	; 0x802297 <ch0MainTrack+0x1>
    1f52:	20 93 a6 22 	sts	0x22A6, r18	; 0x8022a6 <ch0Track>
    1f56:	30 93 a7 22 	sts	0x22A7, r19	; 0x8022a7 <ch0Track+0x1>
		ch0Ext = ch0MainExt;
    1f5a:	20 91 92 22 	lds	r18, 0x2292	; 0x802292 <ch0MainExt>
    1f5e:	30 91 93 22 	lds	r19, 0x2293	; 0x802293 <ch0MainExt+0x1>
    1f62:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch0Ext>
    1f66:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch0Ext+0x1>
	}

	noteCh0BeatCount = 0;
    1f6a:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <noteCh0BeatCount>
	noteCh0Index = 0;
    1f6e:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <noteCh0Index>
    1f72:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <noteCh0Index+0x1>
	noteCh0ExtIndex = 0;
    1f76:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <noteCh0ExtIndex>
    1f7a:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <noteCh0ExtIndex+0x1>
	noteCh0ExtBitPos = 0;
    1f7e:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <noteCh0ExtBitPos>
	
	if (hasCh1Intro)
    1f82:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <hasCh1Intro>
    1f86:	99 23       	and	r25, r25
    1f88:	99 f0       	breq	.+38     	; 0x1fb0 <song_init+0xa4>
	{
		isCh1Intro = 1;
    1f8a:	21 e0       	ldi	r18, 0x01	; 1
    1f8c:	20 93 b0 21 	sts	0x21B0, r18	; 0x8021b0 <isCh1Intro>
		ch1Track = ch1IntroTrack;
    1f90:	20 91 a2 22 	lds	r18, 0x22A2	; 0x8022a2 <ch1IntroTrack>
    1f94:	30 91 a3 22 	lds	r19, 0x22A3	; 0x8022a3 <ch1IntroTrack+0x1>
    1f98:	20 93 a4 22 	sts	0x22A4, r18	; 0x8022a4 <ch1Track>
    1f9c:	30 93 a5 22 	sts	0x22A5, r19	; 0x8022a5 <ch1Track+0x1>
		ch1Ext = ch1IntroExt;
    1fa0:	20 91 90 22 	lds	r18, 0x2290	; 0x802290 <ch1IntroExt>
    1fa4:	30 91 91 22 	lds	r19, 0x2291	; 0x802291 <ch1IntroExt+0x1>
    1fa8:	20 93 a8 22 	sts	0x22A8, r18	; 0x8022a8 <ch1Ext>
    1fac:	30 93 a9 22 	sts	0x22A9, r19	; 0x8022a9 <ch1Ext+0x1>
	}

	if (!(hasCh1Intro) && hasCh1Main)
    1fb0:	91 11       	cpse	r25, r1
    1fb2:	16 c0       	rjmp	.+44     	; 0x1fe0 <song_init+0xd4>
    1fb4:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <hasCh1Main>
    1fb8:	99 23       	and	r25, r25
    1fba:	91 f0       	breq	.+36     	; 0x1fe0 <song_init+0xd4>
	{
		isCh1Intro = 0;
    1fbc:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <isCh1Intro>
		ch1Track = ch1MainTrack;
    1fc0:	20 91 a0 22 	lds	r18, 0x22A0	; 0x8022a0 <ch1MainTrack>
    1fc4:	30 91 a1 22 	lds	r19, 0x22A1	; 0x8022a1 <ch1MainTrack+0x1>
    1fc8:	20 93 a4 22 	sts	0x22A4, r18	; 0x8022a4 <ch1Track>
    1fcc:	30 93 a5 22 	sts	0x22A5, r19	; 0x8022a5 <ch1Track+0x1>
		ch1Ext = ch1MainExt;
    1fd0:	20 91 9a 22 	lds	r18, 0x229A	; 0x80229a <ch1MainExt>
    1fd4:	30 91 9b 22 	lds	r19, 0x229B	; 0x80229b <ch1MainExt+0x1>
    1fd8:	20 93 a8 22 	sts	0x22A8, r18	; 0x8022a8 <ch1Ext>
    1fdc:	30 93 a9 22 	sts	0x22A9, r19	; 0x8022a9 <ch1Ext+0x1>
	}

	noteCh1BeatCount = 0;
    1fe0:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh1BeatCount>
	noteCh1Index = 0;
    1fe4:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh1Index>
    1fe8:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <noteCh1Index+0x1>
	noteCh1ExtIndex = 0;
    1fec:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh1ExtIndex>
    1ff0:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh1ExtIndex+0x1>
	noteCh1ExtBitPos = 0;
    1ff4:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh1ExtBitPos>
	
	if (hasCh0Intro || hasCh0Main)
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <song_init+0xf6>
    1ffc:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <hasCh0Main>
    2000:	81 11       	cpse	r24, r1
	{
		set_ch0_note_and_beat();
    2002:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <set_ch0_note_and_beat>
	}
	
	if (hasCh1Intro || hasCh1Main)
    2006:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <hasCh1Intro>
    200a:	81 11       	cpse	r24, r1
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <song_init+0x108>
    200e:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <hasCh1Main>
    2012:	81 11       	cpse	r24, r1
	{
		set_ch1_note_and_beat();
    2014:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <set_ch1_note_and_beat>
    2018:	08 95       	ret

0000201a <load_track_into_mem>:
	}
	
}

void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	1f 92       	push	r1
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	6c 01       	movw	r12, r24
    2032:	7b 01       	movw	r14, r22
    2034:	8a 01       	movw	r16, r20
	*dest = (uint8_t *)malloc(size);
    2036:	ca 01       	movw	r24, r20
    2038:	0e 94 ad 12 	call	0x255a	; 0x255a <malloc>
    203c:	d7 01       	movw	r26, r14
    203e:	8d 93       	st	X+, r24
    2040:	9c 93       	st	X, r25
	volatile uint8_t temp;
	uint16_t i = 0;
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
	for(;i<size;i++)
    2046:	0d c0       	rjmp	.+26     	; 0x2062 <load_track_into_mem+0x48>
	{
		temp =pgm_read_byte(source + i);
    2048:	f6 01       	movw	r30, r12
    204a:	e8 0f       	add	r30, r24
    204c:	f9 1f       	adc	r31, r25
    204e:	e4 91       	lpm	r30, Z
    2050:	e9 83       	std	Y+1, r30	; 0x01
		(*dest)[i] = temp;
    2052:	d7 01       	movw	r26, r14
    2054:	ed 91       	ld	r30, X+
    2056:	fc 91       	ld	r31, X
    2058:	e8 0f       	add	r30, r24
    205a:	f9 1f       	adc	r31, r25
    205c:	29 81       	ldd	r18, Y+1	; 0x01
    205e:	20 83       	st	Z, r18
void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
	*dest = (uint8_t *)malloc(size);
	volatile uint8_t temp;
	uint16_t i = 0;
	for(;i<size;i++)
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	80 17       	cp	r24, r16
    2064:	91 07       	cpc	r25, r17
    2066:	80 f3       	brcs	.-32     	; 0x2048 <load_track_into_mem+0x2e>
	{
		temp =pgm_read_byte(source + i);
		(*dest)[i] = temp;
	}
}
    2068:	0f 90       	pop	r0
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	08 95       	ret

0000207c <song_player_init>:

void song_player_init(SongInitParams initParams, void (*update_display_cb)())
{
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	update_display_callback_ptr = update_display_cb;
    2088:	89 a5       	ldd	r24, Y+41	; 0x29
    208a:	9a a5       	ldd	r25, Y+42	; 0x2a
    208c:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <update_display_callback_ptr>
    2090:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <update_display_callback_ptr+0x1>
	
	beat_timer_C4_init(initParams.bmp_period);
    2094:	8f a1       	ldd	r24, Y+39	; 0x27
    2096:	98 a5       	ldd	r25, Y+40	; 0x28
    2098:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <beat_timer_C4_init>
	note_0_timer_C5_init();
    209c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <note_0_timer_C5_init>
	note_1_timer_D5_init();	
    20a0:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <note_1_timer_D5_init>
	
	if (initParams.ch0.main.track_data)
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	d1 f0       	breq	.+52     	; 0x20e0 <song_player_init+0x64>
	{
		hasCh0Main = 1;
    20ac:	21 e0       	ldi	r18, 0x01	; 1
    20ae:	20 93 cc 21 	sts	0x21CC, r18	; 0x8021cc <hasCh0Main>
		load_track_into_mem(initParams.ch0.main.track_data, &ch0MainTrack, initParams.ch0.main.track_size);
    20b2:	09 89       	ldd	r16, Y+17	; 0x11
    20b4:	1a 89       	ldd	r17, Y+18	; 0x12
    20b6:	a8 01       	movw	r20, r16
    20b8:	66 e9       	ldi	r22, 0x96	; 150
    20ba:	72 e2       	ldi	r23, 0x22	; 34
    20bc:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.main.extension_data, &ch0MainExt, initParams.ch0.main.extension_size);
    20c0:	4d 89       	ldd	r20, Y+21	; 0x15
    20c2:	5e 89       	ldd	r21, Y+22	; 0x16
    20c4:	62 e9       	ldi	r22, 0x92	; 146
    20c6:	72 e2       	ldi	r23, 0x22	; 34
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		ch0MainNoteCount = initParams.ch0.main.track_size;
    20d0:	00 93 c2 21 	sts	0x21C2, r16	; 0x8021c2 <ch0MainNoteCount>
    20d4:	10 93 c3 21 	sts	0x21C3, r17	; 0x8021c3 <ch0MainNoteCount+0x1>
		ch0NoteCount = ch0MainNoteCount;
    20d8:	00 93 c0 21 	sts	0x21C0, r16	; 0x8021c0 <ch0NoteCount>
    20dc:	10 93 c1 21 	sts	0x21C1, r17	; 0x8021c1 <ch0NoteCount+0x1>
	
	//Note: Checking the main track stuff first so that we can set values here that can be overwritten if intro track
	//information is present without the need for more conditionals	
	
	//First copy over data from progmem
	if (initParams.ch0.intro.track_data)
    20e0:	8f 81       	ldd	r24, Y+7	; 0x07
    20e2:	98 85       	ldd	r25, Y+8	; 0x08
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	d1 f0       	breq	.+52     	; 0x211c <song_player_init+0xa0>
	{
		hasCh0Intro = 1;
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	20 93 cd 21 	sts	0x21CD, r18	; 0x8021cd <hasCh0Intro>
		load_track_into_mem(initParams.ch0.intro.track_data, &ch0IntroTrack, initParams.ch0.intro.track_size);
    20ee:	09 85       	ldd	r16, Y+9	; 0x09
    20f0:	1a 85       	ldd	r17, Y+10	; 0x0a
    20f2:	a8 01       	movw	r20, r16
    20f4:	68 e9       	ldi	r22, 0x98	; 152
    20f6:	72 e2       	ldi	r23, 0x22	; 34
    20f8:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.intro.extension_data, &ch0IntroExt, initParams.ch0.intro.extension_size);
    20fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    20fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    2100:	6e e9       	ldi	r22, 0x9E	; 158
    2102:	72 e2       	ldi	r23, 0x22	; 34
    2104:	8b 85       	ldd	r24, Y+11	; 0x0b
    2106:	9c 85       	ldd	r25, Y+12	; 0x0c
    2108:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		ch0IntroNoteCount = initParams.ch0.intro.track_size;		
    210c:	00 93 c4 21 	sts	0x21C4, r16	; 0x8021c4 <ch0IntroNoteCount>
    2110:	10 93 c5 21 	sts	0x21C5, r17	; 0x8021c5 <ch0IntroNoteCount+0x1>
		ch0NoteCount = ch0IntroNoteCount;
    2114:	00 93 c0 21 	sts	0x21C0, r16	; 0x8021c0 <ch0NoteCount>
    2118:	10 93 c1 21 	sts	0x21C1, r17	; 0x8021c1 <ch0NoteCount+0x1>
	}
	
	if (initParams.ch1.main.track_data)
    211c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211e:	98 a1       	ldd	r25, Y+32	; 0x20
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	d1 f0       	breq	.+52     	; 0x2158 <song_player_init+0xdc>
	{
		hasCh1Main = 1;
    2124:	21 e0       	ldi	r18, 0x01	; 1
    2126:	20 93 bd 21 	sts	0x21BD, r18	; 0x8021bd <hasCh1Main>
		load_track_into_mem(initParams.ch1.main.track_data, &ch1MainTrack, initParams.ch1.main.track_size);
    212a:	09 a1       	ldd	r16, Y+33	; 0x21
    212c:	1a a1       	ldd	r17, Y+34	; 0x22
    212e:	a8 01       	movw	r20, r16
    2130:	60 ea       	ldi	r22, 0xA0	; 160
    2132:	72 e2       	ldi	r23, 0x22	; 34
    2134:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.main.extension_data, &ch1MainExt, initParams.ch1.main.extension_size);
    2138:	4d a1       	ldd	r20, Y+37	; 0x25
    213a:	5e a1       	ldd	r21, Y+38	; 0x26
    213c:	6a e9       	ldi	r22, 0x9A	; 154
    213e:	72 e2       	ldi	r23, 0x22	; 34
    2140:	8b a1       	ldd	r24, Y+35	; 0x23
    2142:	9c a1       	ldd	r25, Y+36	; 0x24
    2144:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		ch1MainNoteCount = initParams.ch1.main.track_size;
    2148:	00 93 b3 21 	sts	0x21B3, r16	; 0x8021b3 <ch1MainNoteCount>
    214c:	10 93 b4 21 	sts	0x21B4, r17	; 0x8021b4 <ch1MainNoteCount+0x1>
		ch1NoteCount = ch1MainNoteCount;
    2150:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <ch1NoteCount>
    2154:	10 93 b2 21 	sts	0x21B2, r17	; 0x8021b2 <ch1NoteCount+0x1>
	}
	
	if (initParams.ch1.intro.track_data)
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	d1 f0       	breq	.+52     	; 0x2194 <song_player_init+0x118>
	{
		hasCh1Intro = 1;
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	20 93 be 21 	sts	0x21BE, r18	; 0x8021be <hasCh1Intro>
		load_track_into_mem(initParams.ch1.intro.track_data, &ch1IntroTrack, initParams.ch1.intro.track_size);
    2166:	09 8d       	ldd	r16, Y+25	; 0x19
    2168:	1a 8d       	ldd	r17, Y+26	; 0x1a
    216a:	a8 01       	movw	r20, r16
    216c:	62 ea       	ldi	r22, 0xA2	; 162
    216e:	72 e2       	ldi	r23, 0x22	; 34
    2170:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.intro.extension_data, &ch1IntroExt, initParams.ch1.intro.extension_size);
    2174:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2176:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2178:	60 e9       	ldi	r22, 0x90	; 144
    217a:	72 e2       	ldi	r23, 0x22	; 34
    217c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2180:	0e 94 0d 10 	call	0x201a	; 0x201a <load_track_into_mem>
		ch1IntroNoteCount = initParams.ch1.intro.track_size;		
    2184:	00 93 b5 21 	sts	0x21B5, r16	; 0x8021b5 <ch1IntroNoteCount>
    2188:	10 93 b6 21 	sts	0x21B6, r17	; 0x8021b6 <ch1IntroNoteCount+0x1>
		ch1NoteCount = ch1IntroNoteCount;
    218c:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <ch1NoteCount>
    2190:	10 93 b2 21 	sts	0x21B2, r17	; 0x8021b2 <ch1NoteCount+0x1>
	}
	
		
	
	song_init();
    2194:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <song_init>
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <song_start>:

void song_start()
{
	TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
    21a8:	08 95       	ret

000021aa <song_play_once>:
}

void song_play_once(void (*callback)())
{
	play_once_callback_ptr = callback;
    21aa:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <play_once_callback_ptr>
    21ae:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <play_once_callback_ptr+0x1>
	song_start();	
    21b2:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <song_start>
    21b6:	08 95       	ret

000021b8 <song_interrupt_handler>:
}

void song_interrupt_handler(){
// 	PORTA.OUTSET = PIN2_bm;
	TCC4.INTFLAGS = TC4_OVFIF_bm;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteCh0BeatCount))
    21be:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <noteCh0BeatCount>
    21c2:	81 11       	cpse	r24, r1
    21c4:	4b c0       	rjmp	.+150    	; 0x225c <song_interrupt_handler+0xa4>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
    21c6:	e0 e4       	ldi	r30, 0x40	; 64
    21c8:	f8 e0       	ldi	r31, 0x08	; 8
    21ca:	10 82       	st	Z, r1
		TCC5.CCA = 0;
    21cc:	10 a6       	std	Z+40, r1	; 0x28
    21ce:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh0Index >= ch0NoteCount)
    21d0:	20 91 ca 21 	lds	r18, 0x21CA	; 0x8021ca <noteCh0Index>
    21d4:	30 91 cb 21 	lds	r19, 0x21CB	; 0x8021cb <noteCh0Index+0x1>
    21d8:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <ch0NoteCount>
    21dc:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <ch0NoteCount+0x1>
    21e0:	28 17       	cp	r18, r24
    21e2:	39 07       	cpc	r19, r25
    21e4:	c0 f1       	brcs	.+112    	; 0x2256 <song_interrupt_handler+0x9e>
		{
			if (isCh0Intro)// && hasCh0Main)
    21e6:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <isCh0Intro>
    21ea:	88 23       	and	r24, r24
    21ec:	d9 f0       	breq	.+54     	; 0x2224 <song_interrupt_handler+0x6c>
			{
				isCh0Intro = 0;
    21ee:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <isCh0Intro>
				ch0NoteCount = ch0MainNoteCount;
    21f2:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <ch0MainNoteCount>
    21f6:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <ch0MainNoteCount+0x1>
    21fa:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <ch0NoteCount>
    21fe:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <ch0NoteCount+0x1>
				ch0Track = ch0MainTrack;
    2202:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <ch0MainTrack>
    2206:	90 91 97 22 	lds	r25, 0x2297	; 0x802297 <ch0MainTrack+0x1>
    220a:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <ch0Track>
    220e:	90 93 a7 22 	sts	0x22A7, r25	; 0x8022a7 <ch0Track+0x1>
				ch0Ext = ch0MainExt;
    2212:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <ch0MainExt>
    2216:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <ch0MainExt+0x1>
    221a:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <ch0Ext>
    221e:	90 93 95 22 	sts	0x2295, r25	; 0x802295 <ch0Ext+0x1>
    2222:	0d c0       	rjmp	.+26     	; 0x223e <song_interrupt_handler+0x86>
			}
			else if (play_once_callback_ptr)
    2224:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <play_once_callback_ptr>
    2228:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <play_once_callback_ptr+0x1>
    222c:	89 2b       	or	r24, r25
    222e:	39 f0       	breq	.+14     	; 0x223e <song_interrupt_handler+0x86>
			{
				TCC4.CTRLA = 0;
    2230:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
				play_once_callback_ptr();
    2234:	e0 91 ae 21 	lds	r30, 0x21AE	; 0x8021ae <play_once_callback_ptr>
    2238:	f0 91 af 21 	lds	r31, 0x21AF	; 0x8021af <play_once_callback_ptr+0x1>
    223c:	09 95       	icall
				
			}
			
			noteCh0BeatCount = 0;
    223e:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <noteCh0BeatCount>
			noteCh0Index = 0;
    2242:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <noteCh0Index>
    2246:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <noteCh0Index+0x1>
			noteCh0ExtIndex = 0;
    224a:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <noteCh0ExtIndex>
    224e:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <noteCh0ExtIndex+0x1>
			noteCh0ExtBitPos = 0;
    2252:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <noteCh0ExtBitPos>
		}
		

		set_ch0_note_and_beat();
    2256:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <set_ch0_note_and_beat>
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <song_interrupt_handler+0xaa>
		
	}
	else
	{
		noteCh0BeatCount--;
    225c:	81 50       	subi	r24, 0x01	; 1
    225e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <noteCh0BeatCount>
	}
	
	if (!(noteCh1BeatCount))
    2262:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <noteCh1BeatCount>
    2266:	81 11       	cpse	r24, r1
    2268:	41 c0       	rjmp	.+130    	; 0x22ec <song_interrupt_handler+0x134>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
    226a:	e0 e4       	ldi	r30, 0x40	; 64
    226c:	f9 e0       	ldi	r31, 0x09	; 9
    226e:	10 82       	st	Z, r1
		TCD5.CCA = 0;
    2270:	10 a6       	std	Z+40, r1	; 0x28
    2272:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh1Index >= ch1NoteCount)
    2274:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <noteCh1Index>
    2278:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <noteCh1Index+0x1>
    227c:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <ch1NoteCount>
    2280:	90 91 b2 21 	lds	r25, 0x21B2	; 0x8021b2 <ch1NoteCount+0x1>
    2284:	28 17       	cp	r18, r24
    2286:	39 07       	cpc	r19, r25
    2288:	70 f1       	brcs	.+92     	; 0x22e6 <song_interrupt_handler+0x12e>
		{
			if (isCh1Intro && hasCh1Main)
    228a:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <isCh1Intro>
    228e:	88 23       	and	r24, r24
    2290:	f1 f0       	breq	.+60     	; 0x22ce <song_interrupt_handler+0x116>
    2292:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <hasCh1Main>
    2296:	88 23       	and	r24, r24
    2298:	d1 f0       	breq	.+52     	; 0x22ce <song_interrupt_handler+0x116>
			{
				isCh1Intro = 0;
    229a:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <isCh1Intro>
				ch1NoteCount = ch1MainNoteCount;
    229e:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <ch1MainNoteCount>
    22a2:	90 91 b4 21 	lds	r25, 0x21B4	; 0x8021b4 <ch1MainNoteCount+0x1>
    22a6:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <ch1NoteCount>
    22aa:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <ch1NoteCount+0x1>
				ch1Track = ch1MainTrack;
    22ae:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <ch1MainTrack>
    22b2:	90 91 a1 22 	lds	r25, 0x22A1	; 0x8022a1 <ch1MainTrack+0x1>
    22b6:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <ch1Track>
    22ba:	90 93 a5 22 	sts	0x22A5, r25	; 0x8022a5 <ch1Track+0x1>
				ch1Ext = ch1MainExt;
    22be:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <ch1MainExt>
    22c2:	90 91 9b 22 	lds	r25, 0x229B	; 0x80229b <ch1MainExt+0x1>
    22c6:	80 93 a8 22 	sts	0x22A8, r24	; 0x8022a8 <ch1Ext>
    22ca:	90 93 a9 22 	sts	0x22A9, r25	; 0x8022a9 <ch1Ext+0x1>
			}
			
			noteCh1BeatCount = 0;
    22ce:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh1BeatCount>
			noteCh1Index = 0;
    22d2:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh1Index>
    22d6:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <noteCh1Index+0x1>
			noteCh1ExtIndex = 0;
    22da:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh1ExtIndex>
    22de:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh1ExtIndex+0x1>
			noteCh1ExtBitPos = 0;
    22e2:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh1ExtBitPos>
		}

		set_ch1_note_and_beat();
    22e6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <set_ch1_note_and_beat>
    22ea:	03 c0       	rjmp	.+6      	; 0x22f2 <song_interrupt_handler+0x13a>
	}
	else
	{
		noteCh1BeatCount--;
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <noteCh1BeatCount>
	}
	
	update_display_callback_ptr();
    22f2:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <update_display_callback_ptr>
    22f6:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <update_display_callback_ptr+0x1>
    22fa:	09 95       	icall
    22fc:	2f ef       	ldi	r18, 0xFF	; 255
    22fe:	83 ef       	ldi	r24, 0xF3	; 243
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	21 50       	subi	r18, 0x01	; 1
    2304:	80 40       	sbci	r24, 0x00	; 0
    2306:	90 40       	sbci	r25, 0x00	; 0
    2308:	e1 f7       	brne	.-8      	; 0x2302 <song_interrupt_handler+0x14a>
    230a:	00 c0       	rjmp	.+0      	; 0x230c <song_interrupt_handler+0x154>
    230c:	00 00       	nop
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    230e:	84 e0       	ldi	r24, 0x04	; 4
    2310:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    2314:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
    2318:	08 95       	ret

0000231a <get_allow_portal>:
volatile uint8_t allow_portal = 0;
volatile uint8_t allow_easter_egg = 0;

uint8_t get_allow_portal()
{
	return allow_portal;
    231a:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <allow_portal>
}
    231e:	08 95       	ret

00002320 <set_allow_portal>:

void set_allow_portal(uint8_t allow)
{
	allow_portal = allow;
    2320:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <allow_portal>
	eeprom_write_byte((uint8_t *)2, allow_portal ? ALLOW_VAL : 0);
    2324:	60 91 cf 21 	lds	r22, 0x21CF	; 0x8021cf <allow_portal>
    2328:	61 11       	cpse	r22, r1
    232a:	65 e5       	ldi	r22, 0x55	; 85
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 32 14 	call	0x2864	; 0x2864 <eeprom_write_byte>
    2334:	08 95       	ret

00002336 <get_allow_easter_egg>:
}

uint8_t get_allow_easter_egg()
{
	return allow_easter_egg;
    2336:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <allow_easter_egg>
}
    233a:	08 95       	ret

0000233c <set_allow_easter_egg>:

void set_allow_easter_egg(uint8_t allow)
{
	allow_easter_egg = allow;
    233c:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <allow_easter_egg>
	eeprom_write_byte((uint8_t *)3, allow_easter_egg ? ALLOW_VAL : 0);
    2340:	60 91 ce 21 	lds	r22, 0x21CE	; 0x8021ce <allow_easter_egg>
    2344:	61 11       	cpse	r22, r1
    2346:	65 e5       	ldi	r22, 0x55	; 85
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 32 14 	call	0x2864	; 0x2864 <eeprom_write_byte>
    2350:	08 95       	ret

00002352 <get_start_mode>:
}

uint8_t get_start_mode()
{
	return start_mode;
    2352:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
}
    2356:	08 95       	ret

00002358 <reset_start_mode_in_eeprom>:

void reset_start_mode_in_eeprom()
{
	eeprom_write_byte((uint8_t *)1, 0);
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 32 14 	call	0x2864	; 0x2864 <eeprom_write_byte>
    2362:	08 95       	ret

00002364 <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
    2364:	88 ed       	ldi	r24, 0xD8	; 216
    2366:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
    236e:	08 95       	ret

00002370 <start_mode_init>:
}

void start_mode_init(uint8_t unlock)
{
    2370:	cf 93       	push	r28
    2372:	c8 2f       	mov	r28, r24
	
	start_mode = eeprom_read_byte((uint8_t*)1);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 2a 14 	call	0x2854	; 0x2854 <eeprom_read_byte>
    237c:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <start_mode>
	
	if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    2380:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    2384:	87 30       	cpi	r24, 0x07	; 7
    2386:	40 f0       	brcs	.+16     	; 0x2398 <start_mode_init+0x28>
    2388:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    238c:	8f 3e       	cpi	r24, 0xEF	; 239
    238e:	21 f0       	breq	.+8      	; 0x2398 <start_mode_init+0x28>
	{
		start_mode = 0;
    2390:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <start_mode>
		reset_start_mode_in_eeprom();
    2394:	0e 94 ac 11 	call	0x2358	; 0x2358 <reset_start_mode_in_eeprom>
	}
	
	allow_portal = eeprom_read_byte((uint8_t*)2);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 2a 14 	call	0x2854	; 0x2854 <eeprom_read_byte>
    23a0:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <allow_portal>
	
	if (allow_portal != ALLOW_VAL && unlock)
    23a4:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <allow_portal>
    23a8:	85 35       	cpi	r24, 0x55	; 85
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <start_mode_init+0x48>
    23ac:	cc 23       	and	r28, r28
    23ae:	21 f0       	breq	.+8      	; 0x23b8 <start_mode_init+0x48>
	{
 		allow_portal = ALLOW_VAL & unlock;
    23b0:	8c 2f       	mov	r24, r28
    23b2:	85 75       	andi	r24, 0x55	; 85
    23b4:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <allow_portal>
	}
	
	allow_easter_egg = eeprom_read_byte((uint8_t*)3);
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 2a 14 	call	0x2854	; 0x2854 <eeprom_read_byte>
    23c0:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <allow_easter_egg>

	if (allow_easter_egg != ALLOW_VAL && unlock)
    23c4:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <allow_easter_egg>
    23c8:	85 35       	cpi	r24, 0x55	; 85
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <start_mode_init+0x66>
    23cc:	cc 23       	and	r28, r28
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <start_mode_init+0x66>
	{
		allow_easter_egg = ALLOW_VAL & unlock;	
    23d0:	c5 75       	andi	r28, 0x55	; 85
    23d2:	c0 93 ce 21 	sts	0x21CE, r28	; 0x8021ce <allow_easter_egg>
	}
	
	
}
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <set_start_mode>:
void set_start_mode(uint8_t start_mode)
{
	//If start mode is set to what "Allow Portal" would be, we need to see
	//if the mode can be set to "Allow Portal", or if it can be skipped and
	//go straight to "Easter Egg" mode, or we just roll back to "Standby"
	if (start_mode == BASE_MAX_MODE + 1)
    23da:	85 30       	cpi	r24, 0x05	; 5
    23dc:	91 f4       	brne	.+36     	; 0x2402 <set_start_mode+0x28>
	{
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
    23de:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <allow_portal>
    23e2:	95 35       	cpi	r25, 0x55	; 85
    23e4:	21 f0       	breq	.+8      	; 0x23ee <set_start_mode+0x14>
    23e6:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    23ea:	95 35       	cpi	r25, 0x55	; 85
    23ec:	b1 f4       	brne	.+44     	; 0x241a <set_start_mode+0x40>
		{
			start_mode = 0;
		}
		else if ((allow_portal != ALLOW_VAL) && (allow_easter_egg == ALLOW_VAL))
    23ee:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <allow_portal>
    23f2:	95 35       	cpi	r25, 0x55	; 85
    23f4:	b9 f0       	breq	.+46     	; 0x2424 <set_start_mode+0x4a>
    23f6:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    23fa:	95 35       	cpi	r25, 0x55	; 85
    23fc:	99 f4       	brne	.+38     	; 0x2424 <set_start_mode+0x4a>
		{
			start_mode++;
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	11 c0       	rjmp	.+34     	; 0x2424 <set_start_mode+0x4a>
		}
	}
	else if (start_mode == BASE_MAX_MODE + 2)
    2402:	86 30       	cpi	r24, 0x06	; 6
    2404:	29 f4       	brne	.+10     	; 0x2410 <set_start_mode+0x36>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
    2406:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <allow_easter_egg>
    240a:	95 35       	cpi	r25, 0x55	; 85
    240c:	41 f4       	brne	.+16     	; 0x241e <set_start_mode+0x44>
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <set_start_mode+0x4a>
		{
			start_mode = 0;
		}
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    2410:	87 30       	cpi	r24, 0x07	; 7
    2412:	40 f0       	brcs	.+16     	; 0x2424 <set_start_mode+0x4a>
    2414:	8f 3e       	cpi	r24, 0xEF	; 239
    2416:	29 f4       	brne	.+10     	; 0x2422 <set_start_mode+0x48>
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <set_start_mode+0x4a>
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <set_start_mode+0x4a>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <set_start_mode+0x4a>
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
	{
		//Our default restart state
		start_mode = 0;
    2422:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	eeprom_write_byte((uint8_t *)1, start_mode);
    2424:	68 2f       	mov	r22, r24
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 32 14 	call	0x2864	; 0x2864 <eeprom_write_byte>
	eeprom_busy_wait();
    242e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7fb1cf>
    2432:	88 23       	and	r24, r24
    2434:	e4 f3       	brlt	.-8      	; 0x242e <set_start_mode+0x54>
	enable_wdt();
    2436:	0e 94 b2 11 	call	0x2364	; 0x2364 <enable_wdt>
    243a:	ff cf       	rjmp	.-2      	; 0x243a <set_start_mode+0x60>

0000243c <next_start_mode>:
	
}

void next_start_mode()
{
	start_mode++;
    243c:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <start_mode>
	set_start_mode(start_mode);
    2446:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <start_mode>
    244a:	0e 94 ed 11 	call	0x23da	; 0x23da <set_start_mode>

0000244e <ws2812drv_init>:


void ws2812drv_init(void)
{                                                               
    // Setup EDMA channel 2(+1) 
    EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    244e:	a0 e0       	ldi	r26, 0x00	; 0
    2450:	b1 e0       	ldi	r27, 0x01	; 1
    2452:	80 eb       	ldi	r24, 0xB0	; 176
    2454:	8c 93       	st	X, r24
    EDMA.CH2.CTRLB = 0;// EDMA_CH_INTLVL_OFF_gc;
    2456:	d1 96       	adiw	r26, 0x31	; 49
    2458:	1c 92       	st	X, r1
    245a:	d1 97       	sbiw	r26, 0x31	; 49
    EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	d2 96       	adiw	r26, 0x32	; 50
    2460:	8c 93       	st	X, r24
    2462:	d2 97       	sbiw	r26, 0x32	; 50
    EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    2464:	d3 96       	adiw	r26, 0x33	; 51
    2466:	1c 92       	st	X, r1
    2468:	d3 97       	sbiw	r26, 0x33	; 51
    EDMA.CH2.DESTADDR = (uint16_t)&USARTD0.DATA;
    246a:	e0 ec       	ldi	r30, 0xC0	; 192
    246c:	f9 e0       	ldi	r31, 0x09	; 9
    246e:	dc 96       	adiw	r26, 0x3c	; 60
    2470:	ed 93       	st	X+, r30
    2472:	fc 93       	st	X, r31
    2474:	dd 97       	sbiw	r26, 0x3d	; 61
    EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
    2476:	9d e6       	ldi	r25, 0x6D	; 109
    2478:	d4 96       	adiw	r26, 0x34	; 52
    247a:	9c 93       	st	X, r25
    // Setup port pins for TxD, XCK and LUT0OUT
    PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
    247c:	a0 e6       	ldi	r26, 0x60	; 96
    247e:	b6 e0       	ldi	r27, 0x06	; 6
    2480:	50 96       	adiw	r26, 0x10	; 16
    2482:	1c 92       	st	X, r1
    2484:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
    2486:	51 96       	adiw	r26, 0x11	; 17
    2488:	8c 93       	st	X, r24
    248a:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	53 96       	adiw	r26, 0x13	; 19
    2490:	8c 93       	st	X, r24
    2492:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
    2494:	9b e0       	ldi	r25, 0x0B	; 11
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	9c 93       	st	X, r25
	

    // Setup Event channel 0 to TxD (async)
    EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN3_gc;
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	b1 e0       	ldi	r27, 0x01	; 1
    249e:	9b e6       	ldi	r25, 0x6B	; 107
    24a0:	9c 93       	st	X, r25
    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    24a2:	18 96       	adiw	r26, 0x08	; 8
    24a4:	1c 92       	st	X, r1
    24a6:	18 97       	sbiw	r26, 0x08	; 8
    // Setup Event channel 6 to XCK rising edge
    EVSYS.CH6MUX = EVSYS_CHMUX_PORTD_PIN1_gc;
    24a8:	99 e6       	ldi	r25, 0x69	; 105
    24aa:	16 96       	adiw	r26, 0x06	; 6
    24ac:	9c 93       	st	X, r25
    24ae:	16 97       	sbiw	r26, 0x06	; 6
    EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    24b0:	1e 96       	adiw	r26, 0x0e	; 14
    24b2:	1c 92       	st	X, r1

    // Setup USART in master SPI mode 1, MSB first
    USARTD0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
    24b4:	93 e1       	ldi	r25, 0x13	; 19
    24b6:	96 83       	std	Z+6, r25	; 0x06
    USARTD0.BAUDCTRLB = 0;
    24b8:	17 82       	std	Z+7, r1	; 0x07
    USARTD0.CTRLA = 0;// USART_RXSINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc;
    24ba:	12 82       	std	Z+2, r1	; 0x02
    USARTD0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
    24bc:	92 ec       	ldi	r25, 0xC2	; 194
    24be:	94 83       	std	Z+4, r25	; 0x04
    USARTD0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
    24c0:	15 82       	std	Z+5, r1	; 0x05
    USARTD0.CTRLB = USART_TXEN_bm;
    24c2:	98 e0       	ldi	r25, 0x08	; 8
    24c4:	93 83       	std	Z+3, r25	; 0x03

    // Setup XCL BTC0 timer to 1shot pwm generation
    XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
    24c6:	e0 e6       	ldi	r30, 0x60	; 96
    24c8:	f4 e0       	ldi	r31, 0x04	; 4
    24ca:	91 e1       	ldi	r25, 0x11	; 17
    24cc:	94 83       	std	Z+4, r25	; 0x04
    XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
    24ce:	85 83       	std	Z+5, r24	; 0x05
    XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
    24d0:	8e e9       	ldi	r24, 0x9E	; 158
    24d2:	86 83       	std	Z+6, r24	; 0x06
    XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
    24d4:	86 e1       	ldi	r24, 0x16	; 22
    24d6:	86 87       	std	Z+14, r24	; 0x0e
    XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
    24d8:	8d e0       	ldi	r24, 0x0D	; 13
    24da:	84 87       	std	Z+12, r24	; 0x0c

    // Setup XCL LUT
    XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PD_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
    24dc:	84 e5       	ldi	r24, 0x54	; 84
    24de:	80 83       	st	Z, r24
    XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
    24e0:	80 e5       	ldi	r24, 0x50	; 80
    24e2:	81 83       	std	Z+1, r24	; 0x01
    XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLYCONF_DISABLE_gc;      // Async inputs, no delay
    24e4:	80 e4       	ldi	r24, 0x40	; 64
    24e6:	82 83       	std	Z+2, r24	; 0x02
    XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
    24e8:	80 ea       	ldi	r24, 0xA0	; 160
    24ea:	83 83       	std	Z+3, r24	; 0x03
    24ec:	08 95       	ret

000024ee <ws2812drv_start_transfer>:
}


void ws2812drv_start_transfer(ws2812drv_led_t *p, uint16_t cnt)
{
    EDMA.CH2.ADDR = (uint16_t)p;
    24ee:	e0 e0       	ldi	r30, 0x00	; 0
    24f0:	f1 e0       	ldi	r31, 0x01	; 1
    24f2:	80 af       	std	Z+56, r24	; 0x38
    24f4:	91 af       	std	Z+57, r25	; 0x39
    EDMA.CH2.TRFCNT = cnt * sizeof(ws2812drv_led_t);
    24f6:	cb 01       	movw	r24, r22
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	68 0f       	add	r22, r24
    24fe:	79 1f       	adc	r23, r25
    2500:	66 ab       	std	Z+54, r22	; 0x36
    2502:	77 ab       	std	Z+55, r23	; 0x37
    EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
    2504:	84 e8       	ldi	r24, 0x84	; 132
    2506:	80 ab       	std	Z+48, r24	; 0x30
    2508:	08 95       	ret

0000250a <__divmodhi4>:
    250a:	97 fb       	bst	r25, 7
    250c:	07 2e       	mov	r0, r23
    250e:	16 f4       	brtc	.+4      	; 0x2514 <__divmodhi4+0xa>
    2510:	00 94       	com	r0
    2512:	07 d0       	rcall	.+14     	; 0x2522 <__divmodhi4_neg1>
    2514:	77 fd       	sbrc	r23, 7
    2516:	09 d0       	rcall	.+18     	; 0x252a <__divmodhi4_neg2>
    2518:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodhi4>
    251c:	07 fc       	sbrc	r0, 7
    251e:	05 d0       	rcall	.+10     	; 0x252a <__divmodhi4_neg2>
    2520:	3e f4       	brtc	.+14     	; 0x2530 <__divmodhi4_exit>

00002522 <__divmodhi4_neg1>:
    2522:	90 95       	com	r25
    2524:	81 95       	neg	r24
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	08 95       	ret

0000252a <__divmodhi4_neg2>:
    252a:	70 95       	com	r23
    252c:	61 95       	neg	r22
    252e:	7f 4f       	sbci	r23, 0xFF	; 255

00002530 <__divmodhi4_exit>:
    2530:	08 95       	ret

00002532 <__udivmodhi4>:
    2532:	aa 1b       	sub	r26, r26
    2534:	bb 1b       	sub	r27, r27
    2536:	51 e1       	ldi	r21, 0x11	; 17
    2538:	07 c0       	rjmp	.+14     	; 0x2548 <__udivmodhi4_ep>

0000253a <__udivmodhi4_loop>:
    253a:	aa 1f       	adc	r26, r26
    253c:	bb 1f       	adc	r27, r27
    253e:	a6 17       	cp	r26, r22
    2540:	b7 07       	cpc	r27, r23
    2542:	10 f0       	brcs	.+4      	; 0x2548 <__udivmodhi4_ep>
    2544:	a6 1b       	sub	r26, r22
    2546:	b7 0b       	sbc	r27, r23

00002548 <__udivmodhi4_ep>:
    2548:	88 1f       	adc	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	5a 95       	dec	r21
    254e:	a9 f7       	brne	.-22     	; 0x253a <__udivmodhi4_loop>
    2550:	80 95       	com	r24
    2552:	90 95       	com	r25
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	08 95       	ret

0000255a <malloc>:
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	91 05       	cpc	r25, r1
    2566:	10 f4       	brcc	.+4      	; 0x256c <malloc+0x12>
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <__flp>
    2570:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <__flp+0x1>
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	a0 e0       	ldi	r26, 0x00	; 0
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	19 f1       	breq	.+70     	; 0x25c6 <malloc+0x6c>
    2580:	40 81       	ld	r20, Z
    2582:	51 81       	ldd	r21, Z+1	; 0x01
    2584:	02 81       	ldd	r16, Z+2	; 0x02
    2586:	13 81       	ldd	r17, Z+3	; 0x03
    2588:	48 17       	cp	r20, r24
    258a:	59 07       	cpc	r21, r25
    258c:	c8 f0       	brcs	.+50     	; 0x25c0 <malloc+0x66>
    258e:	84 17       	cp	r24, r20
    2590:	95 07       	cpc	r25, r21
    2592:	69 f4       	brne	.+26     	; 0x25ae <malloc+0x54>
    2594:	10 97       	sbiw	r26, 0x00	; 0
    2596:	31 f0       	breq	.+12     	; 0x25a4 <malloc+0x4a>
    2598:	12 96       	adiw	r26, 0x02	; 2
    259a:	0c 93       	st	X, r16
    259c:	12 97       	sbiw	r26, 0x02	; 2
    259e:	13 96       	adiw	r26, 0x03	; 3
    25a0:	1c 93       	st	X, r17
    25a2:	27 c0       	rjmp	.+78     	; 0x25f2 <malloc+0x98>
    25a4:	00 93 ac 22 	sts	0x22AC, r16	; 0x8022ac <__flp>
    25a8:	10 93 ad 22 	sts	0x22AD, r17	; 0x8022ad <__flp+0x1>
    25ac:	22 c0       	rjmp	.+68     	; 0x25f2 <malloc+0x98>
    25ae:	21 15       	cp	r18, r1
    25b0:	31 05       	cpc	r19, r1
    25b2:	19 f0       	breq	.+6      	; 0x25ba <malloc+0x60>
    25b4:	42 17       	cp	r20, r18
    25b6:	53 07       	cpc	r21, r19
    25b8:	18 f4       	brcc	.+6      	; 0x25c0 <malloc+0x66>
    25ba:	9a 01       	movw	r18, r20
    25bc:	bd 01       	movw	r22, r26
    25be:	ef 01       	movw	r28, r30
    25c0:	df 01       	movw	r26, r30
    25c2:	f8 01       	movw	r30, r16
    25c4:	db cf       	rjmp	.-74     	; 0x257c <malloc+0x22>
    25c6:	21 15       	cp	r18, r1
    25c8:	31 05       	cpc	r19, r1
    25ca:	f9 f0       	breq	.+62     	; 0x260a <malloc+0xb0>
    25cc:	28 1b       	sub	r18, r24
    25ce:	39 0b       	sbc	r19, r25
    25d0:	24 30       	cpi	r18, 0x04	; 4
    25d2:	31 05       	cpc	r19, r1
    25d4:	80 f4       	brcc	.+32     	; 0x25f6 <malloc+0x9c>
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	61 15       	cp	r22, r1
    25dc:	71 05       	cpc	r23, r1
    25de:	21 f0       	breq	.+8      	; 0x25e8 <malloc+0x8e>
    25e0:	fb 01       	movw	r30, r22
    25e2:	82 83       	std	Z+2, r24	; 0x02
    25e4:	93 83       	std	Z+3, r25	; 0x03
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <malloc+0x96>
    25e8:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <__flp>
    25ec:	90 93 ad 22 	sts	0x22AD, r25	; 0x8022ad <__flp+0x1>
    25f0:	fe 01       	movw	r30, r28
    25f2:	32 96       	adiw	r30, 0x02	; 2
    25f4:	44 c0       	rjmp	.+136    	; 0x267e <malloc+0x124>
    25f6:	fe 01       	movw	r30, r28
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	81 93       	st	Z+, r24
    25fe:	91 93       	st	Z+, r25
    2600:	22 50       	subi	r18, 0x02	; 2
    2602:	31 09       	sbc	r19, r1
    2604:	28 83       	st	Y, r18
    2606:	39 83       	std	Y+1, r19	; 0x01
    2608:	3a c0       	rjmp	.+116    	; 0x267e <malloc+0x124>
    260a:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    260e:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    2612:	23 2b       	or	r18, r19
    2614:	41 f4       	brne	.+16     	; 0x2626 <malloc+0xcc>
    2616:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    261a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    261e:	20 93 aa 22 	sts	0x22AA, r18	; 0x8022aa <__brkval>
    2622:	30 93 ab 22 	sts	0x22AB, r19	; 0x8022ab <__brkval+0x1>
    2626:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    262a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    262e:	21 15       	cp	r18, r1
    2630:	31 05       	cpc	r19, r1
    2632:	41 f4       	brne	.+16     	; 0x2644 <malloc+0xea>
    2634:	2d b7       	in	r18, 0x3d	; 61
    2636:	3e b7       	in	r19, 0x3e	; 62
    2638:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    263c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2640:	24 1b       	sub	r18, r20
    2642:	35 0b       	sbc	r19, r21
    2644:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <__brkval>
    2648:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <__brkval+0x1>
    264c:	e2 17       	cp	r30, r18
    264e:	f3 07       	cpc	r31, r19
    2650:	a0 f4       	brcc	.+40     	; 0x267a <malloc+0x120>
    2652:	2e 1b       	sub	r18, r30
    2654:	3f 0b       	sbc	r19, r31
    2656:	28 17       	cp	r18, r24
    2658:	39 07       	cpc	r19, r25
    265a:	78 f0       	brcs	.+30     	; 0x267a <malloc+0x120>
    265c:	ac 01       	movw	r20, r24
    265e:	4e 5f       	subi	r20, 0xFE	; 254
    2660:	5f 4f       	sbci	r21, 0xFF	; 255
    2662:	24 17       	cp	r18, r20
    2664:	35 07       	cpc	r19, r21
    2666:	48 f0       	brcs	.+18     	; 0x267a <malloc+0x120>
    2668:	4e 0f       	add	r20, r30
    266a:	5f 1f       	adc	r21, r31
    266c:	40 93 aa 22 	sts	0x22AA, r20	; 0x8022aa <__brkval>
    2670:	50 93 ab 22 	sts	0x22AB, r21	; 0x8022ab <__brkval+0x1>
    2674:	81 93       	st	Z+, r24
    2676:	91 93       	st	Z+, r25
    2678:	02 c0       	rjmp	.+4      	; 0x267e <malloc+0x124>
    267a:	e0 e0       	ldi	r30, 0x00	; 0
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	cf 01       	movw	r24, r30
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

0000268a <free>:
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	09 f4       	brne	.+2      	; 0x2694 <free+0xa>
    2692:	81 c0       	rjmp	.+258    	; 0x2796 <free+0x10c>
    2694:	fc 01       	movw	r30, r24
    2696:	32 97       	sbiw	r30, 0x02	; 2
    2698:	12 82       	std	Z+2, r1	; 0x02
    269a:	13 82       	std	Z+3, r1	; 0x03
    269c:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <__flp>
    26a0:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <__flp+0x1>
    26a4:	10 97       	sbiw	r26, 0x00	; 0
    26a6:	81 f4       	brne	.+32     	; 0x26c8 <free+0x3e>
    26a8:	20 81       	ld	r18, Z
    26aa:	31 81       	ldd	r19, Z+1	; 0x01
    26ac:	82 0f       	add	r24, r18
    26ae:	93 1f       	adc	r25, r19
    26b0:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    26b4:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    26b8:	28 17       	cp	r18, r24
    26ba:	39 07       	cpc	r19, r25
    26bc:	51 f5       	brne	.+84     	; 0x2712 <free+0x88>
    26be:	e0 93 aa 22 	sts	0x22AA, r30	; 0x8022aa <__brkval>
    26c2:	f0 93 ab 22 	sts	0x22AB, r31	; 0x8022ab <__brkval+0x1>
    26c6:	67 c0       	rjmp	.+206    	; 0x2796 <free+0x10c>
    26c8:	ed 01       	movw	r28, r26
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	ce 17       	cp	r28, r30
    26d0:	df 07       	cpc	r29, r31
    26d2:	40 f4       	brcc	.+16     	; 0x26e4 <free+0x5a>
    26d4:	4a 81       	ldd	r20, Y+2	; 0x02
    26d6:	5b 81       	ldd	r21, Y+3	; 0x03
    26d8:	9e 01       	movw	r18, r28
    26da:	41 15       	cp	r20, r1
    26dc:	51 05       	cpc	r21, r1
    26de:	f1 f0       	breq	.+60     	; 0x271c <free+0x92>
    26e0:	ea 01       	movw	r28, r20
    26e2:	f5 cf       	rjmp	.-22     	; 0x26ce <free+0x44>
    26e4:	c2 83       	std	Z+2, r28	; 0x02
    26e6:	d3 83       	std	Z+3, r29	; 0x03
    26e8:	40 81       	ld	r20, Z
    26ea:	51 81       	ldd	r21, Z+1	; 0x01
    26ec:	84 0f       	add	r24, r20
    26ee:	95 1f       	adc	r25, r21
    26f0:	c8 17       	cp	r28, r24
    26f2:	d9 07       	cpc	r29, r25
    26f4:	59 f4       	brne	.+22     	; 0x270c <free+0x82>
    26f6:	88 81       	ld	r24, Y
    26f8:	99 81       	ldd	r25, Y+1	; 0x01
    26fa:	84 0f       	add	r24, r20
    26fc:	95 1f       	adc	r25, r21
    26fe:	02 96       	adiw	r24, 0x02	; 2
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	82 83       	std	Z+2, r24	; 0x02
    270a:	93 83       	std	Z+3, r25	; 0x03
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	29 f4       	brne	.+10     	; 0x271c <free+0x92>
    2712:	e0 93 ac 22 	sts	0x22AC, r30	; 0x8022ac <__flp>
    2716:	f0 93 ad 22 	sts	0x22AD, r31	; 0x8022ad <__flp+0x1>
    271a:	3d c0       	rjmp	.+122    	; 0x2796 <free+0x10c>
    271c:	e9 01       	movw	r28, r18
    271e:	ea 83       	std	Y+2, r30	; 0x02
    2720:	fb 83       	std	Y+3, r31	; 0x03
    2722:	49 91       	ld	r20, Y+
    2724:	59 91       	ld	r21, Y+
    2726:	c4 0f       	add	r28, r20
    2728:	d5 1f       	adc	r29, r21
    272a:	ec 17       	cp	r30, r28
    272c:	fd 07       	cpc	r31, r29
    272e:	61 f4       	brne	.+24     	; 0x2748 <free+0xbe>
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	84 0f       	add	r24, r20
    2736:	95 1f       	adc	r25, r21
    2738:	02 96       	adiw	r24, 0x02	; 2
    273a:	e9 01       	movw	r28, r18
    273c:	88 83       	st	Y, r24
    273e:	99 83       	std	Y+1, r25	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	9b 83       	std	Y+3, r25	; 0x03
    2748:	e0 e0       	ldi	r30, 0x00	; 0
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	12 96       	adiw	r26, 0x02	; 2
    274e:	8d 91       	ld	r24, X+
    2750:	9c 91       	ld	r25, X
    2752:	13 97       	sbiw	r26, 0x03	; 3
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	19 f0       	breq	.+6      	; 0x275e <free+0xd4>
    2758:	fd 01       	movw	r30, r26
    275a:	dc 01       	movw	r26, r24
    275c:	f7 cf       	rjmp	.-18     	; 0x274c <free+0xc2>
    275e:	8d 91       	ld	r24, X+
    2760:	9c 91       	ld	r25, X
    2762:	11 97       	sbiw	r26, 0x01	; 1
    2764:	9d 01       	movw	r18, r26
    2766:	2e 5f       	subi	r18, 0xFE	; 254
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	82 0f       	add	r24, r18
    276c:	93 1f       	adc	r25, r19
    276e:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <__brkval>
    2772:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <__brkval+0x1>
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	69 f4       	brne	.+26     	; 0x2796 <free+0x10c>
    277c:	30 97       	sbiw	r30, 0x00	; 0
    277e:	29 f4       	brne	.+10     	; 0x278a <free+0x100>
    2780:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <__flp>
    2784:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <__flp+0x1>
    2788:	02 c0       	rjmp	.+4      	; 0x278e <free+0x104>
    278a:	12 82       	std	Z+2, r1	; 0x02
    278c:	13 82       	std	Z+3, r1	; 0x03
    278e:	a0 93 aa 22 	sts	0x22AA, r26	; 0x8022aa <__brkval>
    2792:	b0 93 ab 22 	sts	0x22AB, r27	; 0x8022ab <__brkval+0x1>
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	08 95       	ret

0000279c <do_rand>:
    279c:	8f 92       	push	r8
    279e:	9f 92       	push	r9
    27a0:	af 92       	push	r10
    27a2:	bf 92       	push	r11
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	ec 01       	movw	r28, r24
    27b2:	68 81       	ld	r22, Y
    27b4:	79 81       	ldd	r23, Y+1	; 0x01
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	61 15       	cp	r22, r1
    27bc:	71 05       	cpc	r23, r1
    27be:	81 05       	cpc	r24, r1
    27c0:	91 05       	cpc	r25, r1
    27c2:	21 f4       	brne	.+8      	; 0x27cc <do_rand+0x30>
    27c4:	64 e2       	ldi	r22, 0x24	; 36
    27c6:	79 ed       	ldi	r23, 0xD9	; 217
    27c8:	8b e5       	ldi	r24, 0x5B	; 91
    27ca:	97 e0       	ldi	r25, 0x07	; 7
    27cc:	2d e1       	ldi	r18, 0x1D	; 29
    27ce:	33 ef       	ldi	r19, 0xF3	; 243
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	0e 94 48 14 	call	0x2890	; 0x2890 <__divmodsi4>
    27d8:	49 01       	movw	r8, r18
    27da:	5a 01       	movw	r10, r20
    27dc:	9b 01       	movw	r18, r22
    27de:	ac 01       	movw	r20, r24
    27e0:	a7 ea       	ldi	r26, 0xA7	; 167
    27e2:	b1 e4       	ldi	r27, 0x41	; 65
    27e4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__muluhisi3>
    27e8:	6b 01       	movw	r12, r22
    27ea:	7c 01       	movw	r14, r24
    27ec:	ac ee       	ldi	r26, 0xEC	; 236
    27ee:	b4 ef       	ldi	r27, 0xF4	; 244
    27f0:	a5 01       	movw	r20, r10
    27f2:	94 01       	movw	r18, r8
    27f4:	0e 94 75 14 	call	0x28ea	; 0x28ea <__mulohisi3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	8c 0d       	add	r24, r12
    27fe:	9d 1d       	adc	r25, r13
    2800:	ae 1d       	adc	r26, r14
    2802:	bf 1d       	adc	r27, r15
    2804:	b7 ff       	sbrs	r27, 7
    2806:	03 c0       	rjmp	.+6      	; 0x280e <__stack+0xf>
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	a1 09       	sbc	r26, r1
    280c:	b0 48       	sbci	r27, 0x80	; 128
    280e:	88 83       	st	Y, r24
    2810:	99 83       	std	Y+1, r25	; 0x01
    2812:	aa 83       	std	Y+2, r26	; 0x02
    2814:	bb 83       	std	Y+3, r27	; 0x03
    2816:	9f 77       	andi	r25, 0x7F	; 127
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
    2824:	bf 90       	pop	r11
    2826:	af 90       	pop	r10
    2828:	9f 90       	pop	r9
    282a:	8f 90       	pop	r8
    282c:	08 95       	ret

0000282e <rand_r>:
    282e:	0e 94 ce 13 	call	0x279c	; 0x279c <do_rand>
    2832:	08 95       	ret

00002834 <rand>:
    2834:	86 e0       	ldi	r24, 0x06	; 6
    2836:	90 e2       	ldi	r25, 0x20	; 32
    2838:	0e 94 ce 13 	call	0x279c	; 0x279c <do_rand>
    283c:	08 95       	ret

0000283e <srand>:
    283e:	a0 e0       	ldi	r26, 0x00	; 0
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <next>
    2846:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <next+0x1>
    284a:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <next+0x2>
    284e:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <next+0x3>
    2852:	08 95       	ret

00002854 <eeprom_read_byte>:
    2854:	03 d0       	rcall	.+6      	; 0x285c <eeprom_mapen>
    2856:	80 81       	ld	r24, Z
    2858:	99 27       	eor	r25, r25
    285a:	08 95       	ret

0000285c <eeprom_mapen>:
    285c:	fc 01       	movw	r30, r24
    285e:	e0 50       	subi	r30, 0x00	; 0
    2860:	f0 4f       	sbci	r31, 0xF0	; 240
    2862:	08 95       	ret

00002864 <eeprom_write_byte>:
    2864:	26 2f       	mov	r18, r22

00002866 <eeprom_write_r18>:
    2866:	af 93       	push	r26
    2868:	bf 93       	push	r27
    286a:	e0 ec       	ldi	r30, 0xC0	; 192
    286c:	f1 e0       	ldi	r31, 0x01	; 1
    286e:	37 85       	ldd	r19, Z+15	; 0x0f
    2870:	37 fd       	sbrc	r19, 7
    2872:	fd cf       	rjmp	.-6      	; 0x286e <eeprom_write_r18+0x8>
    2874:	dc 01       	movw	r26, r24
    2876:	a0 50       	subi	r26, 0x00	; 0
    2878:	b0 4f       	sbci	r27, 0xF0	; 240
    287a:	2c 93       	st	X, r18
    287c:	25 e3       	ldi	r18, 0x35	; 53
    287e:	22 87       	std	Z+10, r18	; 0x0a
    2880:	28 ed       	ldi	r18, 0xD8	; 216
    2882:	31 e0       	ldi	r19, 0x01	; 1
    2884:	24 bf       	out	0x34, r18	; 52
    2886:	33 87       	std	Z+11, r19	; 0x0b
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	bf 91       	pop	r27
    288c:	af 91       	pop	r26
    288e:	08 95       	ret

00002890 <__divmodsi4>:
    2890:	05 2e       	mov	r0, r21
    2892:	97 fb       	bst	r25, 7
    2894:	1e f4       	brtc	.+6      	; 0x289c <__divmodsi4+0xc>
    2896:	00 94       	com	r0
    2898:	0e 94 5f 14 	call	0x28be	; 0x28be <__negsi2>
    289c:	57 fd       	sbrc	r21, 7
    289e:	07 d0       	rcall	.+14     	; 0x28ae <__divmodsi4_neg2>
    28a0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__udivmodsi4>
    28a4:	07 fc       	sbrc	r0, 7
    28a6:	03 d0       	rcall	.+6      	; 0x28ae <__divmodsi4_neg2>
    28a8:	4e f4       	brtc	.+18     	; 0x28bc <__divmodsi4_exit>
    28aa:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__negsi2>

000028ae <__divmodsi4_neg2>:
    28ae:	50 95       	com	r21
    28b0:	40 95       	com	r20
    28b2:	30 95       	com	r19
    28b4:	21 95       	neg	r18
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	4f 4f       	sbci	r20, 0xFF	; 255
    28ba:	5f 4f       	sbci	r21, 0xFF	; 255

000028bc <__divmodsi4_exit>:
    28bc:	08 95       	ret

000028be <__negsi2>:
    28be:	90 95       	com	r25
    28c0:	80 95       	com	r24
    28c2:	70 95       	com	r23
    28c4:	61 95       	neg	r22
    28c6:	7f 4f       	sbci	r23, 0xFF	; 255
    28c8:	8f 4f       	sbci	r24, 0xFF	; 255
    28ca:	9f 4f       	sbci	r25, 0xFF	; 255
    28cc:	08 95       	ret

000028ce <__muluhisi3>:
    28ce:	0e 94 9c 14 	call	0x2938	; 0x2938 <__umulhisi3>
    28d2:	a5 9f       	mul	r26, r21
    28d4:	90 0d       	add	r25, r0
    28d6:	b4 9f       	mul	r27, r20
    28d8:	90 0d       	add	r25, r0
    28da:	a4 9f       	mul	r26, r20
    28dc:	80 0d       	add	r24, r0
    28de:	91 1d       	adc	r25, r1
    28e0:	11 24       	eor	r1, r1
    28e2:	08 95       	ret

000028e4 <__mulshisi3>:
    28e4:	b7 ff       	sbrs	r27, 7
    28e6:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__muluhisi3>

000028ea <__mulohisi3>:
    28ea:	0e 94 67 14 	call	0x28ce	; 0x28ce <__muluhisi3>
    28ee:	82 1b       	sub	r24, r18
    28f0:	93 0b       	sbc	r25, r19
    28f2:	08 95       	ret

000028f4 <__udivmodsi4>:
    28f4:	a1 e2       	ldi	r26, 0x21	; 33
    28f6:	1a 2e       	mov	r1, r26
    28f8:	aa 1b       	sub	r26, r26
    28fa:	bb 1b       	sub	r27, r27
    28fc:	fd 01       	movw	r30, r26
    28fe:	0d c0       	rjmp	.+26     	; 0x291a <__udivmodsi4_ep>

00002900 <__udivmodsi4_loop>:
    2900:	aa 1f       	adc	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	ee 1f       	adc	r30, r30
    2906:	ff 1f       	adc	r31, r31
    2908:	a2 17       	cp	r26, r18
    290a:	b3 07       	cpc	r27, r19
    290c:	e4 07       	cpc	r30, r20
    290e:	f5 07       	cpc	r31, r21
    2910:	20 f0       	brcs	.+8      	; 0x291a <__udivmodsi4_ep>
    2912:	a2 1b       	sub	r26, r18
    2914:	b3 0b       	sbc	r27, r19
    2916:	e4 0b       	sbc	r30, r20
    2918:	f5 0b       	sbc	r31, r21

0000291a <__udivmodsi4_ep>:
    291a:	66 1f       	adc	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	1a 94       	dec	r1
    2924:	69 f7       	brne	.-38     	; 0x2900 <__udivmodsi4_loop>
    2926:	60 95       	com	r22
    2928:	70 95       	com	r23
    292a:	80 95       	com	r24
    292c:	90 95       	com	r25
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	bd 01       	movw	r22, r26
    2934:	cf 01       	movw	r24, r30
    2936:	08 95       	ret

00002938 <__umulhisi3>:
    2938:	a2 9f       	mul	r26, r18
    293a:	b0 01       	movw	r22, r0
    293c:	b3 9f       	mul	r27, r19
    293e:	c0 01       	movw	r24, r0
    2940:	a3 9f       	mul	r26, r19
    2942:	70 0d       	add	r23, r0
    2944:	81 1d       	adc	r24, r1
    2946:	11 24       	eor	r1, r1
    2948:	91 1d       	adc	r25, r1
    294a:	b2 9f       	mul	r27, r18
    294c:	70 0d       	add	r23, r0
    294e:	81 1d       	adc	r24, r1
    2950:	11 24       	eor	r1, r1
    2952:	91 1d       	adc	r25, r1
    2954:	08 95       	ret

00002956 <_exit>:
    2956:	f8 94       	cli

00002958 <__stop_program>:
    2958:	ff cf       	rjmp	.-2      	; 0x2958 <__stop_program>
