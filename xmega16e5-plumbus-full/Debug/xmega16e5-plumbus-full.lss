
xmega16e5-plumbus-full.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00802000  00002734  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010e  00802190  00802190  00002958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000029c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000840e  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bb1  00000000  00000000  0000b166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002700  00000000  00000000  0000dd17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  00010418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041b9  00000000  00000000  00010c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000154f  00000000  00000000  00014e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0001637c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 01 	jmp	0x37c	; 0x37c <__ctors_end>
       4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
       c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_3>
      10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      2c:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_11>
      30:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_12>
      34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      68:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      94:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      98:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__vector_38>
      9c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	00 00       	nop
      ae:	00 80       	ld	r0, Z

000000b0 <easterEggMainBass>:
      b0:	68 61 61 61 68 61 61 61 68 61 61 61 68 61 61 61     haaahaaahaaahaaa
      c0:	6d 66 66 66 6d 66 66 66 6d 66 66 66 6d 66 66 2d     mfffmfffmfffmff-

000000d0 <easterEggIntroExtBass>:
	...

000000d1 <easterEggIntroBass>:
      d1:	80                                                  .

000000d2 <easterEggMainExtTreble>:
      d2:	00 00 00                                            ...

000000d5 <easterEggMainTreble>:
      d5:	5c 58 96 5c 58 96 5c 58 56 51 93 56 55 56 5a dd     \X.\X.\XVQ.VUVZ.
      e5:	40 5f 5d 5a 7d                                      @_]Z}

000000ea <easterEggIntroExtTreble>:
	...

000000eb <easterEggIntroTreble>:
      eb:	80                                                  .

000000ec <portalMainExtBass>:
	...

00000102 <portalMainBass>:
     102:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     112:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     122:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     132:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     142:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     152:	64 5f 5b 5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f     d_[_b_[_d_[_b_[_
     162:	62 5d 5a 5d 62 5d 5a 5d 64 5d 5a 5d 64 5d 5a 5d     b]Z]b]Z]d]Z]d]Z]
     172:	63 5f 5c 57 c0 a8 40 68 a1 40 61 a3 40 63 a8 a1     c_\W..@h.@a.@c..
     182:	a8 40 68 a1 40 61 a3 40 63 a8 9c e3 e1 9c 9d 9f     .@h.@a.@c.......
     192:	a1 e3 a4 b0 ab 40 6b ae 40 6e ab 40 6b ae 40 6e     .....@k.@n.@k.@n
     1a2:	ab 40 6b ae 40 6e ab 40 6b ee                       .@k.@n.@k.

000001ac <portalIntroExtBass>:
	...

000001ad <portalIntroBass>:
     1ad:	c0                                                  .

000001ae <portalMainExtTreble>:
     1ae:	02 00 00 04 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000001c0 <portalMainTreble>:
     1c0:	cf 00 4e 4f 51 91 8f 40 93 51 d8 c0 58 91 4f 8e     ..NOQ..@.Q..X.O.
     1d0:	40 51 94 93 40 91 58 98 8f 40 00 4e 4f 51 51 cf     @Q..@.X..@.NOQQ.
     1e0:	00 4e 4f 51 91 40 4f 93 40 51 d8 40 c0 91 4f 8e     .NOQ.@O.@Q.@..O.
     1f0:	40 51 94 40 53 91 58 53 51 50 51 53 55 80 58 57     @Q.@S.XSQPQSU.XW
     200:	95 90 51 53 53 55 53 55 55 40 95 58 57 95 90 4e     ..QSSUSUU@.XW..N
     210:	50 51 53 53 51 90 90 4e 4c 4b 4b 8c 8e 50 4e 4c     PQSSQ..NLKK..PNL
     220:	4c 8e 90 53 55 53 50 50 51 40 51 4f 4f 40 5f 5b     L..SUSPPQ@QOO@_[
     230:	5f 62 5f 5b 5f 64 5f 5b 5f 62 5f 5b 5f 64 5f 5b     _b_[_d_[_b_[_d_[
     240:	5f 62 5f 5b 5f 64 5f 5b 58 4e 4f 51 51              _b_[_d_[XNOQQ

0000024d <portalIntroExtTreble>:
	...

0000024e <portalIntroTreble>:
     24e:	4e 4f 51 51                                         NOQQ

00000252 <nyanMainExtBass>:
     252:	00 00 00                                            ...

00000255 <nyanMainBass>:
     255:	75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e 7a 78     uisgvjqexlsg:.zx
     265:	76                                                  v

00000266 <nyanIntroExtBass>:
     266:	03                                                  .

00000267 <nyanIntroBass>:
	...

00000269 <nyanMainExtTreble>:
	...

00000284 <nyanMainTreble>:
     284:	4f 4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12     OM.R...VVTS.....
     294:	0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12     .........RO.....
     2a4:	16 15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16     .......S........
     2b4:	54 56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14     TVTOM.R...VVTS..
     2c4:	16 14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12     ............RO..
     2d4:	0f 14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14     ..........S.....
     2e4:	13 14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16     ...TVVV..V......
     2f4:	11 12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e     ....VV..........
     304:	1d 1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b     ..V..V..........
     314:	56 16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19     V..........VWV..
     324:	56 1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16     V..........VV...
     334:	1b 11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16     .........V..V...
     344:	16 14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12     .......V........
     354:	11 0f 56 54                                         ..VT

00000358 <nyanIntroExtTreble>:
     358:	00 00 00 00                                         ....

0000035c <nyanIntroTreble>:
     35c:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
     36c:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 00     ......J.........

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	cd bf       	out	0x3d, r28	; 61
     384:	d7 e2       	ldi	r29, 0x27	; 39
     386:	de bf       	out	0x3e, r29	; 62

00000388 <__do_copy_data>:
     388:	11 e2       	ldi	r17, 0x21	; 33
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e2       	ldi	r27, 0x20	; 32
     38e:	e4 e3       	ldi	r30, 0x34	; 52
     390:	f7 e2       	ldi	r31, 0x27	; 39
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x10>
     394:	05 90       	lpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	a0 39       	cpi	r26, 0x90	; 144
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0xc>

0000039e <__do_clear_bss>:
     39e:	22 e2       	ldi	r18, 0x22	; 34
     3a0:	a0 e9       	ldi	r26, 0x90	; 144
     3a2:	b1 e2       	ldi	r27, 0x21	; 33
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	ae 39       	cpi	r26, 0x9E	; 158
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	0e 94 9b 0c 	call	0x1936	; 0x1936 <main>
     3b2:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_exit>

000003b6 <__bad_interrupt>:
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <game_won_easy>:
uint8_t * start_size;


void game_won_easy()
{
	play_lights_won_easy_game();
     3ba:	0e 94 4d 09 	call	0x129a	; 0x129a <play_lights_won_easy_game>
		
	if (!(note_player_playing()))
     3be:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     3c2:	81 11       	cpse	r24, r1
     3c4:	2f c0       	rjmp	.+94     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if (play_index < sizeof(easy_won_notes))
     3c6:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <play_index>
     3ca:	ec 30       	cpi	r30, 0x0C	; 12
     3cc:	78 f4       	brcc	.+30     	; 0x3ec <game_won_easy+0x32>
		{
			timer_counter = 0;
     3ce:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     3d2:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
			note_play(easy_won_notes[play_index++]);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	8e 0f       	add	r24, r30
     3da:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <play_index>
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	e2 5f       	subi	r30, 0xF2	; 242
     3e2:	ff 4d       	sbci	r31, 0xDF	; 223
     3e4:	80 81       	ld	r24, Z
     3e6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
     3ea:	08 95       	ret
		}
		else
		{
			if (timer_counter++ > STEP_PAUSE)
     3ec:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     3f0:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     3f4:	9c 01       	movw	r18, r24
     3f6:	2f 5f       	subi	r18, 0xFF	; 255
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	20 93 93 21 	sts	0x2193, r18	; 0x802193 <timer_counter>
     3fe:	30 93 94 21 	sts	0x2194, r19	; 0x802194 <timer_counter+0x1>
     402:	06 97       	sbiw	r24, 0x06	; 6
     404:	78 f0       	brcs	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			{
				play_index = 0;
     406:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>
				timer_counter = 0;
     40a:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     40e:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
				sequence_initialized = 0;
     412:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <sequence_initialized>
				game_state = game_start;
     416:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__data_end>
				play_lights_game(expander_read_ports(), 0);
     41a:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
     424:	08 95       	ret

00000426 <game_won_hard>:
	}
}

void game_won_hard()
{
	if (timer_counter++ < STEP_PAUSE)
     426:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     42a:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     42e:	9c 01       	movw	r18, r24
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	20 93 93 21 	sts	0x2193, r18	; 0x802193 <timer_counter>
     438:	30 93 94 21 	sts	0x2194, r19	; 0x802194 <timer_counter+0x1>
     43c:	05 97       	sbiw	r24, 0x05	; 5
     43e:	30 f0       	brcs	.+12     	; 0x44c <game_won_hard+0x26>
	{
		return;
	}
	
	set_allow_portal(ALLOW_VAL);
     440:	85 e5       	ldi	r24, 0x55	; 85
     442:	0e 94 90 10 	call	0x2120	; 0x2120 <set_allow_portal>
	set_start_mode(PORTAL_sm);
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	0e 94 da 10 	call	0x21b4	; 0x21b4 <set_start_mode>
     44c:	08 95       	ret

0000044e <get_seed>:
}


uint16_t get_seed()
{
	ADCA.CTRLB|=ADC_CURRLIMIT1_bm|ADC_CONMODE_bm; //medium current consumption, maximum sampling speed 150ksps, resolution 12-bit right adjusted, signed mode
     44e:	e0 e0       	ldi	r30, 0x00	; 0
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	80 65       	ori	r24, 0x50	; 80
     456:	81 83       	std	Z+1, r24	; 0x01
 
	ADCA.REFCTRL|=ADC_REFSEL0_bm; //INTVCC2 i.e. Vcc/1.6 is selected as reference voltage
     458:	82 81       	ldd	r24, Z+2	; 0x02
     45a:	80 61       	ori	r24, 0x10	; 16
     45c:	82 83       	std	Z+2, r24	; 0x02
 
	ADCA.EVCTRL=0x00;               //no event channel input is selected
     45e:	13 82       	std	Z+3, r1	; 0x03
 
	ADCA.PRESCALER|=ADC_PRESCALER2_bm; //prescaler 64 is selected and peripheral clock is 8MHz
     460:	84 81       	ldd	r24, Z+4	; 0x04
     462:	84 60       	ori	r24, 0x04	; 4
     464:	84 83       	std	Z+4, r24	; 0x04
 
	ADCA.INTFLAGS=ADC_CH0IF_bm; //clear interrupt flag by writing one to it
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	86 83       	std	Z+6, r24	; 0x06
 
	ADCA.CH0.CTRL|=ADC_CH_INPUTMODE0_bm; //signed mode, single ended positive input selected
     46a:	80 a1       	ldd	r24, Z+32	; 0x20
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 a3       	std	Z+32, r24	; 0x20
 
	ADCA.CH0.MUXCTRL|=ADC_CH_MUXPOS1_bm; //select PIN1 as input for ADC
     470:	81 a1       	ldd	r24, Z+33	; 0x21
     472:	80 61       	ori	r24, 0x10	; 16
     474:	81 a3       	std	Z+33, r24	; 0x21
 
	ADCA.CTRLA=ADC_ENABLE_bm | ADC_START_bm; //enable ADC and start
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	80 83       	st	Z, r24
	
	while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     47a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fb206>
     47e:	80 ff       	sbrs	r24, 0
     480:	fc cf       	rjmp	.-8      	; 0x47a <get_seed+0x2c>
	
	ADCA.INTFLAGS=ADC_CH0IF_bm;  //clear flag immediately after conversion
     482:	e0 e0       	ldi	r30, 0x00	; 0
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	86 83       	std	Z+6, r24	; 0x06
	
	uint16_t result = ADCA.CH0.RES;
     48a:	84 a1       	ldd	r24, Z+36	; 0x24
     48c:	95 a1       	ldd	r25, Z+37	; 0x25
	
	ADCA.CTRLA = 0;
     48e:	10 82       	st	Z, r1
	return result;
}
     490:	08 95       	ret

00000492 <easy_sequence_init>:

void easy_sequence_init()
{
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
	sequence_len = EASY_LENGTH;
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <sequence_len>
	sequence = (uint8_t *)malloc(EASY_LENGTH);
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
     4a6:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <sequence>
     4aa:	90 93 c2 21 	sts	0x21C2, r25	; 0x8021c2 <sequence+0x1>
	srand(get_seed());
     4ae:	0e 94 27 02 	call	0x44e	; 0x44e <get_seed>
     4b2:	0e 94 0c 13 	call	0x2618	; 0x2618 <srand>
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	18 c0       	rjmp	.+48     	; 0x4ea <easy_sequence_init+0x58>
	{
		sequence[i] = 0x01 << (rand() % 4);
     4ba:	00 91 c1 21 	lds	r16, 0x21C1	; 0x8021c1 <sequence>
     4be:	10 91 c2 21 	lds	r17, 0x21C2	; 0x8021c2 <sequence+0x1>
     4c2:	0c 0f       	add	r16, r28
     4c4:	11 1d       	adc	r17, r1
     4c6:	0e 94 07 13 	call	0x260e	; 0x260e <rand>
     4ca:	83 70       	andi	r24, 0x03	; 3
     4cc:	90 78       	andi	r25, 0x80	; 128
     4ce:	99 23       	and	r25, r25
     4d0:	24 f4       	brge	.+8      	; 0x4da <easy_sequence_init+0x48>
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	8c 6f       	ori	r24, 0xFC	; 252
     4d6:	9f 6f       	ori	r25, 0xFF	; 255
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <easy_sequence_init+0x4e>
     4de:	99 0f       	add	r25, r25
     4e0:	8a 95       	dec	r24
     4e2:	ea f7       	brpl	.-6      	; 0x4de <easy_sequence_init+0x4c>
     4e4:	f8 01       	movw	r30, r16
     4e6:	90 83       	st	Z, r25
void easy_sequence_init()
{
	sequence_len = EASY_LENGTH;
	sequence = (uint8_t *)malloc(EASY_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < EASY_LENGTH; i++)
     4e8:	cf 5f       	subi	r28, 0xFF	; 255
     4ea:	c3 30       	cpi	r28, 0x03	; 3
     4ec:	30 f3       	brcs	.-52     	; 0x4ba <easy_sequence_init+0x28>
	{
		sequence[i] = 0x01 << (rand() % 4);
	}
	
}
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <hard_sequence_init>:

void hard_sequence_init()
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
	sequence_len = HARD_LENGTH;
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <sequence_len>
	sequence = (uint8_t *)malloc(HARD_LENGTH);
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
     50a:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <sequence>
     50e:	90 93 c2 21 	sts	0x21C2, r25	; 0x8021c2 <sequence+0x1>
	srand(get_seed());
     512:	0e 94 27 02 	call	0x44e	; 0x44e <get_seed>
     516:	0e 94 0c 13 	call	0x2618	; 0x2618 <srand>
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     51a:	c0 e0       	ldi	r28, 0x00	; 0
     51c:	10 c0       	rjmp	.+32     	; 0x53e <hard_sequence_init+0x48>
	{
		sequence[i] = (rand() % 15) + 1;
     51e:	00 91 c1 21 	lds	r16, 0x21C1	; 0x8021c1 <sequence>
     522:	10 91 c2 21 	lds	r17, 0x21C2	; 0x8021c2 <sequence+0x1>
     526:	0c 0f       	add	r16, r28
     528:	11 1d       	adc	r17, r1
     52a:	0e 94 07 13 	call	0x260e	; 0x260e <rand>
     52e:	6f e0       	ldi	r22, 0x0F	; 15
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	f8 01       	movw	r30, r16
     53a:	80 83       	st	Z, r24
void hard_sequence_init()
{
	sequence_len = HARD_LENGTH;
	sequence = (uint8_t *)malloc(HARD_LENGTH);
	srand(get_seed());
	for (uint8_t i = 0; i < HARD_LENGTH; i++)
     53c:	cf 5f       	subi	r28, 0xFF	; 255
     53e:	c3 30       	cpi	r28, 0x03	; 3
     540:	70 f3       	brcs	.-36     	; 0x51e <hard_sequence_init+0x28>
	{
		sequence[i] = (rand() % 15) + 1;
	}
}
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <games_init>:

void games_init(GameModes mode)
{

	if (mode == easy)
     54a:	81 11       	cpse	r24, r1
     54c:	19 c0       	rjmp	.+50     	; 0x580 <games_init+0x36>
	{
		sequence_init = easy_sequence_init;
     54e:	89 e4       	ldi	r24, 0x49	; 73
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <sequence_init>
     556:	90 93 ca 21 	sts	0x21CA, r25	; 0x8021ca <sequence_init+0x1>
		handle_game_won_state = game_won_easy;
     55a:	8d ed       	ldi	r24, 0xDD	; 221
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <handle_game_won_state>
     562:	90 93 c6 21 	sts	0x21C6, r25	; 0x8021c6 <handle_game_won_state+0x1>
		start_notes = easy_game_start_notes;
     566:	8e e1       	ldi	r24, 0x1E	; 30
     568:	90 e2       	ldi	r25, 0x20	; 32
     56a:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <start_notes>
     56e:	90 93 c8 21 	sts	0x21C8, r25	; 0x8021c8 <start_notes+0x1>
		start_size = sizeof(easy_game_start_notes);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <start_size>
     57a:	90 93 c4 21 	sts	0x21C4, r25	; 0x8021c4 <start_size+0x1>
     57e:	08 95       	ret
	}
	else
	{
		sequence_init = hard_sequence_init;
     580:	8b e7       	ldi	r24, 0x7B	; 123
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <sequence_init>
     588:	90 93 ca 21 	sts	0x21CA, r25	; 0x8021ca <sequence_init+0x1>
		handle_game_won_state = game_won_hard;
     58c:	83 e1       	ldi	r24, 0x13	; 19
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <handle_game_won_state>
     594:	90 93 c6 21 	sts	0x21C6, r25	; 0x8021c6 <handle_game_won_state+0x1>
		start_notes = hard_game_start_notes;
     598:	8a e1       	ldi	r24, 0x1A	; 26
     59a:	90 e2       	ldi	r25, 0x20	; 32
     59c:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <start_notes>
     5a0:	90 93 c8 21 	sts	0x21C8, r25	; 0x8021c8 <start_notes+0x1>
		start_size = sizeof(hard_game_start_notes);
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <start_size>
     5ac:	90 93 c4 21 	sts	0x21C4, r25	; 0x8021c4 <start_size+0x1>
     5b0:	08 95       	ret

000005b2 <games_step>:
	
	
}

void games_step(uint8_t buttons)
{
     5b2:	cf 93       	push	r28
     5b4:	c8 2f       	mov	r28, r24
	switch (game_state)
     5b6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <__data_end>
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <games_step+0xe>
     5be:	ab c0       	rjmp	.+342    	; 0x716 <games_step+0x164>
     5c0:	30 f4       	brcc	.+12     	; 0x5ce <games_step+0x1c>
     5c2:	88 23       	and	r24, r24
     5c4:	59 f0       	breq	.+22     	; 0x5dc <games_step+0x2a>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	09 f4       	brne	.+2      	; 0x5cc <games_step+0x1a>
     5ca:	4c c0       	rjmp	.+152    	; 0x664 <games_step+0xb2>
     5cc:	46 c1       	rjmp	.+652    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <games_step+0x22>
     5d2:	08 c1       	rjmp	.+528    	; 0x7e4 <games_step+0x232>
     5d4:	84 30       	cpi	r24, 0x04	; 4
     5d6:	09 f4       	brne	.+2      	; 0x5da <games_step+0x28>
     5d8:	0b c1       	rjmp	.+534    	; 0x7f0 <games_step+0x23e>
     5da:	3f c1       	rjmp	.+638    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	{
		case game_start:
		
			if (!(sequence_initialized))
     5dc:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <sequence_initialized>
     5e0:	81 11       	cpse	r24, r1
     5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <games_step+0x42>
			{
				sequence_init();
     5e4:	e0 91 c9 21 	lds	r30, 0x21C9	; 0x8021c9 <sequence_init>
     5e8:	f0 91 ca 21 	lds	r31, 0x21CA	; 0x8021ca <sequence_init+0x1>
     5ec:	09 95       	icall
				sequence_initialized = 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <sequence_initialized>
			}		
		
			play_lights_game(expander_read_ports(), 0);
     5f4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
			if (play_index == start_size && !(note_player_playing()))
     5fe:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	20 91 c3 21 	lds	r18, 0x21C3	; 0x8021c3 <start_size>
     608:	30 91 c4 21 	lds	r19, 0x21C4	; 0x8021c4 <start_size+0x1>
     60c:	82 17       	cp	r24, r18
     60e:	93 07       	cpc	r25, r19
     610:	a9 f4       	brne	.+42     	; 0x63c <games_step+0x8a>
     612:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     616:	81 11       	cpse	r24, r1
     618:	11 c0       	rjmp	.+34     	; 0x63c <games_step+0x8a>
			{
				play_lights_game(expander_read_ports(), 0);
     61a:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
				game_state = play_sequence;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
				timer_counter = 0;
     62a:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     62e:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
				play_index = 0;
     632:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>
				progress_index = 1;
     636:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <progress_index>
				break;
     63a:	0f c1       	rjmp	.+542    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
			
			if (!(note_player_playing()))
     63c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     640:	81 11       	cpse	r24, r1
     642:	0b c1       	rjmp	.+534    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				note_play(start_notes[play_index++]);
     644:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <start_notes>
     648:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <start_notes+0x1>
     64c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	98 0f       	add	r25, r24
     654:	90 93 96 21 	sts	0x2196, r25	; 0x802196 <play_index>
     658:	e8 0f       	add	r30, r24
     65a:	f1 1d       	adc	r31, r1
     65c:	80 81       	ld	r24, Z
     65e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
     662:	fb c0       	rjmp	.+502    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			

			break;
		case play_sequence:
		
			if (timer_counter < STEP_PAUSE)
     664:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     668:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	91 05       	cpc	r25, r1
     670:	30 f4       	brcc	.+12     	; 0x67e <games_step+0xcc>
			{
				timer_counter++;
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <timer_counter>
     678:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <timer_counter+0x1>
				break;
     67c:	ee c0       	rjmp	.+476    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (timer_counter < NOTE_PAUSE)
     67e:	08 97       	sbiw	r24, 0x08	; 8
     680:	78 f4       	brcc	.+30     	; 0x6a0 <games_step+0xee>
			{
				play_lights_game(expander_read_ports(), 0);
     682:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
				timer_counter++;
     68c:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     690:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <timer_counter>
     69a:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <timer_counter+0x1>
				break;
     69e:	dd c0       	rjmp	.+442    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (play_index == progress_index)
     6a0:	90 91 96 21 	lds	r25, 0x2196	; 0x802196 <play_index>
     6a4:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <progress_index>
     6a8:	98 13       	cpse	r25, r24
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <games_step+0x118>
			{
			
				play_lights_game(expander_read_ports(), 0);
     6ac:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
				game_state = get_input;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
				timer_counter = 0;
     6bc:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     6c0:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
				play_index = 0;
     6c4:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>

				break;
     6c8:	c8 c0       	rjmp	.+400    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		
			if (!(note_player_playing()))
     6ca:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     6ce:	81 11       	cpse	r24, r1
     6d0:	c4 c0       	rjmp	.+392    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				play_lights_game(expander_read_ports(), sequence[play_index]);
     6d2:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     6d6:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <sequence>
     6da:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <sequence+0x1>
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	c0 81       	ld	r28, Z
     6e4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     6e8:	6c 2f       	mov	r22, r28
     6ea:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
				note_play(sequence[play_index++]);
     6ee:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <sequence>
     6f2:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <sequence+0x1>
     6f6:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	98 0f       	add	r25, r24
     6fe:	90 93 96 21 	sts	0x2196, r25	; 0x802196 <play_index>
     702:	e8 0f       	add	r30, r24
     704:	f1 1d       	adc	r31, r1
     706:	80 81       	ld	r24, Z
     708:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
				timer_counter = 0;
     70c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     710:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
     714:	a2 c0       	rjmp	.+324    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		
		
			break;
		case get_input:
		
			play_lights_game(expander_read_ports(), buttons);
     716:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     71a:	6c 2f       	mov	r22, r28
     71c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
		
			if (timer_counter++ > INPUT_TIMEOUT && !(note_player_playing()))
     720:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     724:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     728:	9c 01       	movw	r18, r24
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	20 93 93 21 	sts	0x2193, r18	; 0x802193 <timer_counter>
     732:	30 93 94 21 	sts	0x2194, r19	; 0x802194 <timer_counter+0x1>
     736:	45 97       	sbiw	r24, 0x15	; 21
     738:	98 f0       	brcs	.+38     	; 0x760 <games_step+0x1ae>
     73a:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     73e:	81 11       	cpse	r24, r1
     740:	0f c0       	rjmp	.+30     	; 0x760 <games_step+0x1ae>
			{
				play_lights_game(expander_read_ports(), 0);
     742:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
				game_state = game_lost;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
				timer_counter = 0;
     752:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     756:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
				play_index = 0;
     75a:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>

				break;
     75e:	7d c0       	rjmp	.+250    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}

		
			if (buttons && expander_get_val_changed() && !(note_player_playing()))
     760:	cc 23       	and	r28, r28
     762:	09 f4       	brne	.+2      	; 0x766 <games_step+0x1b4>
     764:	7a c0       	rjmp	.+244    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     766:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <expander_get_val_changed>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <games_step+0x1be>
     76e:	75 c0       	rjmp	.+234    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     770:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     774:	81 11       	cpse	r24, r1
     776:	71 c0       	rjmp	.+226    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				timer_counter = 0;
     778:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     77c:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
			
				if (buttons == sequence[play_index])
     780:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     784:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <sequence>
     788:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <sequence+0x1>
     78c:	e8 0f       	add	r30, r24
     78e:	f1 1d       	adc	r31, r1
     790:	80 81       	ld	r24, Z
     792:	c8 13       	cpse	r28, r24
     794:	21 c0       	rjmp	.+66     	; 0x7d8 <games_step+0x226>
				{
					note_play(buttons);
     796:	8c 2f       	mov	r24, r28
     798:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
					play_index++;
     79c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <play_index>
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <play_index>
				

					if (play_index == progress_index)
     7a6:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <progress_index>
     7aa:	89 13       	cpse	r24, r25
     7ac:	56 c0       	rjmp	.+172    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					{
						progress_index++;
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <progress_index>
					
						if (progress_index > sequence_len)
     7b4:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <sequence_len>
     7b8:	89 17       	cp	r24, r25
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <games_step+0x212>
						{
							game_state = game_won;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <games_step+0x218>
						}
						else
						{
							game_state = play_sequence;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
						}
					
						timer_counter = 0;
     7ca:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     7ce:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
						play_index = 0;
     7d2:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>
						break;
     7d6:	41 c0       	rjmp	.+130    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					}
				}
				else
				{
					game_state = game_lost;
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__data_end>
					timer_counter = 0;
					play_index = 0;
     7de:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>
					break;
     7e2:	3b c0       	rjmp	.+118    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				}
			}
		
			break;
		case game_won:
			handle_game_won_state();
     7e4:	e0 91 c5 21 	lds	r30, 0x21C5	; 0x8021c5 <handle_game_won_state>
     7e8:	f0 91 c6 21 	lds	r31, 0x21C6	; 0x8021c6 <handle_game_won_state+0x1>
     7ec:	09 95       	icall
			break;
     7ee:	35 c0       	rjmp	.+106    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		case game_lost:
		
			play_lights_game_over();
     7f0:	0e 94 1b 09 	call	0x1236	; 0x1236 <play_lights_game_over>
			if (!(note_player_playing()))
     7f4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
     7f8:	81 11       	cpse	r24, r1
     7fa:	2f c0       	rjmp	.+94     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				if (play_index < sizeof(game_lost_notes))
     7fc:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <play_index>
     800:	e4 30       	cpi	r30, 0x04	; 4
     802:	78 f4       	brcc	.+30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
				{
					timer_counter = 0;
     804:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     808:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
					note_play(game_lost_notes[play_index++]);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	8e 0f       	add	r24, r30
     810:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <play_index>
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	e6 5f       	subi	r30, 0xF6	; 246
     818:	ff 4d       	sbci	r31, 0xDF	; 223
     81a:	80 81       	ld	r24, Z
     81c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
     820:	1c c0       	rjmp	.+56     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				}
				else
				{
					if (timer_counter++ > STEP_PAUSE)
     822:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <timer_counter>
     826:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <timer_counter+0x1>
     82a:	9c 01       	movw	r18, r24
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	20 93 93 21 	sts	0x2193, r18	; 0x802193 <timer_counter>
     834:	30 93 94 21 	sts	0x2194, r19	; 0x802194 <timer_counter+0x1>
     838:	06 97       	sbiw	r24, 0x06	; 6
     83a:	78 f0       	brcs	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					{
						play_index = 0;
     83c:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <play_index>
						timer_counter = 0;
     840:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <timer_counter>
     844:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <timer_counter+0x1>
						sequence_initialized = 0;
     848:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <sequence_initialized>
						game_state = game_start;
     84c:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__data_end>
						play_lights_game(expander_read_ports(), 0);
     850:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <play_lights_game>
			}

			break;
	}
	
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <twi_init>:
	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
	
	while(twi_transfer_complete!=1);

	return 0;
}
     85e:	84 e9       	ldi	r24, 0x94	; 148
     860:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7fb485>
     864:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7fb480>
     868:	e1 e8       	ldi	r30, 0x81	; 129
     86a:	f4 e0       	ldi	r31, 0x04	; 4
     86c:	80 81       	ld	r24, Z
     86e:	88 6f       	ori	r24, 0xF8	; 248
     870:	80 83       	st	Z, r24
     872:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__TEXT_REGION_LENGTH__+0x7fb482>
     876:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
     87a:	e4 e8       	ldi	r30, 0x84	; 132
     87c:	f4 e0       	ldi	r31, 0x04	; 4
     87e:	80 81       	ld	r24, Z
     880:	8d 6c       	ori	r24, 0xCD	; 205
     882:	80 83       	st	Z, r24
     884:	08 95       	ret

00000886 <twi_read>:
     886:	40 93 ce 21 	sts	0x21CE, r20	; 0x8021ce <twi_no_of_bytes>
     88a:	50 93 cf 21 	sts	0x21CF, r21	; 0x8021cf <twi_no_of_bytes+0x1>
     88e:	10 92 d1 21 	sts	0x21D1, r1	; 0x8021d1 <twi_data_count>
     892:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <twi_data_count+0x1>
     896:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <twi_transfer_complete>
     89a:	60 93 d5 21 	sts	0x21D5, r22	; 0x8021d5 <twi_data>
     89e:	70 93 d6 21 	sts	0x21D6, r23	; 0x8021d6 <twi_data+0x1>
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
     8ae:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <twi_transfer_complete>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <twi_read+0x28>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	08 95       	ret

000008ba <twi_write>:

uint8_t twi_write(uint8_t device_addr, uint8_t * data, uint16_t len)
{
	
	twi_repeat_mode = 0;
     8ba:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <twi_repeat_mode>
	
	twi_no_of_bytes=len;
     8be:	40 93 ce 21 	sts	0x21CE, r20	; 0x8021ce <twi_no_of_bytes>
     8c2:	50 93 cf 21 	sts	0x21CF, r21	; 0x8021cf <twi_no_of_bytes+0x1>
	
	twi_data_count=0;
     8c6:	10 92 d1 21 	sts	0x21D1, r1	; 0x8021d1 <twi_data_count>
     8ca:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <twi_data_count+0x1>
	
	twi_transfer_complete=0;
     8ce:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <twi_transfer_complete>
	
	twi_data=data;
     8d2:	60 93 d5 21 	sts	0x21D5, r22	; 0x8021d5 <twi_data>
     8d6:	70 93 d6 21 	sts	0x21D6, r23	; 0x8021d6 <twi_data+0x1>
	

	TWIC_MASTER_ADDR=(device_addr << 1)|TWI_WRITE;
     8da:	88 0f       	add	r24, r24
     8dc:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7fb486>
	
	while(twi_transfer_complete!=1);
     8e0:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <twi_transfer_complete>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <twi_write+0x26>
	
	return 0;
}
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret

000008ec <__vector_11>:

ISR(TWIC_TWIM_vect)
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
	//If TWI arbitration is lost send STOP
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
     906:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     90a:	83 ff       	sbrs	r24, 3
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__vector_11+0x28>
	{
		TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
	}
	
	//If TWI bus error flag is set or NACK received then send STOP
	
	if((TWIC_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
     914:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     918:	82 fd       	sbrc	r24, 2
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__vector_11+0x38>
     91c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     920:	84 ff       	sbrs	r24, 4
     922:	08 c0       	rjmp	.+16     	; 0x934 <__vector_11+0x48>
	{
		TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition
     924:	e3 e8       	ldi	r30, 0x83	; 131
     926:	f4 e0       	ldi	r31, 0x04	; 4
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	80 83       	st	Z, r24
		TWIC_MASTER_CTRLC=TWI_MASTER_BUSSTATE_IDLE_gc;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 83       	st	Z, r24
		twi_transfer_complete = 1;
     930:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <twi_transfer_complete>
	}

	if(twi_transfer_complete)
     934:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <twi_transfer_complete>
     938:	88 23       	and	r24, r24
     93a:	31 f0       	breq	.+12     	; 0x948 <__vector_11+0x5c>
	{
		TWIC_MASTER_STATUS |= TWI_MASTER_WIF_bm;
     93c:	e4 e8       	ldi	r30, 0x84	; 132
     93e:	f4 e0       	ldi	r31, 0x04	; 4
     940:	80 81       	ld	r24, Z
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 83       	st	Z, r24
		return;
     946:	79 c0       	rjmp	.+242    	; 0xa3a <__vector_11+0x14e>
	}
	//If TWI write interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
     948:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     94c:	86 ff       	sbrs	r24, 6
     94e:	47 c0       	rjmp	.+142    	; 0x9de <__vector_11+0xf2>
	{
		if(!(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))      //check whether acknowledge is received or not
     950:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     954:	84 fd       	sbrc	r24, 4
     956:	43 c0       	rjmp	.+134    	; 0x9de <__vector_11+0xf2>
		{
			if (twi_repeat_mode)
     958:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <twi_repeat_mode>
     95c:	88 23       	and	r24, r24
     95e:	c9 f0       	breq	.+50     	; 0x992 <__vector_11+0xa6>
			{
				if (twi_repeat_cmd_sent)
     960:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <twi_repeat_cmd_sent>
     964:	88 23       	and	r24, r24
     966:	69 f0       	breq	.+26     	; 0x982 <__vector_11+0x96>
				{
					TWIC_MASTER_DATA=twi_repeat_data; //using the pointer as a normal variable	
     968:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <twi_repeat_data>
     96c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_data_count++;
     970:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <twi_data_count>
     974:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <twi_data_count+0x1>
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <twi_data_count>
     97e:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <twi_data_count+0x1>
				}
				{
					TWIC_MASTER_DATA=twi_repeat_cmd;
     982:	80 91 d7 21 	lds	r24, 0x21D7	; 0x8021d7 <twi_repeat_cmd>
     986:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
					twi_repeat_cmd_sent = 1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <twi_repeat_cmd_sent>
     990:	15 c0       	rjmp	.+42     	; 0x9bc <__vector_11+0xd0>
				}
				
			}
			else
			{
				TWIC_MASTER_DATA=twi_data[twi_data_count++];	
     992:	20 91 d5 21 	lds	r18, 0x21D5	; 0x8021d5 <twi_data>
     996:	30 91 d6 21 	lds	r19, 0x21D6	; 0x8021d6 <twi_data+0x1>
     99a:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <twi_data_count>
     99e:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <twi_data_count+0x1>
     9a2:	ac 01       	movw	r20, r24
     9a4:	4f 5f       	subi	r20, 0xFF	; 255
     9a6:	5f 4f       	sbci	r21, 0xFF	; 255
     9a8:	40 93 d1 21 	sts	0x21D1, r20	; 0x8021d1 <twi_data_count>
     9ac:	50 93 d2 21 	sts	0x21D2, r21	; 0x8021d2 <twi_data_count+0x1>
     9b0:	f9 01       	movw	r30, r18
     9b2:	e8 0f       	add	r30, r24
     9b4:	f9 1f       	adc	r31, r25
     9b6:	80 81       	ld	r24, Z
     9b8:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
			}
			
			
			
			if(twi_data_count == twi_no_of_bytes)
     9bc:	20 91 d1 21 	lds	r18, 0x21D1	; 0x8021d1 <twi_data_count>
     9c0:	30 91 d2 21 	lds	r19, 0x21D2	; 0x8021d2 <twi_data_count+0x1>
     9c4:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <twi_no_of_bytes>
     9c8:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <twi_no_of_bytes+0x1>
     9cc:	28 17       	cp	r18, r24
     9ce:	39 07       	cpc	r19, r25
     9d0:	31 f4       	brne	.+12     	; 0x9de <__vector_11+0xf2>
			{
				TWIC_MASTER_CTRLC=TWI_MASTER_CMD_STOP_gc; //send stop condition if all bytes are transferred
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
 				
				twi_transfer_complete=1;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <twi_transfer_complete>
		}
	}
	
	//If RTC read interrupt flag is set
	
	if(TWIC_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp))          //check whether read interrupt flag is set or not
     9de:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7fb484>
     9e2:	88 23       	and	r24, r24
     9e4:	54 f5       	brge	.+84     	; 0xa3a <__vector_11+0x14e>
	{
		twi_data[twi_data_count++]=TWIC_MASTER_DATA;
     9e6:	20 91 d5 21 	lds	r18, 0x21D5	; 0x8021d5 <twi_data>
     9ea:	30 91 d6 21 	lds	r19, 0x21D6	; 0x8021d6 <twi_data+0x1>
     9ee:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <twi_data_count>
     9f2:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <twi_data_count+0x1>
     9f6:	ac 01       	movw	r20, r24
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	40 93 d1 21 	sts	0x21D1, r20	; 0x8021d1 <twi_data_count>
     a00:	50 93 d2 21 	sts	0x21D2, r21	; 0x8021d2 <twi_data_count+0x1>
     a04:	f9 01       	movw	r30, r18
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7fb487>
     a0e:	20 83       	st	Z, r18
		
		if(twi_data_count == twi_no_of_bytes)
     a10:	20 91 d1 21 	lds	r18, 0x21D1	; 0x8021d1 <twi_data_count>
     a14:	30 91 d2 21 	lds	r19, 0x21D2	; 0x8021d2 <twi_data_count+0x1>
     a18:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <twi_no_of_bytes>
     a1c:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <twi_no_of_bytes+0x1>
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	39 f4       	brne	.+14     	; 0xa34 <__vector_11+0x148>
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send NACK and stop condition if all bytes are transferred
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
			
			twi_transfer_complete=1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <twi_transfer_complete>
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <__vector_11+0x14e>
		}
		else
		{
			TWIC_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp); //send acknowledge
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7fb483>
		}
	}
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <expander_read_port>:
	twi_write(addr, cmd, 3);
	last_val = expander_read_ports();
}

uint8_t expander_read_port(uint8_t portAddr)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <expander_read_port+0x6>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t port_val;
	uint8_t addr = EXP_ADDR;
	
	uint8_t cmd[] = {
     a5e:	8a 83       	std	Y+2, r24	; 0x02
		portAddr
	};
	
	twi_write(addr, cmd, sizeof cmd);
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	6e 5f       	subi	r22, 0xFE	; 254
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <twi_write>
	
	twi_read(addr, &port_val, 1);
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	0e 94 43 04 	call	0x886	; 0x886 <twi_read>
	
	return port_val;
	
}
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <expander_read_ports>:

uint16_t expander_read_ports()
{
     a8c:	cf 93       	push	r28
	uint16_t port_data;
	
	port_data = expander_read_port(0x00) + (expander_read_port(0x01) << 8);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 2a 05 	call	0xa54	; 0xa54 <expander_read_port>
     a94:	c8 2f       	mov	r28, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 2a 05 	call	0xa54	; 0xa54 <expander_read_port>
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	98 2f       	mov	r25, r24
     aa0:	88 27       	eor	r24, r24
	return port_data;
	
}
     aa2:	8c 0f       	add	r24, r28
     aa4:	91 1d       	adc	r25, r1
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <expander_init>:
#include "i2c.h"

volatile uint16_t last_val = 0;

void expander_init()
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <expander_init+0x6>
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     ab6:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_init>
	
	//Set up port0 and port1 as input
	uint8_t addr = EXP_ADDR;
	uint8_t cmd[] = {
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	8a 83       	std	Y+2, r24	; 0x02
     ac2:	8b 83       	std	Y+3, r24	; 0x03
		EXP_REG_CTRL0,
		0xff,
		0xff
	};
	twi_write(addr, cmd, 3);
     ac4:	43 e0       	ldi	r20, 0x03	; 3
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	80 e2       	ldi	r24, 0x20	; 32
     ad0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <twi_write>
	last_val = expander_read_ports();
     ad4:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
     ad8:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <last_val>
     adc:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <last_val+0x1>
}
     ae0:	23 96       	adiw	r28, 0x03	; 3
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <expander_get_last_value>:
	
}

uint16_t expander_get_last_value()
{
	return last_val;
     aec:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <last_val>
     af0:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <last_val+0x1>
}
     af4:	08 95       	ret

00000af6 <expander_get_val_changed>:

uint8_t expander_get_val_changed()
{
	uint16_t val = expander_read_ports();
     af6:	0e 94 46 05 	call	0xa8c	; 0xa8c <expander_read_ports>
	
	if (val == last_val)
     afa:	20 91 97 21 	lds	r18, 0x2197	; 0x802197 <last_val>
     afe:	30 91 98 21 	lds	r19, 0x2198	; 0x802198 <last_val+0x1>
     b02:	82 17       	cp	r24, r18
     b04:	93 07       	cpc	r25, r19
     b06:	99 f0       	breq	.+38     	; 0xb2e <expander_get_val_changed+0x38>
	{
		return 0;
	}
	
	if (val > last_val)
     b08:	20 91 97 21 	lds	r18, 0x2197	; 0x802197 <last_val>
     b0c:	30 91 98 21 	lds	r19, 0x2198	; 0x802198 <last_val+0x1>
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	30 f4       	brcc	.+12     	; 0xb22 <expander_get_val_changed+0x2c>
	{
		last_val = val;
     b16:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <last_val>
     b1a:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <last_val+0x1>
		return 2;		
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	08 95       	ret
	}
	
	last_val = val;
     b22:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <last_val>
     b26:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <last_val+0x1>
	return 1;	
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	08 95       	ret
{
	uint16_t val = expander_read_ports();
	
	if (val == last_val)
	{
		return 0;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
		return 2;		
	}
	
	last_val = val;
	return 1;	
     b30:	08 95       	ret

00000b32 <play_lights_overlay_note_button_leds>:
	}
};

void play_lights_overlay_note_button_leds(uint8_t buttons)
{
	if (buttons & 0x01)
     b32:	80 ff       	sbrs	r24, 0
     b34:	12 c0       	rjmp	.+36     	; 0xb5a <play_lights_overlay_note_button_leds+0x28>
	{
		leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
     b36:	e8 e6       	ldi	r30, 0x68	; 104
     b38:	f2 e2       	ldi	r31, 0x22	; 34
     b3a:	10 82       	st	Z, r1
     b3c:	90 e4       	ldi	r25, 0x40	; 64
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	12 82       	std	Z+2, r1	; 0x02
     b42:	10 82       	st	Z, r1
     b44:	91 83       	std	Z+1, r25	; 0x01
     b46:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
     b48:	eb e6       	ldi	r30, 0x6B	; 107
     b4a:	f2 e2       	ldi	r31, 0x22	; 34
     b4c:	10 82       	st	Z, r1
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	10 82       	st	Z, r1
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	12 82       	std	Z+2, r1	; 0x02
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <play_lights_overlay_note_button_leds+0x48>
	}
	else
	{
		leds[GRUMBO_LED_COUNT] = game_colors[LED_OFF];
     b5a:	e8 e6       	ldi	r30, 0x68	; 104
     b5c:	f2 e2       	ldi	r31, 0x22	; 34
     b5e:	10 82       	st	Z, r1
     b60:	11 82       	std	Z+1, r1	; 0x01
     b62:	12 82       	std	Z+2, r1	; 0x02
     b64:	10 82       	st	Z, r1
     b66:	11 82       	std	Z+1, r1	; 0x01
     b68:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 1] = game_colors[LED_OFF];
     b6a:	eb e6       	ldi	r30, 0x6B	; 107
     b6c:	f2 e2       	ldi	r31, 0x22	; 34
     b6e:	10 82       	st	Z, r1
     b70:	11 82       	std	Z+1, r1	; 0x01
     b72:	12 82       	std	Z+2, r1	; 0x02
     b74:	10 82       	st	Z, r1
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x02)
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <play_lights_overlay_note_button_leds+0x70>
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
     b7e:	ee e6       	ldi	r30, 0x6E	; 110
     b80:	f2 e2       	ldi	r31, 0x22	; 34
     b82:	90 e4       	ldi	r25, 0x40	; 64
     b84:	90 83       	st	Z, r25
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	12 82       	std	Z+2, r1	; 0x02
     b8a:	90 83       	st	Z, r25
     b8c:	11 82       	std	Z+1, r1	; 0x01
     b8e:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
     b90:	e1 e7       	ldi	r30, 0x71	; 113
     b92:	f2 e2       	ldi	r31, 0x22	; 34
     b94:	90 83       	st	Z, r25
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	12 82       	std	Z+2, r1	; 0x02
     b9a:	90 83       	st	Z, r25
     b9c:	11 82       	std	Z+1, r1	; 0x01
     b9e:	12 82       	std	Z+2, r1	; 0x02
     ba0:	10 c0       	rjmp	.+32     	; 0xbc2 <play_lights_overlay_note_button_leds+0x90>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 2] = game_colors[LED_OFF];
     ba2:	ee e6       	ldi	r30, 0x6E	; 110
     ba4:	f2 e2       	ldi	r31, 0x22	; 34
     ba6:	10 82       	st	Z, r1
     ba8:	11 82       	std	Z+1, r1	; 0x01
     baa:	12 82       	std	Z+2, r1	; 0x02
     bac:	10 82       	st	Z, r1
     bae:	11 82       	std	Z+1, r1	; 0x01
     bb0:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 3] = game_colors[LED_OFF];
     bb2:	e1 e7       	ldi	r30, 0x71	; 113
     bb4:	f2 e2       	ldi	r31, 0x22	; 34
     bb6:	10 82       	st	Z, r1
     bb8:	11 82       	std	Z+1, r1	; 0x01
     bba:	12 82       	std	Z+2, r1	; 0x02
     bbc:	10 82       	st	Z, r1
     bbe:	11 82       	std	Z+1, r1	; 0x01
     bc0:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x04)
     bc2:	82 ff       	sbrs	r24, 2
     bc4:	12 c0       	rjmp	.+36     	; 0xbea <play_lights_overlay_note_button_leds+0xb8>
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
     bc6:	e4 e7       	ldi	r30, 0x74	; 116
     bc8:	f2 e2       	ldi	r31, 0x22	; 34
     bca:	10 82       	st	Z, r1
     bcc:	11 82       	std	Z+1, r1	; 0x01
     bce:	90 e4       	ldi	r25, 0x40	; 64
     bd0:	92 83       	std	Z+2, r25	; 0x02
     bd2:	10 82       	st	Z, r1
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	92 83       	std	Z+2, r25	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
     bd8:	e7 e7       	ldi	r30, 0x77	; 119
     bda:	f2 e2       	ldi	r31, 0x22	; 34
     bdc:	10 82       	st	Z, r1
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	92 83       	std	Z+2, r25	; 0x02
     be2:	10 82       	st	Z, r1
     be4:	11 82       	std	Z+1, r1	; 0x01
     be6:	92 83       	std	Z+2, r25	; 0x02
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <play_lights_overlay_note_button_leds+0xd8>
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 4] = game_colors[LED_OFF];
     bea:	e4 e7       	ldi	r30, 0x74	; 116
     bec:	f2 e2       	ldi	r31, 0x22	; 34
     bee:	10 82       	st	Z, r1
     bf0:	11 82       	std	Z+1, r1	; 0x01
     bf2:	12 82       	std	Z+2, r1	; 0x02
     bf4:	10 82       	st	Z, r1
     bf6:	11 82       	std	Z+1, r1	; 0x01
     bf8:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 5] = game_colors[LED_OFF];
     bfa:	e7 e7       	ldi	r30, 0x77	; 119
     bfc:	f2 e2       	ldi	r31, 0x22	; 34
     bfe:	10 82       	st	Z, r1
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	12 82       	std	Z+2, r1	; 0x02
     c04:	10 82       	st	Z, r1
     c06:	11 82       	std	Z+1, r1	; 0x01
     c08:	12 82       	std	Z+2, r1	; 0x02
	}
	
	if (buttons & 0x08)
     c0a:	83 ff       	sbrs	r24, 3
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <play_lights_overlay_note_button_leds+0x100>
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
     c0e:	ea e7       	ldi	r30, 0x7A	; 122
     c10:	f2 e2       	ldi	r31, 0x22	; 34
     c12:	80 e2       	ldi	r24, 0x20	; 32
     c14:	80 83       	st	Z, r24
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	12 82       	std	Z+2, r1	; 0x02
     c1a:	80 83       	st	Z, r24
     c1c:	81 83       	std	Z+1, r24	; 0x01
     c1e:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
     c20:	ed e7       	ldi	r30, 0x7D	; 125
     c22:	f2 e2       	ldi	r31, 0x22	; 34
     c24:	80 83       	st	Z, r24
     c26:	81 83       	std	Z+1, r24	; 0x01
     c28:	12 82       	std	Z+2, r1	; 0x02
     c2a:	80 83       	st	Z, r24
     c2c:	81 83       	std	Z+1, r24	; 0x01
     c2e:	12 82       	std	Z+2, r1	; 0x02
     c30:	08 95       	ret
	}
	else
	{
		leds[GRUMBO_LED_COUNT + 6] = game_colors[LED_OFF];
     c32:	ea e7       	ldi	r30, 0x7A	; 122
     c34:	f2 e2       	ldi	r31, 0x22	; 34
     c36:	10 82       	st	Z, r1
     c38:	11 82       	std	Z+1, r1	; 0x01
     c3a:	12 82       	std	Z+2, r1	; 0x02
     c3c:	10 82       	st	Z, r1
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	12 82       	std	Z+2, r1	; 0x02
		leds[GRUMBO_LED_COUNT + 7] = game_colors[LED_OFF];
     c42:	ed e7       	ldi	r30, 0x7D	; 125
     c44:	f2 e2       	ldi	r31, 0x22	; 34
     c46:	10 82       	st	Z, r1
     c48:	11 82       	std	Z+1, r1	; 0x01
     c4a:	12 82       	std	Z+2, r1	; 0x02
     c4c:	10 82       	st	Z, r1
     c4e:	11 82       	std	Z+1, r1	; 0x01
     c50:	12 82       	std	Z+2, r1	; 0x02
     c52:	08 95       	ret

00000c54 <overlay_dingle_pos>:
	}
}
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	bc 01       	movw	r22, r24
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	42 c0       	rjmp	.+132    	; 0xce2 <overlay_dingle_pos+0x8e>
	{
		if (!(dingle_pos & (0x01 << i)))
     c5e:	8d 2f       	mov	r24, r29
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	0d 2e       	mov	r0, r29
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <overlay_dingle_pos+0x1a>
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <overlay_dingle_pos+0x16>
     c72:	26 23       	and	r18, r22
     c74:	37 23       	and	r19, r23
     c76:	23 2b       	or	r18, r19
     c78:	99 f5       	brne	.+102    	; 0xce0 <overlay_dingle_pos+0x8c>
			//if i is 0, since we are using unsigned ints, we have to manually calc the starting index
			//in the LED array
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
     c7a:	dd 23       	and	r29, r29
     c7c:	29 f0       	breq	.+10     	; 0xc88 <overlay_dingle_pos+0x34>
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
			}
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	98 2f       	mov	r25, r24
     c82:	99 0f       	add	r25, r25
     c84:	89 0f       	add	r24, r25
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <overlay_dingle_pos+0x36>
			//This only works out because HALF_POS_LED_COUNT = 3, our multiple for i 
			//(or the number of grumbo leds / the number of hall effect sensors)
			//This algorithm only works as expected for one-at-a-time activated sensors
			if (i == 0)
			{
				led_i = GRUMBO_LED_COUNT - HALF_POS_LED_COUNT;
     c88:	8d e2       	ldi	r24, 0x2D	; 45
     c8a:	c0 e0       	ldi	r28, 0x00	; 0
     c8c:	27 c0       	rjmp	.+78     	; 0xcdc <overlay_dingle_pos+0x88>
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
			{				
				leds[led_i % GRUMBO_LED_COUNT] = pos_leds[j];
     c8e:	9b ea       	ldi	r25, 0xAB	; 171
     c90:	89 9f       	mul	r24, r25
     c92:	91 2d       	mov	r25, r1
     c94:	11 24       	eor	r1, r1
     c96:	92 95       	swap	r25
     c98:	96 95       	lsr	r25
     c9a:	97 70       	andi	r25, 0x07	; 7
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e3       	ldi	r19, 0x30	; 48
     ca0:	93 9f       	mul	r25, r19
     ca2:	20 19       	sub	r18, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4c 2f       	mov	r20, r28
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	f9 01       	movw	r30, r18
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	2e 0f       	add	r18, r30
     cb4:	3f 1f       	adc	r19, r31
     cb6:	f9 01       	movw	r30, r18
     cb8:	e8 52       	subi	r30, 0x28	; 40
     cba:	fe 4d       	sbci	r31, 0xDE	; 222
     cbc:	da 01       	movw	r26, r20
     cbe:	aa 0f       	add	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	4a 0f       	add	r20, r26
     cc4:	5b 1f       	adc	r21, r27
     cc6:	da 01       	movw	r26, r20
     cc8:	a1 5b       	subi	r26, 0xB1	; 177
     cca:	bf 4d       	sbci	r27, 0xDF	; 223
     ccc:	2d 91       	ld	r18, X+
     cce:	3d 91       	ld	r19, X+
     cd0:	4c 91       	ld	r20, X
     cd2:	20 83       	st	Z, r18
     cd4:	31 83       	std	Z+1, r19	; 0x01
     cd6:	42 83       	std	Z+2, r20	; 0x02
				led_i++;
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
			else
			{
				led_i = (i * 3) - HALF_POS_LED_COUNT;
			}
			
			for (uint8_t j = 0; j < POS_LED_COUNT; j++)
     cda:	cf 5f       	subi	r28, 0xFF	; 255
     cdc:	c7 30       	cpi	r28, 0x07	; 7
     cde:	b8 f2       	brcs	.-82     	; 0xc8e <overlay_dingle_pos+0x3a>
	
void overlay_dingle_pos(uint16_t dingle_pos)
{
	uint8_t led_i;
	
	for (uint8_t i = 0; i < 16; i++)
     ce0:	df 5f       	subi	r29, 0xFF	; 255
     ce2:	d0 31       	cpi	r29, 0x10	; 16
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <overlay_dingle_pos+0x94>
     ce6:	bb cf       	rjmp	.-138    	; 0xc5e <overlay_dingle_pos+0xa>
				led_i++;
			}
		}
		
	}
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <play_lights_standby>:

void play_lights_standby()
{
	for (uint8_t i = 0; i < LED_COUNT; i++)
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	3f c0       	rjmp	.+126    	; 0xd70 <play_lights_standby+0x82>
	{
		leds[i].r = 0;
     cf2:	24 2f       	mov	r18, r20
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	f9 01       	movw	r30, r18
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	e8 52       	subi	r30, 0x28	; 40
     d02:	fe 4d       	sbci	r31, 0xDE	; 222
     d04:	11 82       	std	Z+1, r1	; 0x01
		leds[i].g = 0;
     d06:	10 82       	st	Z, r1
		leds[i].b = 0;
     d08:	12 82       	std	Z+2, r1	; 0x02
			
		switch((i + offset)%3)
     d0a:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
     d0e:	b9 01       	movw	r22, r18
     d10:	68 0f       	add	r22, r24
     d12:	71 1d       	adc	r23, r1
     d14:	cb 01       	movw	r24, r22
     d16:	63 e0       	ldi	r22, 0x03	; 3
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	81 f0       	breq	.+32     	; 0xd44 <play_lights_standby+0x56>
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	91 05       	cpc	r25, r1
     d28:	c1 f0       	breq	.+48     	; 0xd5a <play_lights_standby+0x6c>
     d2a:	89 2b       	or	r24, r25
     d2c:	01 f5       	brne	.+64     	; 0xd6e <play_lights_standby+0x80>
		{
			case 0:
			leds[i].r = MAX_BRIGHTNESS;
     d2e:	f9 01       	movw	r30, r18
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	2e 0f       	add	r18, r30
     d36:	3f 1f       	adc	r19, r31
     d38:	f9 01       	movw	r30, r18
     d3a:	e8 52       	subi	r30, 0x28	; 40
     d3c:	fe 4d       	sbci	r31, 0xDE	; 222
     d3e:	80 e4       	ldi	r24, 0x40	; 64
     d40:	81 83       	std	Z+1, r24	; 0x01
			break;
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <play_lights_standby+0x80>
			case 1:
			leds[i].g = MAX_BRIGHTNESS;
     d44:	f9 01       	movw	r30, r18
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	2e 0f       	add	r18, r30
     d4c:	3f 1f       	adc	r19, r31
     d4e:	f9 01       	movw	r30, r18
     d50:	e8 52       	subi	r30, 0x28	; 40
     d52:	fe 4d       	sbci	r31, 0xDE	; 222
     d54:	80 e4       	ldi	r24, 0x40	; 64
     d56:	80 83       	st	Z, r24
			break;
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <play_lights_standby+0x80>
			case 2:
			leds[i].b = MAX_BRIGHTNESS;
     d5a:	f9 01       	movw	r30, r18
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	2e 0f       	add	r18, r30
     d62:	3f 1f       	adc	r19, r31
     d64:	f9 01       	movw	r30, r18
     d66:	e8 52       	subi	r30, 0x28	; 40
     d68:	fe 4d       	sbci	r31, 0xDE	; 222
     d6a:	80 e4       	ldi	r24, 0x40	; 64
     d6c:	82 83       	std	Z+2, r24	; 0x02
	}
}

void play_lights_standby()
{
	for (uint8_t i = 0; i < LED_COUNT; i++)
     d6e:	4f 5f       	subi	r20, 0xFF	; 255
     d70:	48 33       	cpi	r20, 0x38	; 56
     d72:	08 f4       	brcc	.+2      	; 0xd76 <play_lights_standby+0x88>
     d74:	be cf       	rjmp	.-132    	; 0xcf2 <play_lights_standby+0x4>
			case 2:
			leds[i].b = MAX_BRIGHTNESS;
			break;
		}
	}
	offset++;
     d76:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
     d80:	68 e3       	ldi	r22, 0x38	; 56
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	88 ed       	ldi	r24, 0xD8	; 216
     d86:	91 e2       	ldi	r25, 0x21	; 33
     d88:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
     d8c:	08 95       	ret

00000d8e <play_lights_free_play>:
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	36 c0       	rjmp	.+108    	; 0xe0c <play_lights_free_play+0x7e>
	{
		leds[(i + offset) % GRUMBO_LED_COUNT] = rainbow_leds[i % RAINBOW_LED_COUNT];
     da0:	00 91 99 21 	lds	r16, 0x2199	; 0x802199 <offset>
     da4:	80 2f       	mov	r24, r16
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	81 0f       	add	r24, r17
     daa:	91 1d       	adc	r25, r1
     dac:	60 e3       	ldi	r22, 0x30	; 48
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
     db4:	ac 01       	movw	r20, r24
     db6:	9b ea       	ldi	r25, 0xAB	; 171
     db8:	19 9f       	mul	r17, r25
     dba:	91 2d       	mov	r25, r1
     dbc:	11 24       	eor	r1, r1
     dbe:	96 95       	lsr	r25
     dc0:	96 95       	lsr	r25
     dc2:	96 95       	lsr	r25
     dc4:	89 2f       	mov	r24, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	98 0f       	add	r25, r24
     dca:	89 2f       	mov	r24, r25
     dcc:	88 0f       	add	r24, r24
     dce:	88 0f       	add	r24, r24
     dd0:	21 2f       	mov	r18, r17
     dd2:	28 1b       	sub	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	da 01       	movw	r26, r20
     dd8:	aa 0f       	add	r26, r26
     dda:	bb 1f       	adc	r27, r27
     ddc:	4a 0f       	add	r20, r26
     dde:	5b 1f       	adc	r21, r27
     de0:	da 01       	movw	r26, r20
     de2:	a8 52       	subi	r26, 0x28	; 40
     de4:	be 4d       	sbci	r27, 0xDE	; 222
     de6:	f9 01       	movw	r30, r18
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	2e 0f       	add	r18, r30
     dee:	3f 1f       	adc	r19, r31
     df0:	f9 01       	movw	r30, r18
     df2:	e5 5d       	subi	r30, 0xD5	; 213
     df4:	ff 4d       	sbci	r31, 0xDF	; 223
     df6:	20 81       	ld	r18, Z
     df8:	31 81       	ldd	r19, Z+1	; 0x01
     dfa:	42 81       	ldd	r20, Z+2	; 0x02
     dfc:	2d 93       	st	X+, r18
     dfe:	3d 93       	st	X+, r19
     e00:	4c 93       	st	X, r20
		
		if (offset == GRUMBO_LED_COUNT)
     e02:	00 33       	cpi	r16, 0x30	; 48
     e04:	11 f4       	brne	.+4      	; 0xe0a <play_lights_free_play+0x7c>
		{
			offset = 0;
     e06:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_free_play(uint16_t dingle_pos, uint8_t buttons)
{
	for (uint8_t i = 0; i < GRUMBO_LED_COUNT; i++)
     e0a:	1f 5f       	subi	r17, 0xFF	; 255
     e0c:	10 33       	cpi	r17, 0x30	; 48
     e0e:	40 f2       	brcs	.-112    	; 0xda0 <play_lights_free_play+0x12>
		if (offset == GRUMBO_LED_COUNT)
		{
			offset = 0;
		}
	}
	offset++;
     e10:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <offset>
		
	play_lights_overlay_note_button_leds(buttons);
     e1a:	8f 2d       	mov	r24, r15
     e1c:	0e 94 99 05 	call	0xb32	; 0xb32 <play_lights_overlay_note_button_leds>
	overlay_dingle_pos(dingle_pos);
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 2a 06 	call	0xc54	; 0xc54 <overlay_dingle_pos>
	ws2812drv_start_transfer(leds, LED_COUNT);
     e26:	68 e3       	ldi	r22, 0x38	; 56
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	88 ed       	ldi	r24, 0xD8	; 216
     e2c:	91 e2       	ldi	r25, 0x21	; 33
     e2e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	08 95       	ret

00000e3e <play_lights_nyan>:



void play_lights_nyan()
{
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
	uint8_t j = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	uint8_t margin = ((half - RAINBOW_LED_COUNT) / 2);
	
	
	if (!(offset % 2))
     e4e:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
     e52:	80 fd       	sbrc	r24, 0
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <play_lights_nyan+0x2e>
	{
		
		if (bump > 0)
     e56:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <bump>
     e5a:	18 16       	cp	r1, r24
     e5c:	24 f4       	brge	.+8      	; 0xe66 <play_lights_nyan+0x28>
		{
			bump = -1;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <bump>
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <play_lights_nyan+0x2e>
		}
		else
		{
			bump = 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <bump>
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	77 c0       	rjmp	.+238    	; 0xf60 <play_lights_nyan+0x122>
		}
	}
	
	for (i = 0; i < half; i++)
	{
		if (i < margin || i >= half - margin)
     e72:	96 30       	cpi	r25, 0x06	; 6
     e74:	28 f0       	brcs	.+10     	; 0xe80 <play_lights_nyan+0x42>
     e76:	a9 2f       	mov	r26, r25
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	a2 31       	cpi	r26, 0x12	; 18
     e7c:	b1 05       	cpc	r27, r1
     e7e:	7c f1       	brlt	.+94     	; 0xede <play_lights_nyan+0xa0>
		{
			
			leds[i + bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     e80:	e9 2f       	mov	r30, r25
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <bump>
     e88:	06 2e       	mov	r0, r22
     e8a:	00 0c       	add	r0, r0
     e8c:	77 0b       	sbc	r23, r23
     e8e:	df 01       	movw	r26, r30
     e90:	a6 0f       	add	r26, r22
     e92:	b7 1f       	adc	r27, r23
     e94:	ed 01       	movw	r28, r26
     e96:	cc 0f       	add	r28, r28
     e98:	dd 1f       	adc	r29, r29
     e9a:	ac 0f       	add	r26, r28
     e9c:	bd 1f       	adc	r27, r29
     e9e:	a8 52       	subi	r26, 0x28	; 40
     ea0:	be 4d       	sbci	r27, 0xDE	; 222
     ea2:	1c 92       	st	X, r1
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	1c 92       	st	X, r1
     ea8:	11 97       	sbiw	r26, 0x01	; 1
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	1c 92       	st	X, r1
     eae:	12 97       	sbiw	r26, 0x02	; 2
     eb0:	1c 92       	st	X, r1
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 92       	st	X, r1
     eb6:	11 97       	sbiw	r26, 0x01	; 1
     eb8:	12 96       	adiw	r26, 0x02	; 2
     eba:	1c 92       	st	X, r1
			leds[i + half - bump] = (ws2812drv_led_t)game_colors[LED_OFF];
     ebc:	78 96       	adiw	r30, 0x18	; 24
     ebe:	e6 1b       	sub	r30, r22
     ec0:	f7 0b       	sbc	r31, r23
     ec2:	bf 01       	movw	r22, r30
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	e6 0f       	add	r30, r22
     eca:	f7 1f       	adc	r31, r23
     ecc:	e8 52       	subi	r30, 0x28	; 40
     ece:	fe 4d       	sbci	r31, 0xDE	; 222
     ed0:	10 82       	st	Z, r1
     ed2:	11 82       	std	Z+1, r1	; 0x01
     ed4:	12 82       	std	Z+2, r1	; 0x02
     ed6:	10 82       	st	Z, r1
     ed8:	11 82       	std	Z+1, r1	; 0x01
     eda:	12 82       	std	Z+2, r1	; 0x02
     edc:	40 c0       	rjmp	.+128    	; 0xf5e <play_lights_nyan+0x120>
		}
		else
		{
			
			leds[i + bump] = 	
     ede:	c0 91 22 20 	lds	r28, 0x2022	; 0x802022 <bump>
     ee2:	0c 2e       	mov	r0, r28
     ee4:	00 0c       	add	r0, r0
     ee6:	dd 0b       	sbc	r29, r29
     ee8:	bd 01       	movw	r22, r26
     eea:	6c 0f       	add	r22, r28
     eec:	7d 1f       	adc	r23, r29
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e1       	ldi	r19, 0x10	; 16
     ef2:	40 e1       	ldi	r20, 0x10	; 16
     ef4:	fb 01       	movw	r30, r22
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	6e 0f       	add	r22, r30
     efc:	7f 1f       	adc	r23, r31
     efe:	fb 01       	movw	r30, r22
     f00:	e8 52       	subi	r30, 0x28	; 40
     f02:	fe 4d       	sbci	r31, 0xDE	; 222
     f04:	20 83       	st	Z, r18
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	42 83       	std	Z+2, r20	; 0x02
				.r = MAX_BRIGHTNESS / 4,
				.g = 0,
				.b = MAX_BRIGHTNESS / 4,
			};
			
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
     f0a:	58 96       	adiw	r26, 0x18	; 24
     f0c:	ac 1b       	sub	r26, r28
     f0e:	bd 0b       	sbc	r27, r29
     f10:	8b ea       	ldi	r24, 0xAB	; 171
     f12:	58 9f       	mul	r21, r24
     f14:	81 2d       	mov	r24, r1
     f16:	11 24       	eor	r1, r1
     f18:	86 95       	lsr	r24
     f1a:	86 95       	lsr	r24
     f1c:	86 95       	lsr	r24
     f1e:	68 2f       	mov	r22, r24
     f20:	66 0f       	add	r22, r22
     f22:	86 0f       	add	r24, r22
     f24:	68 2f       	mov	r22, r24
     f26:	66 0f       	add	r22, r22
     f28:	66 0f       	add	r22, r22
     f2a:	85 2f       	mov	r24, r21
     f2c:	86 1b       	sub	r24, r22
     f2e:	68 2f       	mov	r22, r24
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	fd 01       	movw	r30, r26
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ae 0f       	add	r26, r30
     f3a:	bf 1f       	adc	r27, r31
     f3c:	a8 52       	subi	r26, 0x28	; 40
     f3e:	be 4d       	sbci	r27, 0xDE	; 222
     f40:	fb 01       	movw	r30, r22
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	6e 0f       	add	r22, r30
     f48:	7f 1f       	adc	r23, r31
     f4a:	fb 01       	movw	r30, r22
     f4c:	e5 5d       	subi	r30, 0xD5	; 213
     f4e:	ff 4d       	sbci	r31, 0xDF	; 223
     f50:	60 80       	ld	r6, Z
     f52:	71 80       	ldd	r7, Z+1	; 0x01
     f54:	82 80       	ldd	r8, Z+2	; 0x02
     f56:	6d 92       	st	X+, r6
     f58:	7d 92       	st	X+, r7
     f5a:	8c 92       	st	X, r8
     f5c:	5f 5f       	subi	r21, 0xFF	; 255
		{
			bump = 1;
		}
	}
	
	for (i = 0; i < half; i++)
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	98 31       	cpi	r25, 0x18	; 24
     f62:	08 f4       	brcc	.+2      	; 0xf66 <play_lights_nyan+0x128>
     f64:	86 cf       	rjmp	.-244    	; 0xe72 <play_lights_nyan+0x34>
			leds[i+half  - bump] = rainbow_leds[j++ % RAINBOW_LED_COUNT];
		}
				
	}
	
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f66:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <bump>
     f6a:	08 2e       	mov	r0, r24
     f6c:	00 0c       	add	r0, r0
     f6e:	99 0b       	sbc	r25, r25
     f70:	9c 01       	movw	r18, r24
     f72:	2a 5f       	subi	r18, 0xFA	; 250
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	f9 01       	movw	r30, r18
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	e8 52       	subi	r30, 0x28	; 40
     f82:	fe 4d       	sbci	r31, 0xDE	; 222
     f84:	20 e1       	ldi	r18, 0x10	; 16
     f86:	20 83       	st	Z, r18
     f88:	21 83       	std	Z+1, r18	; 0x01
     f8a:	22 83       	std	Z+2, r18	; 0x02
     f8c:	20 83       	st	Z, r18
     f8e:	21 83       	std	Z+1, r18	; 0x01
     f90:	22 83       	std	Z+2, r18	; 0x02
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     f92:	41 96       	adiw	r24, 0x11	; 17
     f94:	fc 01       	movw	r30, r24
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e8 0f       	add	r30, r24
     f9c:	f9 1f       	adc	r31, r25
     f9e:	e8 52       	subi	r30, 0x28	; 40
     fa0:	fe 4d       	sbci	r31, 0xDE	; 222
     fa2:	20 83       	st	Z, r18
     fa4:	21 83       	std	Z+1, r18	; 0x01
     fa6:	22 83       	std	Z+2, r18	; 0x02
     fa8:	20 83       	st	Z, r18
     faa:	21 83       	std	Z+1, r18	; 0x01
     fac:	22 83       	std	Z+2, r18	; 0x02
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
     fae:	20 e3       	ldi	r18, 0x30	; 48
     fb0:	36 c0       	rjmp	.+108    	; 0x101e <play_lights_nyan+0x1e0>
	{

		if (offset % 23)
     fb2:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <offset>
     fb6:	85 e6       	ldi	r24, 0x65	; 101
     fb8:	38 9f       	mul	r19, r24
     fba:	91 2d       	mov	r25, r1
     fbc:	11 24       	eor	r1, r1
     fbe:	83 2f       	mov	r24, r19
     fc0:	89 1b       	sub	r24, r25
     fc2:	86 95       	lsr	r24
     fc4:	89 0f       	add	r24, r25
     fc6:	82 95       	swap	r24
     fc8:	8f 70       	andi	r24, 0x0F	; 15
     fca:	97 e1       	ldi	r25, 0x17	; 23
     fcc:	89 9f       	mul	r24, r25
     fce:	30 19       	sub	r19, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	33 23       	and	r19, r19
     fd4:	99 f0       	breq	.+38     	; 0xffc <play_lights_nyan+0x1be>
		{
			leds[i] = (ws2812drv_led_t){ .r=0, .g=0, .b = MAX_BRIGHTNESS};
     fd6:	82 2f       	mov	r24, r18
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	c1 2c       	mov	r12, r1
     fdc:	d1 2c       	mov	r13, r1
     fde:	68 94       	set
     fe0:	ee 24       	eor	r14, r14
     fe2:	e6 f8       	bld	r14, 6
     fe4:	fc 01       	movw	r30, r24
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	8e 0f       	add	r24, r30
     fec:	9f 1f       	adc	r25, r31
     fee:	fc 01       	movw	r30, r24
     ff0:	e8 52       	subi	r30, 0x28	; 40
     ff2:	fe 4d       	sbci	r31, 0xDE	; 222
     ff4:	c0 82       	st	Z, r12
     ff6:	d1 82       	std	Z+1, r13	; 0x01
     ff8:	e2 82       	std	Z+2, r14	; 0x02
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <play_lights_nyan+0x1de>
		}
		else
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
     ffc:	e2 2f       	mov	r30, r18
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	cf 01       	movw	r24, r30
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	e8 52       	subi	r30, 0x28	; 40
    100c:	fe 4d       	sbci	r31, 0xDE	; 222
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	80 83       	st	Z, r24
    1012:	81 83       	std	Z+1, r24	; 0x01
    1014:	82 83       	std	Z+2, r24	; 0x02
    1016:	80 83       	st	Z, r24
    1018:	81 83       	std	Z+1, r24	; 0x01
    101a:	82 83       	std	Z+2, r24	; 0x02
	leds[margin + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	leds[(half - margin - 1) + bump] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
	
	
	
	for (i = GRUMBO_LED_COUNT; i < LED_COUNT; i++)
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	28 33       	cpi	r18, 0x38	; 56
    1020:	40 f2       	brcs	.-112    	; 0xfb2 <play_lights_nyan+0x174>
		{
			leds[i] = (ws2812drv_led_t)game_colors[LED_MAX_ON];
		}
	}
	
	offset++;
    1022:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
    102c:	68 e3       	ldi	r22, 0x38	; 56
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	88 ed       	ldi	r24, 0xD8	; 216
    1032:	91 e2       	ldi	r25, 0x21	; 33
    1034:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	8f 90       	pop	r8
    1044:	7f 90       	pop	r7
    1046:	6f 90       	pop	r6
    1048:	08 95       	ret

0000104a <play_lights_portal>:

void play_lights_portal()
{
    104a:	6f 92       	push	r6
    104c:	7f 92       	push	r7
    104e:	8f 92       	push	r8
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t half = GRUMBO_LED_COUNT / 2;
	
	if (offset <= 16)
    105a:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
    105e:	81 31       	cpi	r24, 0x11	; 17
    1060:	30 f4       	brcc	.+12     	; 0x106e <play_lights_portal+0x24>
	{
		bump += 4;
    1062:	90 91 22 20 	lds	r25, 0x2022	; 0x802022 <bump>
    1066:	9c 5f       	subi	r25, 0xFC	; 252
    1068:	90 93 22 20 	sts	0x2022, r25	; 0x802022 <bump>
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <play_lights_portal+0x2e>
	}
	else
	{
		bump -= 4;
    106e:	90 91 22 20 	lds	r25, 0x2022	; 0x802022 <bump>
    1072:	94 50       	subi	r25, 0x04	; 4
    1074:	90 93 22 20 	sts	0x2022, r25	; 0x802022 <bump>
	}
	
	if (offset == 32)
    1078:	80 32       	cpi	r24, 0x20	; 32
    107a:	11 f4       	brne	.+4      	; 0x1080 <play_lights_portal+0x36>
	{
		offset = 0;
    107c:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <offset>
	offset++;
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_portal()
{
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	34 c0       	rjmp	.+104    	; 0x10ec <play_lights_portal+0xa2>
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
			.r = 0,
			.g = ((i * 2) + bump) / 8,
    1084:	2a 2f       	mov	r18, r26
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	44 0f       	add	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <bump>
    1092:	68 2f       	mov	r22, r24
    1094:	88 0f       	add	r24, r24
    1096:	77 0b       	sbc	r23, r23
    1098:	46 0f       	add	r20, r22
    109a:	57 1f       	adc	r21, r23
    109c:	55 23       	and	r21, r21
    109e:	14 f4       	brge	.+4      	; 0x10a4 <play_lights_portal+0x5a>
    10a0:	49 5f       	subi	r20, 0xF9	; 249
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	55 95       	asr	r21
    10aa:	47 95       	ror	r20
    10ac:	55 95       	asr	r21
    10ae:	47 95       	ror	r20
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	86 0f       	add	r24, r22
    10be:	97 1f       	adc	r25, r23
    10c0:	99 23       	and	r25, r25
    10c2:	0c f4       	brge	.+2      	; 0x10c6 <play_lights_portal+0x7c>
    10c4:	03 96       	adiw	r24, 0x03	; 3
    10c6:	95 95       	asr	r25
    10c8:	87 95       	ror	r24
    10ca:	95 95       	asr	r25
    10cc:	87 95       	ror	r24
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i] = (ws2812drv_led_t){
    10ce:	64 2e       	mov	r6, r20
    10d0:	71 2c       	mov	r7, r1
    10d2:	88 2e       	mov	r8, r24
    10d4:	f9 01       	movw	r30, r18
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	2e 0f       	add	r18, r30
    10dc:	3f 1f       	adc	r19, r31
    10de:	f9 01       	movw	r30, r18
    10e0:	e8 52       	subi	r30, 0x28	; 40
    10e2:	fe 4d       	sbci	r31, 0xDE	; 222
    10e4:	60 82       	st	Z, r6
    10e6:	71 82       	std	Z+1, r7	; 0x01
    10e8:	82 82       	std	Z+2, r8	; 0x02
	if (offset == 32)
	{
		offset = 0;
	}
	
	for (i = 0; i < half; i++)
    10ea:	af 5f       	subi	r26, 0xFF	; 255
    10ec:	a8 31       	cpi	r26, 0x18	; 24
    10ee:	50 f2       	brcs	.-108    	; 0x1084 <play_lights_portal+0x3a>
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <play_lights_portal+0x128>
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    10f4:	6a 2f       	mov	r22, r26
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	9b 01       	movw	r18, r22
    10fa:	28 5e       	subi	r18, 0xE8	; 232
    10fc:	3f 4f       	sbci	r19, 0xFF	; 255
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	86 1b       	sub	r24, r22
    1104:	97 0b       	sbc	r25, r23
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	40 91 22 20 	lds	r20, 0x2022	; 0x802022 <bump>
    110e:	84 0f       	add	r24, r20
    1110:	91 1d       	adc	r25, r1
    1112:	47 fd       	sbrc	r20, 7
    1114:	9a 95       	dec	r25
    1116:	fc 01       	movw	r30, r24
    1118:	99 23       	and	r25, r25
    111a:	0c f4       	brge	.+2      	; 0x111e <play_lights_portal+0xd4>
    111c:	33 96       	adiw	r30, 0x03	; 3
    111e:	f5 95       	asr	r31
    1120:	e7 95       	ror	r30
    1122:	f5 95       	asr	r31
    1124:	e7 95       	ror	r30
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
			.r = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 2,
    1126:	ac 01       	movw	r20, r24
    1128:	99 23       	and	r25, r25
    112a:	14 f4       	brge	.+4      	; 0x1130 <play_lights_portal+0xe6>
    112c:	4f 5f       	subi	r20, 0xFF	; 255
    112e:	5f 4f       	sbci	r21, 0xFF	; 255
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
			.g = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4,
			.b = (half-i)/16
    1134:	88 e1       	ldi	r24, 0x18	; 24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	ec 01       	movw	r28, r24
    113a:	c6 1b       	sub	r28, r22
    113c:	d7 0b       	sbc	r29, r23
    113e:	ce 01       	movw	r24, r28
    1140:	0a f4       	brpl	.+2      	; 0x1144 <play_lights_portal+0xfa>
    1142:	0f 96       	adiw	r24, 0x0f	; 15
    1144:	95 95       	asr	r25
    1146:	87 95       	ror	r24
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	95 95       	asr	r25
    114e:	87 95       	ror	r24
    1150:	95 95       	asr	r25
    1152:	87 95       	ror	r24
		
	}
	
	for (i = 0; i < half; i++)
	{
		leds[i + half] = (ws2812drv_led_t){
    1154:	ce 2e       	mov	r12, r30
    1156:	d4 2e       	mov	r13, r20
    1158:	e8 2e       	mov	r14, r24
    115a:	f9 01       	movw	r30, r18
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	2e 0f       	add	r18, r30
    1162:	3f 1f       	adc	r19, r31
    1164:	f9 01       	movw	r30, r18
    1166:	e8 52       	subi	r30, 0x28	; 40
    1168:	fe 4d       	sbci	r31, 0xDE	; 222
    116a:	c0 82       	st	Z, r12
    116c:	d1 82       	std	Z+1, r13	; 0x01
    116e:	e2 82       	std	Z+2, r14	; 0x02
			.b = ((MAX_BRIGHTNESS - (i * 2)) + bump) / 4
		};
		
	}
	
	for (i = 0; i < half; i++)
    1170:	af 5f       	subi	r26, 0xFF	; 255
    1172:	a8 31       	cpi	r26, 0x18	; 24
    1174:	08 f4       	brcc	.+2      	; 0x1178 <play_lights_portal+0x12e>
    1176:	be cf       	rjmp	.-132    	; 0x10f4 <play_lights_portal+0xaa>
			.b = (half-i)/16
		};
			
	}
	
	offset++;
    1178:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <offset>
	ws2812drv_start_transfer(leds, LED_COUNT);
    1182:	68 e3       	ldi	r22, 0x38	; 56
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	88 ed       	ldi	r24, 0xD8	; 216
    1188:	91 e2       	ldi	r25, 0x21	; 33
    118a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	08 95       	ret

000011a0 <play_lights_game>:

void play_lights_game(uint16_t dingle_pos, uint8_t buttons)
{
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	cf 93       	push	r28
    11a8:	c6 2f       	mov	r28, r22
	uint8_t i = 0;
    11aa:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    11ac:	32 c0       	rjmp	.+100    	; 0x1212 <play_lights_game+0x72>
	{
		b_i = i/quarter;
    11ae:	eb ea       	ldi	r30, 0xAB	; 171
    11b0:	4e 9f       	mul	r20, r30
    11b2:	e1 2d       	mov	r30, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	e6 95       	lsr	r30
    11b8:	e6 95       	lsr	r30
    11ba:	e6 95       	lsr	r30
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
    11bc:	24 2f       	mov	r18, r20
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	bf 01       	movw	r22, r30
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	e6 0f       	add	r30, r22
    11ca:	f7 1f       	adc	r31, r23
    11cc:	ec 59       	subi	r30, 0x9C	; 156
    11ce:	ff 4d       	sbci	r31, 0xDF	; 223
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	60 81       	ld	r22, Z
    11d4:	52 81       	ldd	r21, Z+2	; 0x02
    11d6:	c7 2e       	mov	r12, r23
    11d8:	c6 94       	lsr	r12
    11da:	c6 94       	lsr	r12
    11dc:	c6 94       	lsr	r12
    11de:	c6 94       	lsr	r12
    11e0:	c6 94       	lsr	r12
    11e2:	d6 2e       	mov	r13, r22
    11e4:	d6 94       	lsr	r13
    11e6:	d6 94       	lsr	r13
    11e8:	d6 94       	lsr	r13
    11ea:	d6 94       	lsr	r13
    11ec:	d6 94       	lsr	r13
    11ee:	e5 2e       	mov	r14, r21
    11f0:	e6 94       	lsr	r14
    11f2:	e6 94       	lsr	r14
    11f4:	e6 94       	lsr	r14
    11f6:	e6 94       	lsr	r14
    11f8:	e6 94       	lsr	r14
    11fa:	f9 01       	movw	r30, r18
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	2e 0f       	add	r18, r30
    1202:	3f 1f       	adc	r19, r31
    1204:	f9 01       	movw	r30, r18
    1206:	e8 52       	subi	r30, 0x28	; 40
    1208:	fe 4d       	sbci	r31, 0xDE	; 222
    120a:	c0 82       	st	Z, r12
    120c:	d1 82       	std	Z+1, r13	; 0x01
    120e:	e2 82       	std	Z+2, r14	; 0x02
{
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t divisor = 32;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    1210:	4f 5f       	subi	r20, 0xFF	; 255
    1212:	40 33       	cpi	r20, 0x30	; 48
    1214:	60 f2       	brcs	.-104    	; 0x11ae <play_lights_game+0xe>
	{
		b_i = i/quarter;
		leds[i] = (ws2812drv_led_t){game_colors[b_i].r / divisor, game_colors[b_i].g / divisor, game_colors[b_i].b / divisor};
	}	
	
	overlay_dingle_pos(dingle_pos);	
    1216:	0e 94 2a 06 	call	0xc54	; 0xc54 <overlay_dingle_pos>
	play_lights_overlay_note_button_leds(buttons);
    121a:	8c 2f       	mov	r24, r28
    121c:	0e 94 99 05 	call	0xb32	; 0xb32 <play_lights_overlay_note_button_leds>
	ws2812drv_start_transfer(leds, LED_COUNT);
    1220:	68 e3       	ldi	r22, 0x38	; 56
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	88 ed       	ldi	r24, 0xD8	; 216
    1226:	91 e2       	ldi	r25, 0x21	; 33
    1228:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
    122c:	cf 91       	pop	r28
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <play_lights_game_over>:

void play_lights_game_over()
{
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
	uint8_t i = 0;
	ws2812drv_led_t color;
	
	if (!(offset++ % 4))
    123c:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	98 0f       	add	r25, r24
    1244:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <offset>
    1248:	83 70       	andi	r24, 0x03	; 3
    124a:	49 f4       	brne	.+18     	; 0x125e <play_lights_game_over+0x28>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
    124c:	c1 2c       	mov	r12, r1
    124e:	d1 2c       	mov	r13, r1
    1250:	e1 2c       	mov	r14, r1
    1252:	68 94       	set
    1254:	dd 24       	eor	r13, r13
    1256:	d6 f8       	bld	r13, 6
    1258:	e1 2c       	mov	r14, r1
	play_lights_overlay_note_button_leds(buttons);
	ws2812drv_start_transfer(leds, LED_COUNT);
}

void play_lights_game_over()
{
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	12 c0       	rjmp	.+36     	; 0x1282 <play_lights_game_over+0x4c>
	{
		color = (ws2812drv_led_t){.r=MAX_BRIGHTNESS, .g=0, .b=0};
	}
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
    125e:	c1 2c       	mov	r12, r1
    1260:	d1 2c       	mov	r13, r1
    1262:	e1 2c       	mov	r14, r1
    1264:	fa cf       	rjmp	.-12     	; 0x125a <play_lights_game_over+0x24>
	}
	
	for (i = 0; i < LED_COUNT; i++)
	{
		leds[i] = color;
    1266:	82 2f       	mov	r24, r18
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	fc 01       	movw	r30, r24
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	8e 0f       	add	r24, r30
    1272:	9f 1f       	adc	r25, r31
    1274:	fc 01       	movw	r30, r24
    1276:	e8 52       	subi	r30, 0x28	; 40
    1278:	fe 4d       	sbci	r31, 0xDE	; 222
    127a:	c0 82       	st	Z, r12
    127c:	d1 82       	std	Z+1, r13	; 0x01
    127e:	e2 82       	std	Z+2, r14	; 0x02
	else
	{
		color = (ws2812drv_led_t)game_colors[LED_OFF];
	}
	
	for (i = 0; i < LED_COUNT; i++)
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	28 33       	cpi	r18, 0x38	; 56
    1284:	80 f3       	brcs	.-32     	; 0x1266 <play_lights_game_over+0x30>
	{
		leds[i] = color;
	}
	ws2812drv_start_transfer(leds, LED_COUNT);
    1286:	68 e3       	ldi	r22, 0x38	; 56
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	88 ed       	ldi	r24, 0xD8	; 216
    128c:	91 e2       	ldi	r25, 0x21	; 33
    128e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	08 95       	ret

0000129a <play_lights_won_easy_game>:

void play_lights_won_easy_game()
{
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
	
	uint8_t i = 0;
    12a0:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    12a2:	25 c0       	rjmp	.+74     	; 0x12ee <play_lights_won_easy_game+0x54>
	{
		b_i = i/quarter;
    12a4:	8b ea       	ldi	r24, 0xAB	; 171
    12a6:	48 9f       	mul	r20, r24
    12a8:	81 2d       	mov	r24, r1
    12aa:	11 24       	eor	r1, r1
    12ac:	86 95       	lsr	r24
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
		b_i += offset;
    12b2:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <offset>
    12b6:	89 0f       	add	r24, r25
		b_i %= 4;
    12b8:	83 70       	andi	r24, 0x03	; 3
			
		leds[i] = game_colors[b_i];
    12ba:	24 2f       	mov	r18, r20
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	d9 01       	movw	r26, r18
    12c2:	aa 0f       	add	r26, r26
    12c4:	bb 1f       	adc	r27, r27
    12c6:	2a 0f       	add	r18, r26
    12c8:	3b 1f       	adc	r19, r27
    12ca:	d9 01       	movw	r26, r18
    12cc:	a8 52       	subi	r26, 0x28	; 40
    12ce:	be 4d       	sbci	r27, 0xDE	; 222
    12d0:	fc 01       	movw	r30, r24
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	8e 0f       	add	r24, r30
    12d8:	9f 1f       	adc	r25, r31
    12da:	fc 01       	movw	r30, r24
    12dc:	ec 59       	subi	r30, 0x9C	; 156
    12de:	ff 4d       	sbci	r31, 0xDF	; 223
    12e0:	c0 80       	ld	r12, Z
    12e2:	d1 80       	ldd	r13, Z+1	; 0x01
    12e4:	e2 80       	ldd	r14, Z+2	; 0x02
    12e6:	cd 92       	st	X+, r12
    12e8:	dd 92       	st	X+, r13
    12ea:	ec 92       	st	X, r14
{
	
	uint8_t i = 0;
	uint8_t quarter = GRUMBO_LED_COUNT / 4;
	uint8_t b_i;
	for (; i < GRUMBO_LED_COUNT; i++)
    12ec:	4f 5f       	subi	r20, 0xFF	; 255
    12ee:	40 33       	cpi	r20, 0x30	; 48
    12f0:	c8 f2       	brcs	.-78     	; 0x12a4 <play_lights_won_easy_game+0xa>
		b_i %= 4;
			
		leds[i] = game_colors[b_i];
	}
	
	offset++;
    12f2:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <offset>
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <offset>
	
	leds[GRUMBO_LED_COUNT] = game_colors[BUTTON_0];
    12fc:	e8 e6       	ldi	r30, 0x68	; 104
    12fe:	f2 e2       	ldi	r31, 0x22	; 34
    1300:	10 82       	st	Z, r1
    1302:	80 e4       	ldi	r24, 0x40	; 64
    1304:	81 83       	std	Z+1, r24	; 0x01
    1306:	12 82       	std	Z+2, r1	; 0x02
    1308:	10 82       	st	Z, r1
    130a:	81 83       	std	Z+1, r24	; 0x01
    130c:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 1] = game_colors[BUTTON_0];
    130e:	eb e6       	ldi	r30, 0x6B	; 107
    1310:	f2 e2       	ldi	r31, 0x22	; 34
    1312:	10 82       	st	Z, r1
    1314:	81 83       	std	Z+1, r24	; 0x01
    1316:	12 82       	std	Z+2, r1	; 0x02
    1318:	10 82       	st	Z, r1
    131a:	81 83       	std	Z+1, r24	; 0x01
    131c:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 2] = game_colors[BUTTON_1];
    131e:	ee e6       	ldi	r30, 0x6E	; 110
    1320:	f2 e2       	ldi	r31, 0x22	; 34
    1322:	80 83       	st	Z, r24
    1324:	11 82       	std	Z+1, r1	; 0x01
    1326:	12 82       	std	Z+2, r1	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	11 82       	std	Z+1, r1	; 0x01
    132c:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 3] = game_colors[BUTTON_1];
    132e:	e1 e7       	ldi	r30, 0x71	; 113
    1330:	f2 e2       	ldi	r31, 0x22	; 34
    1332:	80 83       	st	Z, r24
    1334:	11 82       	std	Z+1, r1	; 0x01
    1336:	12 82       	std	Z+2, r1	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	11 82       	std	Z+1, r1	; 0x01
    133c:	12 82       	std	Z+2, r1	; 0x02

	leds[GRUMBO_LED_COUNT + 4] = game_colors[BUTTON_2];
    133e:	e4 e7       	ldi	r30, 0x74	; 116
    1340:	f2 e2       	ldi	r31, 0x22	; 34
    1342:	10 82       	st	Z, r1
    1344:	11 82       	std	Z+1, r1	; 0x01
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	10 82       	st	Z, r1
    134a:	11 82       	std	Z+1, r1	; 0x01
    134c:	82 83       	std	Z+2, r24	; 0x02
	leds[GRUMBO_LED_COUNT + 5] = game_colors[BUTTON_2];
    134e:	e7 e7       	ldi	r30, 0x77	; 119
    1350:	f2 e2       	ldi	r31, 0x22	; 34
    1352:	10 82       	st	Z, r1
    1354:	11 82       	std	Z+1, r1	; 0x01
    1356:	82 83       	std	Z+2, r24	; 0x02
    1358:	10 82       	st	Z, r1
    135a:	11 82       	std	Z+1, r1	; 0x01
    135c:	82 83       	std	Z+2, r24	; 0x02

	leds[GRUMBO_LED_COUNT + 6] = game_colors[BUTTON_3];
    135e:	ea e7       	ldi	r30, 0x7A	; 122
    1360:	f2 e2       	ldi	r31, 0x22	; 34
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	80 83       	st	Z, r24
    1366:	81 83       	std	Z+1, r24	; 0x01
    1368:	12 82       	std	Z+2, r1	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	81 83       	std	Z+1, r24	; 0x01
    136e:	12 82       	std	Z+2, r1	; 0x02
	leds[GRUMBO_LED_COUNT + 7] = game_colors[BUTTON_3];
    1370:	ed e7       	ldi	r30, 0x7D	; 125
    1372:	f2 e2       	ldi	r31, 0x22	; 34
    1374:	80 83       	st	Z, r24
    1376:	81 83       	std	Z+1, r24	; 0x01
    1378:	12 82       	std	Z+2, r1	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	81 83       	std	Z+1, r24	; 0x01
    137e:	12 82       	std	Z+2, r1	; 0x02


	ws2812drv_start_transfer(leds, LED_COUNT);
    1380:	68 e3       	ldi	r22, 0x38	; 56
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	88 ed       	ldi	r24, 0xD8	; 216
    1386:	91 e2       	ldi	r25, 0x21	; 33
    1388:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
}
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	08 95       	ret

00001394 <play_lights_easter_egg>:

void play_lights_easter_egg(uint16_t dingle_pos, uint8_t buttons)
{
    1394:	08 95       	ret

00001396 <play_lights_easter_egg_intro>:
	
}

void play_lights_easter_egg_intro()
{
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
	uint8_t i = 0;
    13a0:	20 e0       	ldi	r18, 0x00	; 0
	
	for (;i<GRUMBO_LED_COUNT; i++)
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <play_lights_easter_egg_intro+0x34>
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
    13a4:	82 2f       	mov	r24, r18
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	68 94       	set
    13aa:	cc 24       	eor	r12, r12
    13ac:	c6 f8       	bld	r12, 6
    13ae:	d1 2c       	mov	r13, r1
    13b0:	e1 2c       	mov	r14, r1
    13b2:	fc 01       	movw	r30, r24
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	8e 0f       	add	r24, r30
    13ba:	9f 1f       	adc	r25, r31
    13bc:	fc 01       	movw	r30, r24
    13be:	e8 52       	subi	r30, 0x28	; 40
    13c0:	fe 4d       	sbci	r31, 0xDE	; 222
    13c2:	c0 82       	st	Z, r12
    13c4:	d1 82       	std	Z+1, r13	; 0x01
    13c6:	e2 82       	std	Z+2, r14	; 0x02

void play_lights_easter_egg_intro()
{
	uint8_t i = 0;
	
	for (;i<GRUMBO_LED_COUNT; i++)
    13c8:	2f 5f       	subi	r18, 0xFF	; 255
    13ca:	20 33       	cpi	r18, 0x30	; 48
    13cc:	58 f3       	brcs	.-42     	; 0x13a4 <play_lights_easter_egg_intro+0xe>
    13ce:	24 c0       	rjmp	.+72     	; 0x1418 <play_lights_easter_egg_intro+0x82>
		
	}

	for (;i < LED_COUNT; i++)
	{
		if (i%2)
    13d0:	20 ff       	sbrs	r18, 0
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <play_lights_easter_egg_intro+0x60>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = 0, .b = MAX_BRIGHTNESS};
    13d4:	82 2f       	mov	r24, r18
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e4       	ldi	r27, 0x40	; 64
    13dc:	c0 e4       	ldi	r28, 0x40	; 64
    13de:	fc 01       	movw	r30, r24
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	8e 0f       	add	r24, r30
    13e6:	9f 1f       	adc	r25, r31
    13e8:	fc 01       	movw	r30, r24
    13ea:	e8 52       	subi	r30, 0x28	; 40
    13ec:	fe 4d       	sbci	r31, 0xDE	; 222
    13ee:	a0 83       	st	Z, r26
    13f0:	b1 83       	std	Z+1, r27	; 0x01
    13f2:	c2 83       	std	Z+2, r28	; 0x02
    13f4:	10 c0       	rjmp	.+32     	; 0x1416 <play_lights_easter_egg_intro+0x80>
		}
		else
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
    13f6:	82 2f       	mov	r24, r18
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	40 e4       	ldi	r20, 0x40	; 64
    13fc:	50 e4       	ldi	r21, 0x40	; 64
    13fe:	60 e4       	ldi	r22, 0x40	; 64
    1400:	fc 01       	movw	r30, r24
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	8e 0f       	add	r24, r30
    1408:	9f 1f       	adc	r25, r31
    140a:	fc 01       	movw	r30, r24
    140c:	e8 52       	subi	r30, 0x28	; 40
    140e:	fe 4d       	sbci	r31, 0xDE	; 222
    1410:	40 83       	st	Z, r20
    1412:	51 83       	std	Z+1, r21	; 0x01
    1414:	62 83       	std	Z+2, r22	; 0x02
	{
		leds[i] = (ws2812drv_led_t){.r = 0, .g = MAX_BRIGHTNESS, .b = 0};
		
	}

	for (;i < LED_COUNT; i++)
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	28 33       	cpi	r18, 0x38	; 56
    141a:	d0 f2       	brcs	.-76     	; 0x13d0 <play_lights_easter_egg_intro+0x3a>
		{
			leds[i] = (ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = MAX_BRIGHTNESS};
		}
	}

	offset += 3;
    141c:	20 91 99 21 	lds	r18, 0x2199	; 0x802199 <offset>
    1420:	2d 5f       	subi	r18, 0xFD	; 253
    1422:	20 93 99 21 	sts	0x2199, r18	; 0x802199 <offset>

	leds[offset % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    1426:	8b ea       	ldi	r24, 0xAB	; 171
    1428:	28 9f       	mul	r18, r24
    142a:	81 2d       	mov	r24, r1
    142c:	11 24       	eor	r1, r1
    142e:	82 95       	swap	r24
    1430:	86 95       	lsr	r24
    1432:	87 70       	andi	r24, 0x07	; 7
    1434:	42 2f       	mov	r20, r18
    1436:	90 e3       	ldi	r25, 0x30	; 48
    1438:	89 9f       	mul	r24, r25
    143a:	40 19       	sub	r20, r0
    143c:	11 24       	eor	r1, r1
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e0       	ldi	r26, 0x00	; 0
    1446:	90 e4       	ldi	r25, 0x40	; 64
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	fa 01       	movw	r30, r20
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	4e 0f       	add	r20, r30
    1452:	5f 1f       	adc	r21, r31
    1454:	fa 01       	movw	r30, r20
    1456:	e8 52       	subi	r30, 0x28	; 40
    1458:	fe 4d       	sbci	r31, 0xDE	; 222
    145a:	80 83       	st	Z, r24
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	a2 83       	std	Z+2, r26	; 0x02
	leds[(offset + 1) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	c9 01       	movw	r24, r18
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	c0 e3       	ldi	r28, 0x30	; 48
    1468:	d0 e0       	ldi	r29, 0x00	; 0
    146a:	be 01       	movw	r22, r28
    146c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
    1470:	68 94       	set
    1472:	cc 24       	eor	r12, r12
    1474:	c6 f8       	bld	r12, 6
    1476:	d1 2c       	mov	r13, r1
    1478:	e1 2c       	mov	r14, r1
    147a:	68 94       	set
    147c:	dd 24       	eor	r13, r13
    147e:	d6 f8       	bld	r13, 6
    1480:	e1 2c       	mov	r14, r1
    1482:	fc 01       	movw	r30, r24
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	8e 0f       	add	r24, r30
    148a:	9f 1f       	adc	r25, r31
    148c:	fc 01       	movw	r30, r24
    148e:	e8 52       	subi	r30, 0x28	; 40
    1490:	fe 4d       	sbci	r31, 0xDE	; 222
    1492:	c0 82       	st	Z, r12
    1494:	d1 82       	std	Z+1, r13	; 0x01
    1496:	e2 82       	std	Z+2, r14	; 0x02
	leds[(offset + 2) % GRUMBO_LED_COUNT] =(ws2812drv_led_t){.r = MAX_BRIGHTNESS, .g = MAX_BRIGHTNESS, .b = 0};	
    1498:	c9 01       	movw	r24, r18
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	be 01       	movw	r22, r28
    149e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
    14a2:	20 e4       	ldi	r18, 0x40	; 64
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	30 e4       	ldi	r19, 0x40	; 64
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	fc 01       	movw	r30, r24
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	8e 0f       	add	r24, r30
    14b4:	9f 1f       	adc	r25, r31
    14b6:	fc 01       	movw	r30, r24
    14b8:	e8 52       	subi	r30, 0x28	; 40
    14ba:	fe 4d       	sbci	r31, 0xDE	; 222
    14bc:	20 83       	st	Z, r18
    14be:	31 83       	std	Z+1, r19	; 0x01
    14c0:	42 83       	std	Z+2, r20	; 0x02
		
	ws2812drv_start_transfer(leds, LED_COUNT);
    14c2:	68 e3       	ldi	r22, 0x38	; 56
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	88 ed       	ldi	r24, 0xD8	; 216
    14c8:	91 e2       	ldi	r25, 0x21	; 33
    14ca:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ws2812drv_start_transfer>
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <clk_init>:

	}

	return note_buttons;	
	
}
    14da:	88 ed       	ldi	r24, 0xD8	; 216
    14dc:	84 bf       	out	0x34, r24	; 52
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
    14e4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
    14e8:	81 ff       	sbrs	r24, 1
    14ea:	fc cf       	rjmp	.-8      	; 0x14e4 <clk_init+0xa>
    14ec:	88 ed       	ldi	r24, 0xD8	; 216
    14ee:	84 bf       	out	0x34, r24	; 52
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
    14f6:	84 bf       	out	0x34, r24	; 52
    14f8:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x7fb041>
    14fc:	08 95       	ret

000014fe <interrupt_init>:
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
    1504:	08 95       	ret

00001506 <io_init>:
    1506:	e0 e0       	ldi	r30, 0x00	; 0
    1508:	f6 e0       	ldi	r31, 0x06	; 6
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	82 83       	std	Z+2, r24	; 0x02
    150e:	88 e1       	ldi	r24, 0x18	; 24
    1510:	80 8b       	std	Z+16, r24	; 0x10
    1512:	a0 e6       	ldi	r26, 0x60	; 96
    1514:	b6 e0       	ldi	r27, 0x06	; 6
    1516:	80 ee       	ldi	r24, 0xE0	; 224
    1518:	11 96       	adiw	r26, 0x01	; 1
    151a:	8c 93       	st	X, r24
    151c:	11 97       	sbiw	r26, 0x01	; 1
    151e:	16 96       	adiw	r26, 0x06	; 6
    1520:	8c 93       	st	X, r24
    1522:	a0 e4       	ldi	r26, 0x40	; 64
    1524:	b6 e0       	ldi	r27, 0x06	; 6
    1526:	80 e8       	ldi	r24, 0x80	; 128
    1528:	11 96       	adiw	r26, 0x01	; 1
    152a:	8c 93       	st	X, r24
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	16 96       	adiw	r26, 0x06	; 6
    1530:	8c 93       	st	X, r24
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	81 83       	std	Z+1, r24	; 0x01
    1536:	08 95       	ret

00001538 <note_buttons_init>:
    1538:	80 e8       	ldi	r24, 0x80	; 128
    153a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
    153e:	e0 e0       	ldi	r30, 0x00	; 0
    1540:	f6 e0       	ldi	r31, 0x06	; 6
    1542:	80 ef       	ldi	r24, 0xF0	; 240
    1544:	82 83       	std	Z+2, r24	; 0x02
    1546:	88 e1       	ldi	r24, 0x18	; 24
    1548:	84 8b       	std	Z+20, r24	; 0x14
    154a:	85 8b       	std	Z+21, r24	; 0x15
    154c:	86 8b       	std	Z+22, r24	; 0x16
    154e:	87 8b       	std	Z+23, r24	; 0x17
    1550:	08 95       	ret

00001552 <dingle_input_init>:
    1552:	0e 94 55 05 	call	0xaaa	; 0xaaa <expander_init>
    1556:	08 95       	ret

00001558 <song_out_init>:
    1558:	80 e1       	ldi	r24, 0x10	; 16
    155a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
    155e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
    1568:	08 95       	ret

0000156a <start_up>:
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	a2 97       	sbiw	r28, 0x22	; 34
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	71 f1       	breq	.+92     	; 0x15d8 <start_up+0x6e>
    157c:	20 f4       	brcc	.+8      	; 0x1586 <start_up+0x1c>
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <start_up+0x38>
    1582:	60 f0       	brcs	.+24     	; 0x159c <start_up+0x32>
    1584:	1a c0       	rjmp	.+52     	; 0x15ba <start_up+0x50>
    1586:	85 30       	cpi	r24, 0x05	; 5
    1588:	09 f4       	brne	.+2      	; 0x158c <start_up+0x22>
    158a:	97 c0       	rjmp	.+302    	; 0x16ba <start_up+0x150>
    158c:	a0 f1       	brcs	.+104    	; 0x15f6 <start_up+0x8c>
    158e:	86 30       	cpi	r24, 0x06	; 6
    1590:	09 f4       	brne	.+2      	; 0x1594 <start_up+0x2a>
    1592:	f6 c0       	rjmp	.+492    	; 0x1780 <start_up+0x216>
    1594:	8f 3e       	cpi	r24, 0xEF	; 239
    1596:	09 f4       	brne	.+2      	; 0x159a <start_up+0x30>
    1598:	fd c0       	rjmp	.+506    	; 0x1794 <start_up+0x22a>
    159a:	59 c1       	rjmp	.+690    	; 0x184e <start_up+0x2e4>
    159c:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    15a0:	56 c1       	rjmp	.+684    	; 0x184e <start_up+0x2e4>
    15a2:	80 e1       	ldi	r24, 0x10	; 16
    15a4:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
    15a8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <note_buttons_init>
    15ac:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <note_player_init>
    15b0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <dingle_input_init>
    15b4:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    15b8:	4a c1       	rjmp	.+660    	; 0x184e <start_up+0x2e4>
    15ba:	80 e1       	ldi	r24, 0x10	; 16
    15bc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
    15c0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <note_buttons_init>
    15c4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <note_player_init>
    15c8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <dingle_input_init>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 a5 02 	call	0x54a	; 0x54a <games_init>
    15d2:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    15d6:	3b c1       	rjmp	.+630    	; 0x184e <start_up+0x2e4>
    15d8:	80 e1       	ldi	r24, 0x10	; 16
    15da:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
    15de:	0e 94 9c 0a 	call	0x1538	; 0x1538 <note_buttons_init>
    15e2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <note_player_init>
    15e6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <dingle_input_init>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 a5 02 	call	0x54a	; 0x54a <games_init>
    15f0:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    15f4:	2c c1       	rjmp	.+600    	; 0x184e <start_up+0x2e4>
    15f6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <song_out_init>
    15fa:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    15fe:	8b ed       	ldi	r24, 0xDB	; 219
    1600:	95 e3       	ldi	r25, 0x35	; 53
    1602:	89 a3       	std	Y+33, r24	; 0x21
    1604:	9a a3       	std	Y+34, r25	; 0x22
    1606:	8c e5       	ldi	r24, 0x5C	; 92
    1608:	93 e0       	ldi	r25, 0x03	; 3
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	8f e1       	ldi	r24, 0x1F	; 31
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	88 e5       	ldi	r24, 0x58	; 88
    1618:	93 e0       	ldi	r25, 0x03	; 3
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	8f 83       	std	Y+7, r24	; 0x07
    1624:	98 87       	std	Y+8, r25	; 0x08
    1626:	84 e8       	ldi	r24, 0x84	; 132
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	89 87       	std	Y+9, r24	; 0x09
    162c:	9a 87       	std	Y+10, r25	; 0x0a
    162e:	84 ed       	ldi	r24, 0xD4	; 212
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	8b 87       	std	Y+11, r24	; 0x0b
    1634:	9c 87       	std	Y+12, r25	; 0x0c
    1636:	89 e6       	ldi	r24, 0x69	; 105
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	8d 87       	std	Y+13, r24	; 0x0d
    163c:	9e 87       	std	Y+14, r25	; 0x0e
    163e:	8b e1       	ldi	r24, 0x1B	; 27
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    1644:	98 8b       	std	Y+16, r25	; 0x10
    1646:	87 e6       	ldi	r24, 0x67	; 103
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	89 8b       	std	Y+17, r24	; 0x11
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	8b 8b       	std	Y+19, r24	; 0x13
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	86 e6       	ldi	r24, 0x66	; 102
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	8d 8b       	std	Y+21, r24	; 0x15
    165c:	9e 8b       	std	Y+22, r25	; 0x16
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	8f 8b       	std	Y+23, r24	; 0x17
    1664:	98 8f       	std	Y+24, r25	; 0x18
    1666:	85 e5       	ldi	r24, 0x55	; 85
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	89 8f       	std	Y+25, r24	; 0x19
    166c:	9a 8f       	std	Y+26, r25	; 0x1a
    166e:	81 e1       	ldi	r24, 0x11	; 17
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	8b 8f       	std	Y+27, r24	; 0x1b
    1674:	9c 8f       	std	Y+28, r25	; 0x1c
    1676:	82 e5       	ldi	r24, 0x52	; 82
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	8d 8f       	std	Y+29, r24	; 0x1d
    167c:	9e 8f       	std	Y+30, r25	; 0x1e
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	8f 8f       	std	Y+31, r24	; 0x1f
    1684:	98 a3       	std	Y+32, r25	; 0x20
    1686:	8f e1       	ldi	r24, 0x1F	; 31
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	9f 93       	push	r25
    168c:	8f 93       	push	r24
    168e:	8d b7       	in	r24, 0x3d	; 61
    1690:	9e b7       	in	r25, 0x3e	; 62
    1692:	82 97       	sbiw	r24, 0x22	; 34
    1694:	8d bf       	out	0x3d, r24	; 61
    1696:	9e bf       	out	0x3e, r25	; 62
    1698:	ad b7       	in	r26, 0x3d	; 61
    169a:	be b7       	in	r27, 0x3e	; 62
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	82 e2       	ldi	r24, 0x22	; 34
    16a0:	fe 01       	movw	r30, r28
    16a2:	31 96       	adiw	r30, 0x01	; 1
    16a4:	01 90       	ld	r0, Z+
    16a6:	0d 92       	st	X+, r0
    16a8:	8a 95       	dec	r24
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <start_up+0x13a>
    16ac:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <song_player_init>
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <song_start>
    16b8:	ca c0       	rjmp	.+404    	; 0x184e <start_up+0x2e4>
    16ba:	0e 94 8d 10 	call	0x211a	; 0x211a <get_allow_portal>
    16be:	88 23       	and	r24, r24
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <start_up+0x15a>
    16c2:	c5 c0       	rjmp	.+394    	; 0x184e <start_up+0x2e4>
    16c4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <song_out_init>
    16c8:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    16cc:	89 e0       	ldi	r24, 0x09	; 9
    16ce:	9d e3       	ldi	r25, 0x3D	; 61
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	9a a3       	std	Y+34, r25	; 0x22
    16d4:	8e e4       	ldi	r24, 0x4E	; 78
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	84 e0       	ldi	r24, 0x04	; 4
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8d e4       	ldi	r24, 0x4D	; 77
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	8f 83       	std	Y+7, r24	; 0x07
    16f2:	98 87       	std	Y+8, r25	; 0x08
    16f4:	20 ec       	ldi	r18, 0xC0	; 192
    16f6:	31 e0       	ldi	r19, 0x01	; 1
    16f8:	29 87       	std	Y+9, r18	; 0x09
    16fa:	3a 87       	std	Y+10, r19	; 0x0a
    16fc:	2d e8       	ldi	r18, 0x8D	; 141
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	2b 87       	std	Y+11, r18	; 0x0b
    1702:	3c 87       	std	Y+12, r19	; 0x0c
    1704:	2e ea       	ldi	r18, 0xAE	; 174
    1706:	31 e0       	ldi	r19, 0x01	; 1
    1708:	2d 87       	std	Y+13, r18	; 0x0d
    170a:	3e 87       	std	Y+14, r19	; 0x0e
    170c:	22 e1       	ldi	r18, 0x12	; 18
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	2f 87       	std	Y+15, r18	; 0x0f
    1712:	38 8b       	std	Y+16, r19	; 0x10
    1714:	2d ea       	ldi	r18, 0xAD	; 173
    1716:	31 e0       	ldi	r19, 0x01	; 1
    1718:	29 8b       	std	Y+17, r18	; 0x11
    171a:	3a 8b       	std	Y+18, r19	; 0x12
    171c:	8b 8b       	std	Y+19, r24	; 0x13
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	2c ea       	ldi	r18, 0xAC	; 172
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	2d 8b       	std	Y+21, r18	; 0x15
    1726:	3e 8b       	std	Y+22, r19	; 0x16
    1728:	8f 8b       	std	Y+23, r24	; 0x17
    172a:	98 8f       	std	Y+24, r25	; 0x18
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	89 8f       	std	Y+25, r24	; 0x19
    1732:	9a 8f       	std	Y+26, r25	; 0x1a
    1734:	8a ea       	ldi	r24, 0xAA	; 170
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	8b 8f       	std	Y+27, r24	; 0x1b
    173a:	9c 8f       	std	Y+28, r25	; 0x1c
    173c:	8c ee       	ldi	r24, 0xEC	; 236
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	8d 8f       	std	Y+29, r24	; 0x1d
    1742:	9e 8f       	std	Y+30, r25	; 0x1e
    1744:	86 e1       	ldi	r24, 0x16	; 22
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	8f 8f       	std	Y+31, r24	; 0x1f
    174a:	98 a3       	std	Y+32, r25	; 0x20
    174c:	85 e2       	ldi	r24, 0x25	; 37
    174e:	98 e0       	ldi	r25, 0x08	; 8
    1750:	9f 93       	push	r25
    1752:	8f 93       	push	r24
    1754:	8d b7       	in	r24, 0x3d	; 61
    1756:	9e b7       	in	r25, 0x3e	; 62
    1758:	82 97       	sbiw	r24, 0x22	; 34
    175a:	8d bf       	out	0x3d, r24	; 61
    175c:	9e bf       	out	0x3e, r25	; 62
    175e:	ad b7       	in	r26, 0x3d	; 61
    1760:	be b7       	in	r27, 0x3e	; 62
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	82 e2       	ldi	r24, 0x22	; 34
    1766:	fe 01       	movw	r30, r28
    1768:	31 96       	adiw	r30, 0x01	; 1
    176a:	01 90       	ld	r0, Z+
    176c:	0d 92       	st	X+, r0
    176e:	8a 95       	dec	r24
    1770:	e1 f7       	brne	.-8      	; 0x176a <start_up+0x200>
    1772:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <song_player_init>
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <song_start>
    177e:	67 c0       	rjmp	.+206    	; 0x184e <start_up+0x2e4>
    1780:	0e 94 9b 10 	call	0x2136	; 0x2136 <get_allow_easter_egg>
    1784:	88 23       	and	r24, r24
    1786:	09 f4       	brne	.+2      	; 0x178a <start_up+0x220>
    1788:	62 c0       	rjmp	.+196    	; 0x184e <start_up+0x2e4>
    178a:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    178e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <note_buttons_init>
    1792:	5d c0       	rjmp	.+186    	; 0x184e <start_up+0x2e4>
    1794:	0e 94 ac 0a 	call	0x1558	; 0x1558 <song_out_init>
    1798:	0e 94 14 11 	call	0x2228	; 0x2228 <ws2812drv_init>
    179c:	89 e0       	ldi	r24, 0x09	; 9
    179e:	9d e3       	ldi	r25, 0x3D	; 61
    17a0:	89 a3       	std	Y+33, r24	; 0x21
    17a2:	9a a3       	std	Y+34, r25	; 0x22
    17a4:	8b ee       	ldi	r24, 0xEB	; 235
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	2a ee       	ldi	r18, 0xEA	; 234
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	2d 83       	std	Y+5, r18	; 0x05
    17ba:	3e 83       	std	Y+6, r19	; 0x06
    17bc:	8f 83       	std	Y+7, r24	; 0x07
    17be:	98 87       	std	Y+8, r25	; 0x08
    17c0:	25 ed       	ldi	r18, 0xD5	; 213
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	29 87       	std	Y+9, r18	; 0x09
    17c6:	3a 87       	std	Y+10, r19	; 0x0a
    17c8:	25 e1       	ldi	r18, 0x15	; 21
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	2b 87       	std	Y+11, r18	; 0x0b
    17ce:	3c 87       	std	Y+12, r19	; 0x0c
    17d0:	22 ed       	ldi	r18, 0xD2	; 210
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	2d 87       	std	Y+13, r18	; 0x0d
    17d6:	3e 87       	std	Y+14, r19	; 0x0e
    17d8:	23 e0       	ldi	r18, 0x03	; 3
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	2f 87       	std	Y+15, r18	; 0x0f
    17de:	38 8b       	std	Y+16, r19	; 0x10
    17e0:	21 ed       	ldi	r18, 0xD1	; 209
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	29 8b       	std	Y+17, r18	; 0x11
    17e6:	3a 8b       	std	Y+18, r19	; 0x12
    17e8:	8b 8b       	std	Y+19, r24	; 0x13
    17ea:	9c 8b       	std	Y+20, r25	; 0x14
    17ec:	20 ed       	ldi	r18, 0xD0	; 208
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	2d 8b       	std	Y+21, r18	; 0x15
    17f2:	3e 8b       	std	Y+22, r19	; 0x16
    17f4:	8f 8b       	std	Y+23, r24	; 0x17
    17f6:	98 8f       	std	Y+24, r25	; 0x18
    17f8:	80 eb       	ldi	r24, 0xB0	; 176
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	89 8f       	std	Y+25, r24	; 0x19
    17fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	8b 8f       	std	Y+27, r24	; 0x1b
    1806:	9c 8f       	std	Y+28, r25	; 0x1c
    1808:	8c ea       	ldi	r24, 0xAC	; 172
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	8d 8f       	std	Y+29, r24	; 0x1d
    180e:	9e 8f       	std	Y+30, r25	; 0x1e
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	8f 8f       	std	Y+31, r24	; 0x1f
    1816:	98 a3       	std	Y+32, r25	; 0x20
    1818:	8b ec       	ldi	r24, 0xCB	; 203
    181a:	99 e0       	ldi	r25, 0x09	; 9
    181c:	9f 93       	push	r25
    181e:	8f 93       	push	r24
    1820:	8d b7       	in	r24, 0x3d	; 61
    1822:	9e b7       	in	r25, 0x3e	; 62
    1824:	82 97       	sbiw	r24, 0x22	; 34
    1826:	8d bf       	out	0x3d, r24	; 61
    1828:	9e bf       	out	0x3e, r25	; 62
    182a:	ad b7       	in	r26, 0x3d	; 61
    182c:	be b7       	in	r27, 0x3e	; 62
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	82 e2       	ldi	r24, 0x22	; 34
    1832:	fe 01       	movw	r30, r28
    1834:	31 96       	adiw	r30, 0x01	; 1
    1836:	01 90       	ld	r0, Z+
    1838:	0d 92       	st	X+, r0
    183a:	8a 95       	dec	r24
    183c:	e1 f7       	brne	.-8      	; 0x1836 <start_up+0x2cc>
    183e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <song_player_init>
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	8b e0       	ldi	r24, 0x0B	; 11
    1848:	91 e1       	ldi	r25, 0x11	; 17
    184a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <song_play_once>
    184e:	a2 96       	adiw	r28, 0x22	; 34
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <check_start_mode_pin>:
    185a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    185e:	80 fd       	sbrc	r24, 0
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <check_start_mode_pin+0x2e>
    1862:	2f ef       	ldi	r18, 0xFF	; 255
    1864:	80 e7       	ldi	r24, 0x70	; 112
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	80 40       	sbci	r24, 0x00	; 0
    186c:	90 40       	sbci	r25, 0x00	; 0
    186e:	e1 f7       	brne	.-8      	; 0x1868 <check_start_mode_pin+0xe>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <check_start_mode_pin+0x18>
    1872:	00 00       	nop
    1874:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1878:	80 fd       	sbrc	r24, 0
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <check_start_mode_pin+0x2e>
    187c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1880:	80 ff       	sbrs	r24, 0
    1882:	fc cf       	rjmp	.-8      	; 0x187c <check_start_mode_pin+0x22>
    1884:	0e 94 0b 11 	call	0x2216	; 0x2216 <next_start_mode>
    1888:	08 95       	ret

0000188a <set_startup_mode_lights>:
    188a:	98 2f       	mov	r25, r24
    188c:	e0 e6       	ldi	r30, 0x60	; 96
    188e:	f6 e0       	ldi	r31, 0x06	; 6
    1890:	84 81       	ldd	r24, Z+4	; 0x04
    1892:	28 2f       	mov	r18, r24
    1894:	2f 71       	andi	r18, 0x1F	; 31
    1896:	89 2f       	mov	r24, r25
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	82 95       	swap	r24
    18a2:	92 95       	swap	r25
    18a4:	90 7f       	andi	r25, 0xF0	; 240
    18a6:	98 27       	eor	r25, r24
    18a8:	80 7f       	andi	r24, 0xF0	; 240
    18aa:	98 27       	eor	r25, r24
    18ac:	82 2b       	or	r24, r18
    18ae:	84 83       	std	Z+4, r24	; 0x04
    18b0:	08 95       	ret

000018b2 <get_note_buttons>:
    18b2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	80 95       	com	r24
    18ba:	90 95       	com	r25
    18bc:	80 7f       	andi	r24, 0xF0	; 240
    18be:	99 27       	eor	r25, r25
    18c0:	95 95       	asr	r25
    18c2:	87 95       	ror	r24
    18c4:	95 95       	asr	r25
    18c6:	87 95       	ror	r24
    18c8:	95 95       	asr	r25
    18ca:	87 95       	ror	r24
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	08 95       	ret

000018d2 <check_play_note>:
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <get_note_buttons>
    18da:	c8 2f       	mov	r28, r24
    18dc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <expander_get_val_changed>
    18e0:	d8 2f       	mov	r29, r24
    18e2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <note_player_playing>
    18e6:	cc 23       	and	r28, r28
    18e8:	11 f1       	breq	.+68     	; 0x192e <check_play_note+0x5c>
    18ea:	dd 23       	and	r29, r29
    18ec:	01 f1       	breq	.+64     	; 0x192e <check_play_note+0x5c>
    18ee:	81 11       	cpse	r24, r1
    18f0:	1e c0       	rjmp	.+60     	; 0x192e <check_play_note+0x5c>
    18f2:	8c 2f       	mov	r24, r28
    18f4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_play>
    18f8:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <easter_egg_index>
    18fc:	e8 2f       	mov	r30, r24
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	ec 5d       	subi	r30, 0xDC	; 220
    1902:	ff 4d       	sbci	r31, 0xDF	; 223
    1904:	90 81       	ld	r25, Z
    1906:	c9 13       	cpse	r28, r25
    1908:	10 c0       	rjmp	.+32     	; 0x192a <check_play_note+0x58>
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <easter_egg_index>
    1910:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <easter_egg_size>
    1914:	89 13       	cpse	r24, r25
    1916:	0b c0       	rjmp	.+22     	; 0x192e <check_play_note+0x5c>
    1918:	85 e5       	ldi	r24, 0x55	; 85
    191a:	0e 94 9e 10 	call	0x213c	; 0x213c <set_allow_easter_egg>
    191e:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <easter_egg_index>
    1922:	8f ee       	ldi	r24, 0xEF	; 239
    1924:	0e 94 da 10 	call	0x21b4	; 0x21b4 <set_start_mode>
    1928:	02 c0       	rjmp	.+4      	; 0x192e <check_play_note+0x5c>
    192a:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <easter_egg_index>
    192e:	8c 2f       	mov	r24, r28
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <main>:
int main(void)
{
	uint8_t note_buttons;
	
	//Debug pin
	PORTA.DIRSET = PIN3_bm;
    1936:	e0 e0       	ldi	r30, 0x00	; 0
    1938:	f6 e0       	ldi	r31, 0x06	; 6
    193a:	88 e0       	ldi	r24, 0x08	; 8
    193c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN3_bm;
    193e:	86 83       	std	Z+6, r24	; 0x06
			
	cli();
    1940:	f8 94       	cli
	clk_init();
    1942:	0e 94 6d 0a 	call	0x14da	; 0x14da <clk_init>
	interrupt_init();
    1946:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <interrupt_init>
	sei();
    194a:	78 94       	sei
		
	io_init();
    194c:	0e 94 83 0a 	call	0x1506	; 0x1506 <io_init>
	expander_init();
    1950:	0e 94 55 05 	call	0xaaa	; 0xaaa <expander_init>
	
	//Hold until the pin is released.
	while (!(PORTA.IN & PIN0_bm));
    1954:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
    1958:	80 ff       	sbrs	r24, 0
    195a:	fc cf       	rjmp	.-8      	; 0x1954 <main+0x1e>

	start_mode_init();
    195c:	0e 94 b8 10 	call	0x2170	; 0x2170 <start_mode_init>
	set_startup_mode_lights(get_start_mode());
    1960:	0e 94 a9 10 	call	0x2152	; 0x2152 <get_start_mode>
    1964:	0e 94 45 0c 	call	0x188a	; 0x188a <set_startup_mode_lights>
	start_up(get_start_mode());	
    1968:	0e 94 a9 10 	call	0x2152	; 0x2152 <get_start_mode>
    196c:	0e 94 b5 0a 	call	0x156a	; 0x156a <start_up>
	reset_start_mode_in_eeprom();
    1970:	0e 94 ac 10 	call	0x2158	; 0x2158 <reset_start_mode_in_eeprom>

    /* Replace with your application code */
    while (1) 
    {
		//TEMP: move to interrupt handler
		check_start_mode_pin();
    1974:	0e 94 2d 0c 	call	0x185a	; 0x185a <check_start_mode_pin>
		if (display_ctr >= 10)
    1978:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <display_ctr>
    197c:	90 91 9c 21 	lds	r25, 0x219C	; 0x80219c <display_ctr+0x1>
    1980:	0a 97       	sbiw	r24, 0x0a	; 10
    1982:	c0 f3       	brcs	.-16     	; 0x1974 <main+0x3e>
		{		PORTA.OUTTGL = PIN3_bm;
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
			switch (get_start_mode())
    198a:	0e 94 a9 10 	call	0x2152	; 0x2152 <get_start_mode>
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	38 f4       	brcc	.+14     	; 0x19a0 <main+0x6a>
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	98 f4       	brcc	.+38     	; 0x19bc <main+0x86>
    1996:	88 23       	and	r24, r24
    1998:	31 f0       	breq	.+12     	; 0x19a6 <main+0x70>
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	31 f0       	breq	.+12     	; 0x19aa <main+0x74>
    199e:	1b c0       	rjmp	.+54     	; 0x19d6 <main+0xa0>
    19a0:	86 30       	cpi	r24, 0x06	; 6
    19a2:	89 f0       	breq	.+34     	; 0x19c6 <main+0x90>
    19a4:	18 c0       	rjmp	.+48     	; 0x19d6 <main+0xa0>
			{
				case STANDBY_sm:
					play_lights_standby();
    19a6:	0e 94 77 06 	call	0xcee	; 0xcee <play_lights_standby>
				case FREEPLAY_sm:
					note_buttons = check_play_note();
    19aa:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <check_play_note>
    19ae:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
 					play_lights_free_play(expander_get_last_value(), note_buttons);
    19b0:	0e 94 76 05 	call	0xaec	; 0xaec <expander_get_last_value>
    19b4:	6c 2f       	mov	r22, r28
    19b6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <play_lights_free_play>

					break;
    19ba:	0d c0       	rjmp	.+26     	; 0x19d6 <main+0xa0>
				case GAME_EASY_sm:					
				case GAME_HARD_sm:
					games_step(get_note_buttons());
    19bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <get_note_buttons>
    19c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <games_step>
					break;
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <main+0xa0>
				case EASTER_EGG_sm:
					note_buttons = check_play_note();
    19c6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <check_play_note>
    19ca:	c8 2f       	mov	r28, r24
					//Use the LED array, the last value from the dingle pos, and the note buttons
					play_lights_easter_egg(expander_get_last_value(), note_buttons);	
    19cc:	0e 94 76 05 	call	0xaec	; 0xaec <expander_get_last_value>
    19d0:	6c 2f       	mov	r22, r28
    19d2:	0e 94 ca 09 	call	0x1394	; 0x1394 <play_lights_easter_egg>
					break;
			}
			display_ctr = 0;
    19d6:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <display_ctr>
    19da:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <display_ctr+0x1>
    19de:	ca cf       	rjmp	.-108    	; 0x1974 <main+0x3e>

000019e0 <__vector_12>:

    }
}

ISR(TCC4_OVF_vect)
{
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
// 	PORTA.OUTTGL = PIN3_bm;
	song_interrupt_handler();
    1a02:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <song_interrupt_handler>
}
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	4f 93       	push	r20
    1a38:	5f 93       	push	r21
    1a3a:	6f 93       	push	r22
    1a3c:	7f 93       	push	r23
    1a3e:	8f 93       	push	r24
    1a40:	9f 93       	push	r25
    1a42:	af 93       	push	r26
    1a44:	bf 93       	push	r27
    1a46:	ef 93       	push	r30
    1a48:	ff 93       	push	r31
	note_interrupt_handler();
    1a4a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <note_interrupt_handler>
}
    1a4e:	ff 91       	pop	r31
    1a50:	ef 91       	pop	r30
    1a52:	bf 91       	pop	r27
    1a54:	af 91       	pop	r26
    1a56:	9f 91       	pop	r25
    1a58:	8f 91       	pop	r24
    1a5a:	7f 91       	pop	r23
    1a5c:	6f 91       	pop	r22
    1a5e:	5f 91       	pop	r21
    1a60:	4f 91       	pop	r20
    1a62:	3f 91       	pop	r19
    1a64:	2f 91       	pop	r18
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_38>:

ISR(TCD5_CCA_vect)
{
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
	display_ctr++;
    1a7e:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <display_ctr>
    1a82:	90 91 9c 21 	lds	r25, 0x219C	; 0x80219c <display_ctr+0x1>
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <display_ctr>
    1a8c:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <display_ctr+0x1>
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <note_timer_C5_init>:
uint8_t playing = 0;


void note_timer_C5_init()
{
	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1a9e:	e0 e4       	ldi	r30, 0x40	; 64
    1aa0:	f8 e0       	ldi	r31, 0x08	; 8
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc;
    1aa6:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	80 83       	st	Z, r24
    1aac:	08 95       	ret

00001aae <sys_timer_D5_init>:
}

void sys_timer_D5_init()
{
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1aae:	e0 e4       	ldi	r30, 0x40	; 64
    1ab0:	f9 e0       	ldi	r31, 0x09	; 9
    1ab2:	11 82       	std	Z+1, r1	; 0x01
	TCD5.CTRLE = 0;
    1ab4:	14 82       	std	Z+4, r1	; 0x04
	TCD5.INTCTRLB = TC_OVFINTLVL_HI_gc;
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	87 83       	std	Z+7, r24	; 0x07
	TCD5.CTRLA = TC_CLKSEL_DIV1024_gc;
    1aba:	87 e0       	ldi	r24, 0x07	; 7
    1abc:	80 83       	st	Z, r24
	TCD5.PER = 312; //100Hz
    1abe:	88 e3       	ldi	r24, 0x38	; 56
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	86 a3       	std	Z+38, r24	; 0x26
    1ac4:	97 a3       	std	Z+39, r25	; 0x27
    1ac6:	08 95       	ret

00001ac8 <note_decay_init>:
}

void note_decay_init()
{
	////////////////////////////////////////// Timer and Event config ?
	EVSYS.CH1MUX =
    1ac8:	80 ec       	ldi	r24, 0xC0	; 192
    1aca:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <__TEXT_REGION_LENGTH__+0x7fb181>
	EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch1 = tcc4 overflow
	TCC4.PER = 1200;
    1ace:	e0 e0       	ldi	r30, 0x00	; 0
    1ad0:	f8 e0       	ldi	r31, 0x08	; 8
    1ad2:	80 eb       	ldi	r24, 0xB0	; 176
    1ad4:	94 e0       	ldi	r25, 0x04	; 4
    1ad6:	86 a3       	std	Z+38, r24	; 0x26
    1ad8:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CTRLA = TC_CLKSEL_DIV1024_gc;
    1ada:	87 e0       	ldi	r24, 0x07	; 7
    1adc:	80 83       	st	Z, r24
	
	////////////////////////////////////////// DAC config
	DACA.CTRLB =
    1ade:	e0 e0       	ldi	r30, 0x00	; 0
    1ae0:	f3 e0       	ldi	r31, 0x03	; 3
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE_gc |          // DAC ch0 is active
	DAC_CH0TRIG_bm;			// DAC ch0 auto triggered by an event (CH1)
	DACA.CTRLC =
    1ae6:	98 e0       	ldi	r25, 0x08	; 8
    1ae8:	92 83       	std	Z+2, r25	; 0x02
	DAC_REFSEL_AVCC_gc;             // Use AVCC (3.3v), right adj
	DACA.EVCTRL =
    1aea:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;  // enable DACA channel 0
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	80 83       	st	Z, r24
	
	EDMA.CH0.CTRLA = EDMA_CH_RESET_bm;
    1af0:	e0 e0       	ldi	r30, 0x00	; 0
    1af2:	f1 e0       	ldi	r31, 0x01	; 1
    1af4:	80 e4       	ldi	r24, 0x40	; 64
    1af6:	80 8b       	std	Z+16, r24	; 0x10
	EDMA.CH0.ADDRCTRL =
    1af8:	81 e3       	ldi	r24, 0x31	; 49
    1afa:	82 8b       	std	Z+18, r24	; 0x12
	EDMA_CH_RELOAD_TRANSACTION_gc |   // Reload after transaction
	EDMA_CH_DIR_INC_gc;		  // increment source address
	EDMA.CH0.TRIGSRC =
    1afc:	85 e1       	ldi	r24, 0x15	; 21
    1afe:	84 8b       	std	Z+20, r24	; 0x14
	EDMA_CH_TRIGSRC_DACA_CH0_gc;	  // DACA Ch0 is trigger source
	
	EDMA.CH0.CTRLB =
    1b00:	83 e1       	ldi	r24, 0x13	; 19
    1b02:	81 8b       	std	Z+17, r24	; 0x11
	EDMA_CH_TRNIF_bm |               //  Clear flag
	EDMA_CH_TRNINTLVL_HI_gc;          // For XMegaE5, this ISR is necessary to re-enable channel after transaction
	
	EDMA.CTRL = EDMA_ENABLE_bm; 	          // Enable, single buffer, round robin
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	80 83       	st	Z, r24
    1b08:	08 95       	ret

00001b0a <run_note_decay>:
}

void run_note_decay()
{
	
	EDMA.CH0.TRFCNT = decay_table_len;                  // data array has len values
    1b0a:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <decay_table_len>
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	e0 e0       	ldi	r30, 0x00	; 0
    1b12:	f1 e0       	ldi	r31, 0x01	; 1
    1b14:	86 8b       	std	Z+22, r24	; 0x16
    1b16:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.ADDR = (uint16_t)expDecayVals;           // this is the source SRAM address
    1b18:	86 e7       	ldi	r24, 0x76	; 118
    1b1a:	90 e2       	ldi	r25, 0x20	; 32
    1b1c:	80 8f       	std	Z+24, r24	; 0x18
    1b1e:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.CTRLA =
    1b20:	85 e8       	ldi	r24, 0x85	; 133
    1b22:	80 8b       	std	Z+16, r24	; 0x10
    1b24:	08 95       	ret

00001b26 <note_play>:
	EDMA_CH_SINGLE_bm |               //   one burst per trigger
	EDMA_CH_BURSTLEN_bm;              //   2 bytes per burst
}

void note_play(uint8_t note_index)
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
	playing = 1;
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <playing>
	TCC5.CCA = noteClocks[STARTING_NOTE_INDEX + note_index];
    1b30:	e8 2f       	mov	r30, r24
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	37 96       	adiw	r30, 0x07	; 7
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	e0 57       	subi	r30, 0x70	; 112
    1b3c:	ff 4d       	sbci	r31, 0xDF	; 223
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	c0 e4       	ldi	r28, 0x40	; 64
    1b44:	d8 e0       	ldi	r29, 0x08	; 8
    1b46:	88 a7       	std	Y+40, r24	; 0x28
    1b48:	99 a7       	std	Y+41, r25	; 0x29
	run_note_decay();
    1b4a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <run_note_decay>
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;// TC_CLKSEL_DIV1024_gc;
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	88 83       	st	Y, r24
}
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <reset_play>:

void reset_play()
{
	playing = 0;
    1b58:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <playing>
	EDMA.CH0.CTRLB |= EDMA_CH_TRNIF_bm;   // clear INT flag    // EDMA.INTFLAGS = EDMA_CH0TRNFIF_bm;    // alternate flag location also works
    1b5c:	e0 e0       	ldi	r30, 0x00	; 0
    1b5e:	f1 e0       	ldi	r31, 0x01	; 1
    1b60:	81 89       	ldd	r24, Z+17	; 0x11
    1b62:	80 61       	ori	r24, 0x10	; 16
    1b64:	81 8b       	std	Z+17, r24	; 0x11
	TCC5.CNT = 0;
    1b66:	e0 e4       	ldi	r30, 0x40	; 64
    1b68:	f8 e0       	ldi	r31, 0x08	; 8
    1b6a:	10 a2       	std	Z+32, r1	; 0x20
    1b6c:	11 a2       	std	Z+33, r1	; 0x21
	TCC5.CTRLA = 0;// TC_CLKSEL_DIV1024_gc;
    1b6e:	10 82       	st	Z, r1
    1b70:	08 95       	ret

00001b72 <note_player_init>:
}

void note_player_init()
{
	note_timer_C5_init();
    1b72:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <note_timer_C5_init>
	sys_timer_D5_init();
    1b76:	0e 94 57 0d 	call	0x1aae	; 0x1aae <sys_timer_D5_init>
	note_decay_init();
    1b7a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <note_decay_init>
    1b7e:	08 95       	ret

00001b80 <note_interrupt_handler>:
}

void note_interrupt_handler()
{
	reset_play();
    1b80:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <reset_play>
    1b84:	08 95       	ret

00001b86 <note_player_playing>:
}

uint8_t note_player_playing()
{
	return playing;
    1b86:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <playing>
    1b8a:	08 95       	ret

00001b8c <beat_timer_C4_init>:
void (*play_once_callback_ptr)() = 0;

void beat_timer_C4_init(uint16_t per)
{
	//for 136 BMP and 1/16 note support, 64 prescl and 13787 clk
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_NORMAL_gc;
    1b8c:	e0 e0       	ldi	r30, 0x00	; 0
    1b8e:	f8 e0       	ldi	r31, 0x08	; 8
    1b90:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLE = 0;
    1b92:	14 82       	std	Z+4, r1	; 0x04
	TCC4.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1b94:	23 e0       	ldi	r18, 0x03	; 3
    1b96:	26 83       	std	Z+6, r18	; 0x06
	TCC4.CTRLA = 0;
    1b98:	10 82       	st	Z, r1
	TCC4.PER = per;
    1b9a:	86 a3       	std	Z+38, r24	; 0x26
    1b9c:	97 a3       	std	Z+39, r25	; 0x27
    1b9e:	08 95       	ret

00001ba0 <note_0_timer_C5_init>:

//Channel 0 Counter
void note_0_timer_C5_init()
{

	TCC5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1ba0:	e0 e4       	ldi	r30, 0x40	; 64
    1ba2:	f8 e0       	ldi	r31, 0x08	; 8
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	81 83       	std	Z+1, r24	; 0x01
	TCC5.CTRLE = TC_CCAMODE_COMP_gc; 
    1ba8:	84 83       	std	Z+4, r24	; 0x04
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	80 83       	st	Z, r24
    1bae:	08 95       	ret

00001bb0 <note_1_timer_D5_init>:

//Channel 1 Counter
void note_1_timer_D5_init()
{
	
	TCD5.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_FRQ_gc;
    1bb0:	e0 e4       	ldi	r30, 0x40	; 64
    1bb2:	f9 e0       	ldi	r31, 0x09	; 9
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	81 83       	std	Z+1, r24	; 0x01
	TCD5.CTRLE = TC_CCAMODE_COMP_gc;
    1bb8:	84 83       	std	Z+4, r24	; 0x04
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	80 83       	st	Z, r24
    1bbe:	08 95       	ret

00001bc0 <set_note_and_beat>:
}

//Returns the clock count of the note, sets the beat counter for the note, and updates the indexes
uint16_t set_note_and_beat(uint8_t * noteBeatCountPtr, uint8_t * notesPtr, uint8_t * noteExtPtr, uint16_t * noteIndexPtr, uint16_t * noteExtIndexPtr, uint8_t * extBitPosPtr)
{
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	6c 01       	movw	r12, r24
    1bd2:	e9 01       	movw	r28, r18
    1bd4:	d7 01       	movw	r26, r14
	*noteBeatCountPtr = 0x01;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	f6 01       	movw	r30, r12
    1bda:	80 83       	st	Z, r24
	uint8_t noteVal = notesPtr[*noteIndexPtr];
    1bdc:	88 81       	ld	r24, Y
    1bde:	99 81       	ldd	r25, Y+1	; 0x01
    1be0:	68 0f       	add	r22, r24
    1be2:	79 1f       	adc	r23, r25
    1be4:	fb 01       	movw	r30, r22
    1be6:	90 81       	ld	r25, Z
	uint8_t beats = *noteBeatCountPtr;
	beats <<= (noteVal >> 6);
    1be8:	89 2f       	mov	r24, r25
    1bea:	82 95       	swap	r24
    1bec:	86 95       	lsr	r24
    1bee:	86 95       	lsr	r24
    1bf0:	83 70       	andi	r24, 0x03	; 3
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <set_note_and_beat+0x3c>
    1bf8:	66 0f       	add	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	8a 95       	dec	r24
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <set_note_and_beat+0x38>
	beats -= 1; //This will turn 0b0010 into 0b0001 or 0b0100 into 0b0011. A cheap way of doing a power of 2
    1c00:	61 50       	subi	r22, 0x01	; 1
	
	//0b00000001 << 3 = 0b00001000. 0b00001000 - 1 = 0b00000111
	//when we count down the number of 1/16 beats the note will be played for it will always play 1 1/16,
	//then decrement the beat counter until it reaches 0. So, a beat of 7 will play 8 beats, or a half note
	uint8_t extByte = noteExtPtr[*noteExtIndexPtr];
    1c02:	f8 01       	movw	r30, r16
    1c04:	20 81       	ld	r18, Z
    1c06:	31 81       	ldd	r19, Z+1	; 0x01
    1c08:	42 0f       	add	r20, r18
    1c0a:	53 1f       	adc	r21, r19
    1c0c:	fa 01       	movw	r30, r20
    1c0e:	20 81       	ld	r18, Z
	if ((extByte >> (*extBitPosPtr)) & 0x01) //if the extension bit is set then this is a whole note
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	0c 90       	ld	r0, X
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <set_note_and_beat+0x5a>
    1c16:	35 95       	asr	r19
    1c18:	27 95       	ror	r18
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <set_note_and_beat+0x56>
    1c1e:	20 fd       	sbrc	r18, 0
	{
		beats = 0x0F;
    1c20:	6f e0       	ldi	r22, 0x0F	; 15
	}
	*noteBeatCountPtr = beats;
    1c22:	f6 01       	movw	r30, r12
    1c24:	60 83       	st	Z, r22
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
    1c26:	9f 73       	andi	r25, 0x3F	; 63
    1c28:	89 2f       	mov	r24, r25
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t count = 0;
	if (index > 0)
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	51 f0       	breq	.+20     	; 0x1c44 <set_note_and_beat+0x84>
	{
		count = noteClocks[index] / 2;
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	fc 01       	movw	r30, r24
    1c36:	e0 5f       	subi	r30, 0xF0	; 240
    1c38:	fe 4d       	sbci	r31, 0xDE	; 222
    1c3a:	40 81       	ld	r20, Z
    1c3c:	51 81       	ldd	r21, Z+1	; 0x01
    1c3e:	56 95       	lsr	r21
    1c40:	47 95       	ror	r20
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <set_note_and_beat+0x88>
		beats = 0x0F;
	}
	*noteBeatCountPtr = beats;
	//Get the counts from the note as an index
	uint16_t index = noteVal & 0x3F;
	uint16_t count = 0;
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	50 e0       	ldi	r21, 0x00	; 0
		count = noteClocks[index] / 2;
	}
	
	
	//Increment the note index and the bit pos of the ext
	(*noteIndexPtr)++;
    1c48:	28 81       	ld	r18, Y
    1c4a:	39 81       	ldd	r19, Y+1	; 0x01
    1c4c:	2f 5f       	subi	r18, 0xFF	; 255
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	28 83       	st	Y, r18
    1c52:	39 83       	std	Y+1, r19	; 0x01
	(*extBitPosPtr)++;
    1c54:	9c 91       	ld	r25, X
    1c56:	9f 5f       	subi	r25, 0xFF	; 255
    1c58:	9c 93       	st	X, r25
	
	//If we have maxed out the bit pos, move to the next ext byte
	if (*extBitPosPtr == 8)
    1c5a:	98 30       	cpi	r25, 0x08	; 8
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <set_note_and_beat+0xac>
	{
		*extBitPosPtr = 0;
    1c5e:	1c 92       	st	X, r1
		(*noteExtIndexPtr)++;
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	return count;
	
}
    1c6c:	ca 01       	movw	r24, r20
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	08 95       	ret

00001c80 <set_ch0_note_and_beat>:


//Uses the current note indexes for treble
void set_ch0_note_and_beat()
{
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCC5.CCA = set_note_and_beat(&noteCh0BeatCount, ch0Track, ch0Ext, &noteCh0Index, &noteCh0ExtIndex, &noteCh0ExtBitPos);
    1c88:	40 91 84 22 	lds	r20, 0x2284	; 0x802284 <ch0Ext>
    1c8c:	50 91 85 22 	lds	r21, 0x2285	; 0x802285 <ch0Ext+0x1>
    1c90:	60 91 96 22 	lds	r22, 0x2296	; 0x802296 <ch0Track>
    1c94:	70 91 97 22 	lds	r23, 0x2297	; 0x802297 <ch0Track+0x1>
    1c98:	0f 2e       	mov	r0, r31
    1c9a:	f7 eb       	ldi	r31, 0xB7	; 183
    1c9c:	ef 2e       	mov	r14, r31
    1c9e:	f1 e2       	ldi	r31, 0x21	; 33
    1ca0:	ff 2e       	mov	r15, r31
    1ca2:	f0 2d       	mov	r31, r0
    1ca4:	08 eb       	ldi	r16, 0xB8	; 184
    1ca6:	11 e2       	ldi	r17, 0x21	; 33
    1ca8:	2a eb       	ldi	r18, 0xBA	; 186
    1caa:	31 e2       	ldi	r19, 0x21	; 33
    1cac:	86 eb       	ldi	r24, 0xB6	; 182
    1cae:	91 e2       	ldi	r25, 0x21	; 33
    1cb0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <set_note_and_beat>
    1cb4:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7fb868>
    1cb8:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7fb869>
}
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	08 95       	ret

00001cc6 <set_ch1_note_and_beat>:

//Uses the current note indexes for Bass
void set_ch1_note_and_beat()
{
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
	//The note number is the first 6 bits of the byte for that note and represents the index into the note clocks
	TCD5.CCA = set_note_and_beat(&noteCh1BeatCount, ch1Track, ch1Ext, &noteCh1Index, &noteCh1ExtIndex, &noteCh1ExtBitPos);
    1cce:	40 91 98 22 	lds	r20, 0x2298	; 0x802298 <ch1Ext>
    1cd2:	50 91 99 22 	lds	r21, 0x2299	; 0x802299 <ch1Ext+0x1>
    1cd6:	60 91 94 22 	lds	r22, 0x2294	; 0x802294 <ch1Track>
    1cda:	70 91 95 22 	lds	r23, 0x2295	; 0x802295 <ch1Track+0x1>
    1cde:	0f 2e       	mov	r0, r31
    1ce0:	f8 ea       	ldi	r31, 0xA8	; 168
    1ce2:	ef 2e       	mov	r14, r31
    1ce4:	f1 e2       	ldi	r31, 0x21	; 33
    1ce6:	ff 2e       	mov	r15, r31
    1ce8:	f0 2d       	mov	r31, r0
    1cea:	09 ea       	ldi	r16, 0xA9	; 169
    1cec:	11 e2       	ldi	r17, 0x21	; 33
    1cee:	2b ea       	ldi	r18, 0xAB	; 171
    1cf0:	31 e2       	ldi	r19, 0x21	; 33
    1cf2:	87 ea       	ldi	r24, 0xA7	; 167
    1cf4:	91 e2       	ldi	r25, 0x21	; 33
    1cf6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <set_note_and_beat>
    1cfa:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <__TEXT_REGION_LENGTH__+0x7fb968>
    1cfe:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <__TEXT_REGION_LENGTH__+0x7fb969>
}
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	ff 90       	pop	r15
    1d08:	ef 90       	pop	r14
    1d0a:	08 95       	ret

00001d0c <song_init>:

void song_init()
{
	if (hasCh0Intro)
    1d0c:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <hasCh0Intro>
    1d10:	88 23       	and	r24, r24
    1d12:	99 f0       	breq	.+38     	; 0x1d3a <song_init+0x2e>
	{
		isCh0Intro = 1;
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <isCh0Intro>
		ch0Track = ch0IntroTrack;
    1d1a:	20 91 88 22 	lds	r18, 0x2288	; 0x802288 <ch0IntroTrack>
    1d1e:	30 91 89 22 	lds	r19, 0x2289	; 0x802289 <ch0IntroTrack+0x1>
    1d22:	20 93 96 22 	sts	0x2296, r18	; 0x802296 <ch0Track>
    1d26:	30 93 97 22 	sts	0x2297, r19	; 0x802297 <ch0Track+0x1>
		ch0Ext = ch0IntroExt;
    1d2a:	20 91 8e 22 	lds	r18, 0x228E	; 0x80228e <ch0IntroExt>
    1d2e:	30 91 8f 22 	lds	r19, 0x228F	; 0x80228f <ch0IntroExt+0x1>
    1d32:	20 93 84 22 	sts	0x2284, r18	; 0x802284 <ch0Ext>
    1d36:	30 93 85 22 	sts	0x2285, r19	; 0x802285 <ch0Ext+0x1>
	}

	if (!(hasCh0Intro) && hasCh0Main)
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	16 c0       	rjmp	.+44     	; 0x1d6a <song_init+0x5e>
    1d3e:	90 91 bc 21 	lds	r25, 0x21BC	; 0x8021bc <hasCh0Main>
    1d42:	99 23       	and	r25, r25
    1d44:	91 f0       	breq	.+36     	; 0x1d6a <song_init+0x5e>
	{
		isCh0Intro = 0;
    1d46:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <isCh0Intro>
		ch0Track = ch0MainTrack;
    1d4a:	20 91 86 22 	lds	r18, 0x2286	; 0x802286 <ch0MainTrack>
    1d4e:	30 91 87 22 	lds	r19, 0x2287	; 0x802287 <ch0MainTrack+0x1>
    1d52:	20 93 96 22 	sts	0x2296, r18	; 0x802296 <ch0Track>
    1d56:	30 93 97 22 	sts	0x2297, r19	; 0x802297 <ch0Track+0x1>
		ch0Ext = ch0MainExt;
    1d5a:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <ch0MainExt>
    1d5e:	30 91 83 22 	lds	r19, 0x2283	; 0x802283 <ch0MainExt+0x1>
    1d62:	20 93 84 22 	sts	0x2284, r18	; 0x802284 <ch0Ext>
    1d66:	30 93 85 22 	sts	0x2285, r19	; 0x802285 <ch0Ext+0x1>
	}

	noteCh0BeatCount = 0;
    1d6a:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <noteCh0BeatCount>
	noteCh0Index = 0;
    1d6e:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh0Index>
    1d72:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh0Index+0x1>
	noteCh0ExtIndex = 0;
    1d76:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh0ExtIndex>
    1d7a:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh0ExtIndex+0x1>
	noteCh0ExtBitPos = 0;
    1d7e:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh0ExtBitPos>
	
	if (hasCh1Intro)
    1d82:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <hasCh1Intro>
    1d86:	99 23       	and	r25, r25
    1d88:	99 f0       	breq	.+38     	; 0x1db0 <song_init+0xa4>
	{
		isCh1Intro = 1;
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	20 93 a0 21 	sts	0x21A0, r18	; 0x8021a0 <isCh1Intro>
		ch1Track = ch1IntroTrack;
    1d90:	20 91 92 22 	lds	r18, 0x2292	; 0x802292 <ch1IntroTrack>
    1d94:	30 91 93 22 	lds	r19, 0x2293	; 0x802293 <ch1IntroTrack+0x1>
    1d98:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch1Track>
    1d9c:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch1Track+0x1>
		ch1Ext = ch1IntroExt;
    1da0:	20 91 80 22 	lds	r18, 0x2280	; 0x802280 <ch1IntroExt>
    1da4:	30 91 81 22 	lds	r19, 0x2281	; 0x802281 <ch1IntroExt+0x1>
    1da8:	20 93 98 22 	sts	0x2298, r18	; 0x802298 <ch1Ext>
    1dac:	30 93 99 22 	sts	0x2299, r19	; 0x802299 <ch1Ext+0x1>
	}

	if (!(hasCh1Intro) && hasCh1Main)
    1db0:	91 11       	cpse	r25, r1
    1db2:	16 c0       	rjmp	.+44     	; 0x1de0 <song_init+0xd4>
    1db4:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <hasCh1Main>
    1db8:	99 23       	and	r25, r25
    1dba:	91 f0       	breq	.+36     	; 0x1de0 <song_init+0xd4>
	{
		isCh1Intro = 0;
    1dbc:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <isCh1Intro>
		ch1Track = ch1MainTrack;
    1dc0:	20 91 90 22 	lds	r18, 0x2290	; 0x802290 <ch1MainTrack>
    1dc4:	30 91 91 22 	lds	r19, 0x2291	; 0x802291 <ch1MainTrack+0x1>
    1dc8:	20 93 94 22 	sts	0x2294, r18	; 0x802294 <ch1Track>
    1dcc:	30 93 95 22 	sts	0x2295, r19	; 0x802295 <ch1Track+0x1>
		ch1Ext = ch1MainExt;
    1dd0:	20 91 8a 22 	lds	r18, 0x228A	; 0x80228a <ch1MainExt>
    1dd4:	30 91 8b 22 	lds	r19, 0x228B	; 0x80228b <ch1MainExt+0x1>
    1dd8:	20 93 98 22 	sts	0x2298, r18	; 0x802298 <ch1Ext>
    1ddc:	30 93 99 22 	sts	0x2299, r19	; 0x802299 <ch1Ext+0x1>
	}

	noteCh1BeatCount = 0;
    1de0:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <noteCh1BeatCount>
	noteCh1Index = 0;
    1de4:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <noteCh1Index>
    1de8:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <noteCh1Index+0x1>
	noteCh1ExtIndex = 0;
    1dec:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <noteCh1ExtIndex>
    1df0:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <noteCh1ExtIndex+0x1>
	noteCh1ExtBitPos = 0;
    1df4:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <noteCh1ExtBitPos>
	
	if (hasCh0Intro || hasCh0Main)
    1df8:	81 11       	cpse	r24, r1
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <song_init+0xf6>
    1dfc:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <hasCh0Main>
    1e00:	81 11       	cpse	r24, r1
	{
		set_ch0_note_and_beat();
    1e02:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <set_ch0_note_and_beat>
	}
	
	if (hasCh1Intro || hasCh1Main)
    1e06:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <hasCh1Intro>
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <song_init+0x108>
    1e0e:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <hasCh1Main>
    1e12:	81 11       	cpse	r24, r1
	{
		set_ch1_note_and_beat();
    1e14:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <set_ch1_note_and_beat>
    1e18:	08 95       	ret

00001e1a <load_track_into_mem>:
	}
	
}

void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	1f 92       	push	r1
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	6c 01       	movw	r12, r24
    1e32:	7b 01       	movw	r14, r22
    1e34:	8a 01       	movw	r16, r20
	*dest = (uint8_t *)malloc(size);
    1e36:	ca 01       	movw	r24, r20
    1e38:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
    1e3c:	d7 01       	movw	r26, r14
    1e3e:	8d 93       	st	X+, r24
    1e40:	9c 93       	st	X, r25
	volatile uint8_t temp;
	uint16_t i = 0;
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
	for(;i<size;i++)
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <load_track_into_mem+0x48>
	{
		temp =pgm_read_byte(source + i);
    1e48:	f6 01       	movw	r30, r12
    1e4a:	e8 0f       	add	r30, r24
    1e4c:	f9 1f       	adc	r31, r25
    1e4e:	e4 91       	lpm	r30, Z
    1e50:	e9 83       	std	Y+1, r30	; 0x01
		(*dest)[i] = temp;
    1e52:	d7 01       	movw	r26, r14
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	e8 0f       	add	r30, r24
    1e5a:	f9 1f       	adc	r31, r25
    1e5c:	29 81       	ldd	r18, Y+1	; 0x01
    1e5e:	20 83       	st	Z, r18
void load_track_into_mem(uint8_t * source, uint8_t ** dest, uint16_t size)
{
	*dest = (uint8_t *)malloc(size);
	volatile uint8_t temp;
	uint16_t i = 0;
	for(;i<size;i++)
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	80 17       	cp	r24, r16
    1e64:	91 07       	cpc	r25, r17
    1e66:	80 f3       	brcs	.-32     	; 0x1e48 <load_track_into_mem+0x2e>
	{
		temp =pgm_read_byte(source + i);
		(*dest)[i] = temp;
	}
}
    1e68:	0f 90       	pop	r0
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	08 95       	ret

00001e7c <song_player_init>:

void song_player_init(SongInitParams initParams, void (*update_display_cb)())
{
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	update_display_callback_ptr = update_display_cb;
    1e88:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8c:	80 93 8c 22 	sts	0x228C, r24	; 0x80228c <update_display_callback_ptr>
    1e90:	90 93 8d 22 	sts	0x228D, r25	; 0x80228d <update_display_callback_ptr+0x1>
	
	beat_timer_C4_init(initParams.bmp_period);
    1e94:	8f a1       	ldd	r24, Y+39	; 0x27
    1e96:	98 a5       	ldd	r25, Y+40	; 0x28
    1e98:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <beat_timer_C4_init>
	note_0_timer_C5_init();
    1e9c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <note_0_timer_C5_init>
	note_1_timer_D5_init();	
    1ea0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <note_1_timer_D5_init>
	
	if (initParams.ch0.main.track_data)
    1ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea6:	98 89       	ldd	r25, Y+16	; 0x10
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	d1 f0       	breq	.+52     	; 0x1ee0 <song_player_init+0x64>
	{
		hasCh0Main = 1;
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	20 93 bc 21 	sts	0x21BC, r18	; 0x8021bc <hasCh0Main>
		load_track_into_mem(initParams.ch0.main.track_data, &ch0MainTrack, initParams.ch0.main.track_size);
    1eb2:	09 89       	ldd	r16, Y+17	; 0x11
    1eb4:	1a 89       	ldd	r17, Y+18	; 0x12
    1eb6:	a8 01       	movw	r20, r16
    1eb8:	66 e8       	ldi	r22, 0x86	; 134
    1eba:	72 e2       	ldi	r23, 0x22	; 34
    1ebc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.main.extension_data, &ch0MainExt, initParams.ch0.main.extension_size);
    1ec0:	4d 89       	ldd	r20, Y+21	; 0x15
    1ec2:	5e 89       	ldd	r21, Y+22	; 0x16
    1ec4:	62 e8       	ldi	r22, 0x82	; 130
    1ec6:	72 e2       	ldi	r23, 0x22	; 34
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		ch0MainNoteCount = initParams.ch0.main.track_size;
    1ed0:	00 93 b2 21 	sts	0x21B2, r16	; 0x8021b2 <ch0MainNoteCount>
    1ed4:	10 93 b3 21 	sts	0x21B3, r17	; 0x8021b3 <ch0MainNoteCount+0x1>
		ch0NoteCount = ch0MainNoteCount;
    1ed8:	00 93 b0 21 	sts	0x21B0, r16	; 0x8021b0 <ch0NoteCount>
    1edc:	10 93 b1 21 	sts	0x21B1, r17	; 0x8021b1 <ch0NoteCount+0x1>
	
	//Note: Checking the main track stuff first so that we can set values here that can be overwritten if intro track
	//information is present without the need for more conditionals	
	
	//First copy over data from progmem
	if (initParams.ch0.intro.track_data)
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	98 85       	ldd	r25, Y+8	; 0x08
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	d1 f0       	breq	.+52     	; 0x1f1c <song_player_init+0xa0>
	{
		hasCh0Intro = 1;
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	20 93 bd 21 	sts	0x21BD, r18	; 0x8021bd <hasCh0Intro>
		load_track_into_mem(initParams.ch0.intro.track_data, &ch0IntroTrack, initParams.ch0.intro.track_size);
    1eee:	09 85       	ldd	r16, Y+9	; 0x09
    1ef0:	1a 85       	ldd	r17, Y+10	; 0x0a
    1ef2:	a8 01       	movw	r20, r16
    1ef4:	68 e8       	ldi	r22, 0x88	; 136
    1ef6:	72 e2       	ldi	r23, 0x22	; 34
    1ef8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		load_track_into_mem(initParams.ch0.intro.extension_data, &ch0IntroExt, initParams.ch0.intro.extension_size);
    1efc:	4d 85       	ldd	r20, Y+13	; 0x0d
    1efe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f00:	6e e8       	ldi	r22, 0x8E	; 142
    1f02:	72 e2       	ldi	r23, 0x22	; 34
    1f04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f08:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		ch0IntroNoteCount = initParams.ch0.intro.track_size;		
    1f0c:	00 93 b4 21 	sts	0x21B4, r16	; 0x8021b4 <ch0IntroNoteCount>
    1f10:	10 93 b5 21 	sts	0x21B5, r17	; 0x8021b5 <ch0IntroNoteCount+0x1>
		ch0NoteCount = ch0IntroNoteCount;
    1f14:	00 93 b0 21 	sts	0x21B0, r16	; 0x8021b0 <ch0NoteCount>
    1f18:	10 93 b1 21 	sts	0x21B1, r17	; 0x8021b1 <ch0NoteCount+0x1>
	}
	
	if (initParams.ch1.main.track_data)
    1f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	d1 f0       	breq	.+52     	; 0x1f58 <song_player_init+0xdc>
	{
		hasCh1Main = 1;
    1f24:	21 e0       	ldi	r18, 0x01	; 1
    1f26:	20 93 ad 21 	sts	0x21AD, r18	; 0x8021ad <hasCh1Main>
		load_track_into_mem(initParams.ch1.main.track_data, &ch1MainTrack, initParams.ch1.main.track_size);
    1f2a:	09 a1       	ldd	r16, Y+33	; 0x21
    1f2c:	1a a1       	ldd	r17, Y+34	; 0x22
    1f2e:	a8 01       	movw	r20, r16
    1f30:	60 e9       	ldi	r22, 0x90	; 144
    1f32:	72 e2       	ldi	r23, 0x22	; 34
    1f34:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.main.extension_data, &ch1MainExt, initParams.ch1.main.extension_size);
    1f38:	4d a1       	ldd	r20, Y+37	; 0x25
    1f3a:	5e a1       	ldd	r21, Y+38	; 0x26
    1f3c:	6a e8       	ldi	r22, 0x8A	; 138
    1f3e:	72 e2       	ldi	r23, 0x22	; 34
    1f40:	8b a1       	ldd	r24, Y+35	; 0x23
    1f42:	9c a1       	ldd	r25, Y+36	; 0x24
    1f44:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		ch1MainNoteCount = initParams.ch1.main.track_size;
    1f48:	00 93 a3 21 	sts	0x21A3, r16	; 0x8021a3 <ch1MainNoteCount>
    1f4c:	10 93 a4 21 	sts	0x21A4, r17	; 0x8021a4 <ch1MainNoteCount+0x1>
		ch1NoteCount = ch1MainNoteCount;
    1f50:	00 93 a1 21 	sts	0x21A1, r16	; 0x8021a1 <ch1NoteCount>
    1f54:	10 93 a2 21 	sts	0x21A2, r17	; 0x8021a2 <ch1NoteCount+0x1>
	}
	
	if (initParams.ch1.intro.track_data)
    1f58:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	d1 f0       	breq	.+52     	; 0x1f94 <song_player_init+0x118>
	{
		hasCh1Intro = 1;
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	20 93 ae 21 	sts	0x21AE, r18	; 0x8021ae <hasCh1Intro>
		load_track_into_mem(initParams.ch1.intro.track_data, &ch1IntroTrack, initParams.ch1.intro.track_size);
    1f66:	09 8d       	ldd	r16, Y+25	; 0x19
    1f68:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1f6a:	a8 01       	movw	r20, r16
    1f6c:	62 e9       	ldi	r22, 0x92	; 146
    1f6e:	72 e2       	ldi	r23, 0x22	; 34
    1f70:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		load_track_into_mem(initParams.ch1.intro.extension_data, &ch1IntroExt, initParams.ch1.intro.extension_size);
    1f74:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1f76:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1f78:	60 e8       	ldi	r22, 0x80	; 128
    1f7a:	72 e2       	ldi	r23, 0x22	; 34
    1f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f80:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <load_track_into_mem>
		ch1IntroNoteCount = initParams.ch1.intro.track_size;		
    1f84:	00 93 a5 21 	sts	0x21A5, r16	; 0x8021a5 <ch1IntroNoteCount>
    1f88:	10 93 a6 21 	sts	0x21A6, r17	; 0x8021a6 <ch1IntroNoteCount+0x1>
		ch1NoteCount = ch1IntroNoteCount;
    1f8c:	00 93 a1 21 	sts	0x21A1, r16	; 0x8021a1 <ch1NoteCount>
    1f90:	10 93 a2 21 	sts	0x21A2, r17	; 0x8021a2 <ch1NoteCount+0x1>
	}
	
		
	
	song_init();
    1f94:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <song_init>
}
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <song_start>:

void song_start()
{
	TCC4.CTRLA = TC_CLKSEL_DIV256_gc;
    1fa2:	86 e0       	ldi	r24, 0x06	; 6
    1fa4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
    1fa8:	08 95       	ret

00001faa <song_play_once>:
}

void song_play_once(void (*callback)())
{
	play_once_callback_ptr = callback;
    1faa:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <play_once_callback_ptr>
    1fae:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <play_once_callback_ptr+0x1>
	song_start();	
    1fb2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <song_start>
    1fb6:	08 95       	ret

00001fb8 <song_interrupt_handler>:
}

void song_interrupt_handler(){
// 	PORTA.OUTSET = PIN2_bm;
	TCC4.INTFLAGS = TC4_OVFIF_bm;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>

	if (!(noteCh0BeatCount))
    1fbe:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <noteCh0BeatCount>
    1fc2:	81 11       	cpse	r24, r1
    1fc4:	4b c0       	rjmp	.+150    	; 0x205c <song_interrupt_handler+0xa4>
	{

		
		//First turn off treble counter
		TCC5.CTRLA = 0;
    1fc6:	e0 e4       	ldi	r30, 0x40	; 64
    1fc8:	f8 e0       	ldi	r31, 0x08	; 8
    1fca:	10 82       	st	Z, r1
		TCC5.CCA = 0;
    1fcc:	10 a6       	std	Z+40, r1	; 0x28
    1fce:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh0Index >= ch0NoteCount)
    1fd0:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <noteCh0Index>
    1fd4:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <noteCh0Index+0x1>
    1fd8:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <ch0NoteCount>
    1fdc:	90 91 b1 21 	lds	r25, 0x21B1	; 0x8021b1 <ch0NoteCount+0x1>
    1fe0:	28 17       	cp	r18, r24
    1fe2:	39 07       	cpc	r19, r25
    1fe4:	c0 f1       	brcs	.+112    	; 0x2056 <song_interrupt_handler+0x9e>
		{
			if (isCh0Intro)// && hasCh0Main)
    1fe6:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <isCh0Intro>
    1fea:	88 23       	and	r24, r24
    1fec:	d9 f0       	breq	.+54     	; 0x2024 <song_interrupt_handler+0x6c>
			{
				isCh0Intro = 0;
    1fee:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <isCh0Intro>
				ch0NoteCount = ch0MainNoteCount;
    1ff2:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <ch0MainNoteCount>
    1ff6:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <ch0MainNoteCount+0x1>
    1ffa:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <ch0NoteCount>
    1ffe:	90 93 b1 21 	sts	0x21B1, r25	; 0x8021b1 <ch0NoteCount+0x1>
				ch0Track = ch0MainTrack;
    2002:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <ch0MainTrack>
    2006:	90 91 87 22 	lds	r25, 0x2287	; 0x802287 <ch0MainTrack+0x1>
    200a:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <ch0Track>
    200e:	90 93 97 22 	sts	0x2297, r25	; 0x802297 <ch0Track+0x1>
				ch0Ext = ch0MainExt;
    2012:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <ch0MainExt>
    2016:	90 91 83 22 	lds	r25, 0x2283	; 0x802283 <ch0MainExt+0x1>
    201a:	80 93 84 22 	sts	0x2284, r24	; 0x802284 <ch0Ext>
    201e:	90 93 85 22 	sts	0x2285, r25	; 0x802285 <ch0Ext+0x1>
    2022:	0d c0       	rjmp	.+26     	; 0x203e <song_interrupt_handler+0x86>
			}
			else if (play_once_callback_ptr)
    2024:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <play_once_callback_ptr>
    2028:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <play_once_callback_ptr+0x1>
    202c:	89 2b       	or	r24, r25
    202e:	39 f0       	breq	.+14     	; 0x203e <song_interrupt_handler+0x86>
			{
				TCC4.CTRLA = 0;
    2030:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x7fb800>
				play_once_callback_ptr();
    2034:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <play_once_callback_ptr>
    2038:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <play_once_callback_ptr+0x1>
    203c:	09 95       	icall
				
			}
			
			noteCh0BeatCount = 0;
    203e:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <noteCh0BeatCount>
			noteCh0Index = 0;
    2042:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <noteCh0Index>
    2046:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <noteCh0Index+0x1>
			noteCh0ExtIndex = 0;
    204a:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <noteCh0ExtIndex>
    204e:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <noteCh0ExtIndex+0x1>
			noteCh0ExtBitPos = 0;
    2052:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <noteCh0ExtBitPos>
		}
		

		set_ch0_note_and_beat();
    2056:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <set_ch0_note_and_beat>
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <song_interrupt_handler+0xaa>
		
	}
	else
	{
		noteCh0BeatCount--;
    205c:	81 50       	subi	r24, 0x01	; 1
    205e:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <noteCh0BeatCount>
	}
	
	if (!(noteCh1BeatCount))
    2062:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <noteCh1BeatCount>
    2066:	81 11       	cpse	r24, r1
    2068:	41 c0       	rjmp	.+130    	; 0x20ec <song_interrupt_handler+0x134>
	{
		//First turn off base counter
		
		TCD5.CTRLA = 0;
    206a:	e0 e4       	ldi	r30, 0x40	; 64
    206c:	f9 e0       	ldi	r31, 0x09	; 9
    206e:	10 82       	st	Z, r1
		TCD5.CCA = 0;
    2070:	10 a6       	std	Z+40, r1	; 0x28
    2072:	11 a6       	std	Z+41, r1	; 0x29

		if (noteCh1Index >= ch1NoteCount)
    2074:	20 91 ab 21 	lds	r18, 0x21AB	; 0x8021ab <noteCh1Index>
    2078:	30 91 ac 21 	lds	r19, 0x21AC	; 0x8021ac <noteCh1Index+0x1>
    207c:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <ch1NoteCount>
    2080:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <ch1NoteCount+0x1>
    2084:	28 17       	cp	r18, r24
    2086:	39 07       	cpc	r19, r25
    2088:	70 f1       	brcs	.+92     	; 0x20e6 <song_interrupt_handler+0x12e>
		{
			if (isCh1Intro && hasCh1Main)
    208a:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <isCh1Intro>
    208e:	88 23       	and	r24, r24
    2090:	f1 f0       	breq	.+60     	; 0x20ce <song_interrupt_handler+0x116>
    2092:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <hasCh1Main>
    2096:	88 23       	and	r24, r24
    2098:	d1 f0       	breq	.+52     	; 0x20ce <song_interrupt_handler+0x116>
			{
				isCh1Intro = 0;
    209a:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <isCh1Intro>
				ch1NoteCount = ch1MainNoteCount;
    209e:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <ch1MainNoteCount>
    20a2:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <ch1MainNoteCount+0x1>
    20a6:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <ch1NoteCount>
    20aa:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <ch1NoteCount+0x1>
				ch1Track = ch1MainTrack;
    20ae:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <ch1MainTrack>
    20b2:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <ch1MainTrack+0x1>
    20b6:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <ch1Track>
    20ba:	90 93 95 22 	sts	0x2295, r25	; 0x802295 <ch1Track+0x1>
				ch1Ext = ch1MainExt;
    20be:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <ch1MainExt>
    20c2:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <ch1MainExt+0x1>
    20c6:	80 93 98 22 	sts	0x2298, r24	; 0x802298 <ch1Ext>
    20ca:	90 93 99 22 	sts	0x2299, r25	; 0x802299 <ch1Ext+0x1>
			}
			
			noteCh1BeatCount = 0;
    20ce:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <noteCh1BeatCount>
			noteCh1Index = 0;
    20d2:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <noteCh1Index>
    20d6:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <noteCh1Index+0x1>
			noteCh1ExtIndex = 0;
    20da:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <noteCh1ExtIndex>
    20de:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <noteCh1ExtIndex+0x1>
			noteCh1ExtBitPos = 0;
    20e2:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <noteCh1ExtBitPos>
		}

		set_ch1_note_and_beat();
    20e6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <set_ch1_note_and_beat>
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <song_interrupt_handler+0x13a>
	}
	else
	{
		noteCh1BeatCount--;
    20ec:	81 50       	subi	r24, 0x01	; 1
    20ee:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <noteCh1BeatCount>
	}
	
	update_display_callback_ptr();
    20f2:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <update_display_callback_ptr>
    20f6:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <update_display_callback_ptr+0x1>
    20fa:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20fc:	2f ef       	ldi	r18, 0xFF	; 255
    20fe:	83 ef       	ldi	r24, 0xF3	; 243
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	21 50       	subi	r18, 0x01	; 1
    2104:	80 40       	sbci	r24, 0x00	; 0
    2106:	90 40       	sbci	r25, 0x00	; 0
    2108:	e1 f7       	brne	.-8      	; 0x2102 <song_interrupt_handler+0x14a>
    210a:	00 c0       	rjmp	.+0      	; 0x210c <song_interrupt_handler+0x154>
    210c:	00 00       	nop
	_delay_ms(20);
	TCC5.CTRLA = TC_CLKSEL_DIV8_gc;
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7fb840>
	TCD5.CTRLA = TC_CLKSEL_DIV8_gc;
    2114:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7fb940>
    2118:	08 95       	ret

0000211a <get_allow_portal>:
volatile uint8_t allow_portal = 0;
volatile uint8_t allow_easter_egg = 0;

uint8_t get_allow_portal()
{
	return allow_portal;
    211a:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <allow_portal>
}
    211e:	08 95       	ret

00002120 <set_allow_portal>:

void set_allow_portal(uint8_t allow)
{
	allow_portal = allow;
    2120:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <allow_portal>
	eeprom_write_byte((uint8_t *)2, allow_portal ? ALLOW_VAL : 0);
    2124:	60 91 bf 21 	lds	r22, 0x21BF	; 0x8021bf <allow_portal>
    2128:	61 11       	cpse	r22, r1
    212a:	65 e5       	ldi	r22, 0x55	; 85
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 1f 13 	call	0x263e	; 0x263e <eeprom_write_byte>
    2134:	08 95       	ret

00002136 <get_allow_easter_egg>:
}

uint8_t get_allow_easter_egg()
{
	return allow_easter_egg;
    2136:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <allow_easter_egg>
}
    213a:	08 95       	ret

0000213c <set_allow_easter_egg>:

void set_allow_easter_egg(uint8_t allow)
{
	allow_easter_egg = allow;
    213c:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <allow_easter_egg>
	eeprom_write_byte((uint8_t *)3, allow_easter_egg ? ALLOW_VAL : 0);
    2140:	60 91 be 21 	lds	r22, 0x21BE	; 0x8021be <allow_easter_egg>
    2144:	61 11       	cpse	r22, r1
    2146:	65 e5       	ldi	r22, 0x55	; 85
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 1f 13 	call	0x263e	; 0x263e <eeprom_write_byte>
    2150:	08 95       	ret

00002152 <get_start_mode>:
}

uint8_t get_start_mode()
{
	return start_mode;
    2152:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <start_mode>
}
    2156:	08 95       	ret

00002158 <reset_start_mode_in_eeprom>:

void reset_start_mode_in_eeprom()
{
	eeprom_write_byte((uint8_t *)1, 0);
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 1f 13 	call	0x263e	; 0x263e <eeprom_write_byte>
    2162:	08 95       	ret

00002164 <enable_wdt>:
}

void enable_wdt()
{
	CCP = CCP_IOREG_gc;
    2164:	88 ed       	ldi	r24, 0xD8	; 216
    2166:	84 bf       	out	0x34, r24	; 52
	WDT_CTRL = WDT_ENABLE_bm | WDT_CEN_bm;
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fb080>
    216e:	08 95       	ret

00002170 <start_mode_init>:
}

void start_mode_init()
{
	
	start_mode = eeprom_read_byte((uint8_t*)1);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 17 13 	call	0x262e	; 0x262e <eeprom_read_byte>
    2178:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <start_mode>
	
	if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    217c:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <start_mode>
    2180:	87 30       	cpi	r24, 0x07	; 7
    2182:	40 f0       	brcs	.+16     	; 0x2194 <start_mode_init+0x24>
    2184:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <start_mode>
    2188:	8f 3e       	cpi	r24, 0xEF	; 239
    218a:	21 f0       	breq	.+8      	; 0x2194 <start_mode_init+0x24>
	{
		start_mode = 0;
    218c:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <start_mode>
		reset_start_mode_in_eeprom();
    2190:	0e 94 ac 10 	call	0x2158	; 0x2158 <reset_start_mode_in_eeprom>
	}
	
	allow_portal = eeprom_read_byte((uint8_t*)2);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 17 13 	call	0x262e	; 0x262e <eeprom_read_byte>
    219c:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <allow_portal>
	
	//TODO:Remove test case
	allow_portal = ALLOW_VAL;
    21a0:	85 e5       	ldi	r24, 0x55	; 85
    21a2:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <allow_portal>
	
	allow_easter_egg = eeprom_read_byte((uint8_t*)3);
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 17 13 	call	0x262e	; 0x262e <eeprom_read_byte>
    21ae:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <allow_easter_egg>
    21b2:	08 95       	ret

000021b4 <set_start_mode>:
void set_start_mode(uint8_t start_mode)
{
	//If start mode is set to what "Allow Portal" would be, we need to see
	//if the mode can be set to "Allow Portal", or if it can be skipped and
	//go straight to "Easter Egg" mode, or we just roll back to "Standby"
	if (start_mode == BASE_MAX_MODE + 1)
    21b4:	85 30       	cpi	r24, 0x05	; 5
    21b6:	91 f4       	brne	.+36     	; 0x21dc <set_start_mode+0x28>
	{
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
    21b8:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <allow_portal>
    21bc:	95 35       	cpi	r25, 0x55	; 85
    21be:	21 f0       	breq	.+8      	; 0x21c8 <set_start_mode+0x14>
    21c0:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <allow_easter_egg>
    21c4:	95 35       	cpi	r25, 0x55	; 85
    21c6:	b1 f4       	brne	.+44     	; 0x21f4 <set_start_mode+0x40>
		{
			start_mode = 0;
		}
		else if ((allow_portal != ALLOW_VAL) && (allow_easter_egg == ALLOW_VAL))
    21c8:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <allow_portal>
    21cc:	95 35       	cpi	r25, 0x55	; 85
    21ce:	b9 f0       	breq	.+46     	; 0x21fe <set_start_mode+0x4a>
    21d0:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <allow_easter_egg>
    21d4:	95 35       	cpi	r25, 0x55	; 85
    21d6:	99 f4       	brne	.+38     	; 0x21fe <set_start_mode+0x4a>
		{
			start_mode++;
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	11 c0       	rjmp	.+34     	; 0x21fe <set_start_mode+0x4a>
		}
	}
	else if (start_mode == BASE_MAX_MODE + 2)
    21dc:	86 30       	cpi	r24, 0x06	; 6
    21de:	29 f4       	brne	.+10     	; 0x21ea <set_start_mode+0x36>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
    21e0:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <allow_easter_egg>
    21e4:	95 35       	cpi	r25, 0x55	; 85
    21e6:	41 f4       	brne	.+16     	; 0x21f8 <set_start_mode+0x44>
    21e8:	0a c0       	rjmp	.+20     	; 0x21fe <set_start_mode+0x4a>
		{
			start_mode = 0;
		}
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
    21ea:	87 30       	cpi	r24, 0x07	; 7
    21ec:	40 f0       	brcs	.+16     	; 0x21fe <set_start_mode+0x4a>
    21ee:	8f 3e       	cpi	r24, 0xEF	; 239
    21f0:	29 f4       	brne	.+10     	; 0x21fc <set_start_mode+0x48>
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <set_start_mode+0x4a>
		//This falls through if allow_porta is true, and allows the mode to
		//be switched to Portal mode
		
		if ((allow_portal != ALLOW_VAL) && (allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <set_start_mode+0x4a>
	{
		//Just let this fall through if allow_easter_egg is true
		//so we can switch to easter egg mode
		if ((allow_easter_egg != ALLOW_VAL))
		{
			start_mode = 0;
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <set_start_mode+0x4a>
		
	}
	else if (start_mode > BASE_MAX_MODE + 2 && start_mode != EASTER_EGG_START_sm)
	{
		//Our default restart state
		start_mode = 0;
    21fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	eeprom_write_byte((uint8_t *)1, start_mode);
    21fe:	68 2f       	mov	r22, r24
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 1f 13 	call	0x263e	; 0x263e <eeprom_write_byte>
	eeprom_busy_wait();
    2208:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7fb1cf>
    220c:	88 23       	and	r24, r24
    220e:	e4 f3       	brlt	.-8      	; 0x2208 <set_start_mode+0x54>
	enable_wdt();
    2210:	0e 94 b2 10 	call	0x2164	; 0x2164 <enable_wdt>
    2214:	ff cf       	rjmp	.-2      	; 0x2214 <set_start_mode+0x60>

00002216 <next_start_mode>:
	
}

void next_start_mode()
{
	start_mode++;
    2216:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <start_mode>
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <start_mode>
	set_start_mode(start_mode);
    2220:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <start_mode>
    2224:	0e 94 da 10 	call	0x21b4	; 0x21b4 <set_start_mode>

00002228 <ws2812drv_init>:


void ws2812drv_init(void)
{                                                               
    // Setup EDMA channel 2(+1) 
    EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    2228:	a0 e0       	ldi	r26, 0x00	; 0
    222a:	b1 e0       	ldi	r27, 0x01	; 1
    222c:	80 eb       	ldi	r24, 0xB0	; 176
    222e:	8c 93       	st	X, r24
    EDMA.CH2.CTRLB = 0;// EDMA_CH_INTLVL_OFF_gc;
    2230:	d1 96       	adiw	r26, 0x31	; 49
    2232:	1c 92       	st	X, r1
    2234:	d1 97       	sbiw	r26, 0x31	; 49
    EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	d2 96       	adiw	r26, 0x32	; 50
    223a:	8c 93       	st	X, r24
    223c:	d2 97       	sbiw	r26, 0x32	; 50
    EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    223e:	d3 96       	adiw	r26, 0x33	; 51
    2240:	1c 92       	st	X, r1
    2242:	d3 97       	sbiw	r26, 0x33	; 51
    EDMA.CH2.DESTADDR = (uint16_t)&USARTD0.DATA;
    2244:	e0 ec       	ldi	r30, 0xC0	; 192
    2246:	f9 e0       	ldi	r31, 0x09	; 9
    2248:	dc 96       	adiw	r26, 0x3c	; 60
    224a:	ed 93       	st	X+, r30
    224c:	fc 93       	st	X, r31
    224e:	dd 97       	sbiw	r26, 0x3d	; 61
    EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
    2250:	9d e6       	ldi	r25, 0x6D	; 109
    2252:	d4 96       	adiw	r26, 0x34	; 52
    2254:	9c 93       	st	X, r25
    // Setup port pins for TxD, XCK and LUT0OUT
    PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
    2256:	a0 e6       	ldi	r26, 0x60	; 96
    2258:	b6 e0       	ldi	r27, 0x06	; 6
    225a:	50 96       	adiw	r26, 0x10	; 16
    225c:	1c 92       	st	X, r1
    225e:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
    2260:	51 96       	adiw	r26, 0x11	; 17
    2262:	8c 93       	st	X, r24
    2264:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	53 96       	adiw	r26, 0x13	; 19
    226a:	8c 93       	st	X, r24
    226c:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
    226e:	9b e0       	ldi	r25, 0x0B	; 11
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	9c 93       	st	X, r25
	

    // Setup Event channel 0 to TxD (async)
    EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN3_gc;
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	b1 e0       	ldi	r27, 0x01	; 1
    2278:	9b e6       	ldi	r25, 0x6B	; 107
    227a:	9c 93       	st	X, r25
    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    227c:	18 96       	adiw	r26, 0x08	; 8
    227e:	1c 92       	st	X, r1
    2280:	18 97       	sbiw	r26, 0x08	; 8
    // Setup Event channel 6 to XCK rising edge
    EVSYS.CH6MUX = EVSYS_CHMUX_PORTD_PIN1_gc;
    2282:	99 e6       	ldi	r25, 0x69	; 105
    2284:	16 96       	adiw	r26, 0x06	; 6
    2286:	9c 93       	st	X, r25
    2288:	16 97       	sbiw	r26, 0x06	; 6
    EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    228a:	1e 96       	adiw	r26, 0x0e	; 14
    228c:	1c 92       	st	X, r1

    // Setup USART in master SPI mode 1, MSB first
    USARTD0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
    228e:	93 e1       	ldi	r25, 0x13	; 19
    2290:	96 83       	std	Z+6, r25	; 0x06
    USARTD0.BAUDCTRLB = 0;
    2292:	17 82       	std	Z+7, r1	; 0x07
    USARTD0.CTRLA = 0;// USART_RXSINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc;
    2294:	12 82       	std	Z+2, r1	; 0x02
    USARTD0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
    2296:	92 ec       	ldi	r25, 0xC2	; 194
    2298:	94 83       	std	Z+4, r25	; 0x04
    USARTD0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
    229a:	15 82       	std	Z+5, r1	; 0x05
    USARTD0.CTRLB = USART_TXEN_bm;
    229c:	98 e0       	ldi	r25, 0x08	; 8
    229e:	93 83       	std	Z+3, r25	; 0x03

    // Setup XCL BTC0 timer to 1shot pwm generation
    XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
    22a0:	e0 e6       	ldi	r30, 0x60	; 96
    22a2:	f4 e0       	ldi	r31, 0x04	; 4
    22a4:	91 e1       	ldi	r25, 0x11	; 17
    22a6:	94 83       	std	Z+4, r25	; 0x04
    XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
    22a8:	85 83       	std	Z+5, r24	; 0x05
    XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
    22aa:	8e e9       	ldi	r24, 0x9E	; 158
    22ac:	86 83       	std	Z+6, r24	; 0x06
    XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
    22ae:	86 e1       	ldi	r24, 0x16	; 22
    22b0:	86 87       	std	Z+14, r24	; 0x0e
    XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
    22b2:	8d e0       	ldi	r24, 0x0D	; 13
    22b4:	84 87       	std	Z+12, r24	; 0x0c

    // Setup XCL LUT
    XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PD_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
    22b6:	84 e5       	ldi	r24, 0x54	; 84
    22b8:	80 83       	st	Z, r24
    XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
    22ba:	80 e5       	ldi	r24, 0x50	; 80
    22bc:	81 83       	std	Z+1, r24	; 0x01
    XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLYCONF_DISABLE_gc;      // Async inputs, no delay
    22be:	80 e4       	ldi	r24, 0x40	; 64
    22c0:	82 83       	std	Z+2, r24	; 0x02
    XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
    22c2:	80 ea       	ldi	r24, 0xA0	; 160
    22c4:	83 83       	std	Z+3, r24	; 0x03
    22c6:	08 95       	ret

000022c8 <ws2812drv_start_transfer>:
}


void ws2812drv_start_transfer(ws2812drv_led_t *p, uint16_t cnt)
{
    EDMA.CH2.ADDR = (uint16_t)p;
    22c8:	e0 e0       	ldi	r30, 0x00	; 0
    22ca:	f1 e0       	ldi	r31, 0x01	; 1
    22cc:	80 af       	std	Z+56, r24	; 0x38
    22ce:	91 af       	std	Z+57, r25	; 0x39
    EDMA.CH2.TRFCNT = cnt * sizeof(ws2812drv_led_t);
    22d0:	cb 01       	movw	r24, r22
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	68 0f       	add	r22, r24
    22d8:	79 1f       	adc	r23, r25
    22da:	66 ab       	std	Z+54, r22	; 0x36
    22dc:	77 ab       	std	Z+55, r23	; 0x37
    EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
    22de:	84 e8       	ldi	r24, 0x84	; 132
    22e0:	80 ab       	std	Z+48, r24	; 0x30
    22e2:	08 95       	ret

000022e4 <__divmodhi4>:
    22e4:	97 fb       	bst	r25, 7
    22e6:	07 2e       	mov	r0, r23
    22e8:	16 f4       	brtc	.+4      	; 0x22ee <__divmodhi4+0xa>
    22ea:	00 94       	com	r0
    22ec:	07 d0       	rcall	.+14     	; 0x22fc <__divmodhi4_neg1>
    22ee:	77 fd       	sbrc	r23, 7
    22f0:	09 d0       	rcall	.+18     	; 0x2304 <__divmodhi4_neg2>
    22f2:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodhi4>
    22f6:	07 fc       	sbrc	r0, 7
    22f8:	05 d0       	rcall	.+10     	; 0x2304 <__divmodhi4_neg2>
    22fa:	3e f4       	brtc	.+14     	; 0x230a <__divmodhi4_exit>

000022fc <__divmodhi4_neg1>:
    22fc:	90 95       	com	r25
    22fe:	81 95       	neg	r24
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	08 95       	ret

00002304 <__divmodhi4_neg2>:
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255

0000230a <__divmodhi4_exit>:
    230a:	08 95       	ret

0000230c <__udivmodhi4>:
    230c:	aa 1b       	sub	r26, r26
    230e:	bb 1b       	sub	r27, r27
    2310:	51 e1       	ldi	r21, 0x11	; 17
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <__udivmodhi4_ep>

00002314 <__udivmodhi4_loop>:
    2314:	aa 1f       	adc	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	a6 17       	cp	r26, r22
    231a:	b7 07       	cpc	r27, r23
    231c:	10 f0       	brcs	.+4      	; 0x2322 <__udivmodhi4_ep>
    231e:	a6 1b       	sub	r26, r22
    2320:	b7 0b       	sbc	r27, r23

00002322 <__udivmodhi4_ep>:
    2322:	88 1f       	adc	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	5a 95       	dec	r21
    2328:	a9 f7       	brne	.-22     	; 0x2314 <__udivmodhi4_loop>
    232a:	80 95       	com	r24
    232c:	90 95       	com	r25
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	08 95       	ret

00002334 <malloc>:
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	91 05       	cpc	r25, r1
    2340:	10 f4       	brcc	.+4      	; 0x2346 <malloc+0x12>
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <__flp>
    234a:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <__flp+0x1>
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	30 97       	sbiw	r30, 0x00	; 0
    2358:	19 f1       	breq	.+70     	; 0x23a0 <malloc+0x6c>
    235a:	40 81       	ld	r20, Z
    235c:	51 81       	ldd	r21, Z+1	; 0x01
    235e:	02 81       	ldd	r16, Z+2	; 0x02
    2360:	13 81       	ldd	r17, Z+3	; 0x03
    2362:	48 17       	cp	r20, r24
    2364:	59 07       	cpc	r21, r25
    2366:	c8 f0       	brcs	.+50     	; 0x239a <malloc+0x66>
    2368:	84 17       	cp	r24, r20
    236a:	95 07       	cpc	r25, r21
    236c:	69 f4       	brne	.+26     	; 0x2388 <malloc+0x54>
    236e:	10 97       	sbiw	r26, 0x00	; 0
    2370:	31 f0       	breq	.+12     	; 0x237e <malloc+0x4a>
    2372:	12 96       	adiw	r26, 0x02	; 2
    2374:	0c 93       	st	X, r16
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	13 96       	adiw	r26, 0x03	; 3
    237a:	1c 93       	st	X, r17
    237c:	27 c0       	rjmp	.+78     	; 0x23cc <malloc+0x98>
    237e:	00 93 9c 22 	sts	0x229C, r16	; 0x80229c <__flp>
    2382:	10 93 9d 22 	sts	0x229D, r17	; 0x80229d <__flp+0x1>
    2386:	22 c0       	rjmp	.+68     	; 0x23cc <malloc+0x98>
    2388:	21 15       	cp	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	19 f0       	breq	.+6      	; 0x2394 <malloc+0x60>
    238e:	42 17       	cp	r20, r18
    2390:	53 07       	cpc	r21, r19
    2392:	18 f4       	brcc	.+6      	; 0x239a <malloc+0x66>
    2394:	9a 01       	movw	r18, r20
    2396:	bd 01       	movw	r22, r26
    2398:	ef 01       	movw	r28, r30
    239a:	df 01       	movw	r26, r30
    239c:	f8 01       	movw	r30, r16
    239e:	db cf       	rjmp	.-74     	; 0x2356 <malloc+0x22>
    23a0:	21 15       	cp	r18, r1
    23a2:	31 05       	cpc	r19, r1
    23a4:	f9 f0       	breq	.+62     	; 0x23e4 <malloc+0xb0>
    23a6:	28 1b       	sub	r18, r24
    23a8:	39 0b       	sbc	r19, r25
    23aa:	24 30       	cpi	r18, 0x04	; 4
    23ac:	31 05       	cpc	r19, r1
    23ae:	80 f4       	brcc	.+32     	; 0x23d0 <malloc+0x9c>
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	9b 81       	ldd	r25, Y+3	; 0x03
    23b4:	61 15       	cp	r22, r1
    23b6:	71 05       	cpc	r23, r1
    23b8:	21 f0       	breq	.+8      	; 0x23c2 <malloc+0x8e>
    23ba:	fb 01       	movw	r30, r22
    23bc:	82 83       	std	Z+2, r24	; 0x02
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <malloc+0x96>
    23c2:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <__flp>
    23c6:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <__flp+0x1>
    23ca:	fe 01       	movw	r30, r28
    23cc:	32 96       	adiw	r30, 0x02	; 2
    23ce:	44 c0       	rjmp	.+136    	; 0x2458 <malloc+0x124>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e2 0f       	add	r30, r18
    23d4:	f3 1f       	adc	r31, r19
    23d6:	81 93       	st	Z+, r24
    23d8:	91 93       	st	Z+, r25
    23da:	22 50       	subi	r18, 0x02	; 2
    23dc:	31 09       	sbc	r19, r1
    23de:	28 83       	st	Y, r18
    23e0:	39 83       	std	Y+1, r19	; 0x01
    23e2:	3a c0       	rjmp	.+116    	; 0x2458 <malloc+0x124>
    23e4:	20 91 9a 22 	lds	r18, 0x229A	; 0x80229a <__brkval>
    23e8:	30 91 9b 22 	lds	r19, 0x229B	; 0x80229b <__brkval+0x1>
    23ec:	23 2b       	or	r18, r19
    23ee:	41 f4       	brne	.+16     	; 0x2400 <malloc+0xcc>
    23f0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    23f4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    23f8:	20 93 9a 22 	sts	0x229A, r18	; 0x80229a <__brkval>
    23fc:	30 93 9b 22 	sts	0x229B, r19	; 0x80229b <__brkval+0x1>
    2400:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2404:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2408:	21 15       	cp	r18, r1
    240a:	31 05       	cpc	r19, r1
    240c:	41 f4       	brne	.+16     	; 0x241e <malloc+0xea>
    240e:	2d b7       	in	r18, 0x3d	; 61
    2410:	3e b7       	in	r19, 0x3e	; 62
    2412:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2416:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    241a:	24 1b       	sub	r18, r20
    241c:	35 0b       	sbc	r19, r21
    241e:	e0 91 9a 22 	lds	r30, 0x229A	; 0x80229a <__brkval>
    2422:	f0 91 9b 22 	lds	r31, 0x229B	; 0x80229b <__brkval+0x1>
    2426:	e2 17       	cp	r30, r18
    2428:	f3 07       	cpc	r31, r19
    242a:	a0 f4       	brcc	.+40     	; 0x2454 <malloc+0x120>
    242c:	2e 1b       	sub	r18, r30
    242e:	3f 0b       	sbc	r19, r31
    2430:	28 17       	cp	r18, r24
    2432:	39 07       	cpc	r19, r25
    2434:	78 f0       	brcs	.+30     	; 0x2454 <malloc+0x120>
    2436:	ac 01       	movw	r20, r24
    2438:	4e 5f       	subi	r20, 0xFE	; 254
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	24 17       	cp	r18, r20
    243e:	35 07       	cpc	r19, r21
    2440:	48 f0       	brcs	.+18     	; 0x2454 <malloc+0x120>
    2442:	4e 0f       	add	r20, r30
    2444:	5f 1f       	adc	r21, r31
    2446:	40 93 9a 22 	sts	0x229A, r20	; 0x80229a <__brkval>
    244a:	50 93 9b 22 	sts	0x229B, r21	; 0x80229b <__brkval+0x1>
    244e:	81 93       	st	Z+, r24
    2450:	91 93       	st	Z+, r25
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <malloc+0x124>
    2454:	e0 e0       	ldi	r30, 0x00	; 0
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	cf 01       	movw	r24, r30
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	08 95       	ret

00002464 <free>:
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f4       	brne	.+2      	; 0x246e <free+0xa>
    246c:	81 c0       	rjmp	.+258    	; 0x2570 <free+0x10c>
    246e:	fc 01       	movw	r30, r24
    2470:	32 97       	sbiw	r30, 0x02	; 2
    2472:	12 82       	std	Z+2, r1	; 0x02
    2474:	13 82       	std	Z+3, r1	; 0x03
    2476:	a0 91 9c 22 	lds	r26, 0x229C	; 0x80229c <__flp>
    247a:	b0 91 9d 22 	lds	r27, 0x229D	; 0x80229d <__flp+0x1>
    247e:	10 97       	sbiw	r26, 0x00	; 0
    2480:	81 f4       	brne	.+32     	; 0x24a2 <free+0x3e>
    2482:	20 81       	ld	r18, Z
    2484:	31 81       	ldd	r19, Z+1	; 0x01
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	20 91 9a 22 	lds	r18, 0x229A	; 0x80229a <__brkval>
    248e:	30 91 9b 22 	lds	r19, 0x229B	; 0x80229b <__brkval+0x1>
    2492:	28 17       	cp	r18, r24
    2494:	39 07       	cpc	r19, r25
    2496:	51 f5       	brne	.+84     	; 0x24ec <free+0x88>
    2498:	e0 93 9a 22 	sts	0x229A, r30	; 0x80229a <__brkval>
    249c:	f0 93 9b 22 	sts	0x229B, r31	; 0x80229b <__brkval+0x1>
    24a0:	67 c0       	rjmp	.+206    	; 0x2570 <free+0x10c>
    24a2:	ed 01       	movw	r28, r26
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	ce 17       	cp	r28, r30
    24aa:	df 07       	cpc	r29, r31
    24ac:	40 f4       	brcc	.+16     	; 0x24be <free+0x5a>
    24ae:	4a 81       	ldd	r20, Y+2	; 0x02
    24b0:	5b 81       	ldd	r21, Y+3	; 0x03
    24b2:	9e 01       	movw	r18, r28
    24b4:	41 15       	cp	r20, r1
    24b6:	51 05       	cpc	r21, r1
    24b8:	f1 f0       	breq	.+60     	; 0x24f6 <free+0x92>
    24ba:	ea 01       	movw	r28, r20
    24bc:	f5 cf       	rjmp	.-22     	; 0x24a8 <free+0x44>
    24be:	c2 83       	std	Z+2, r28	; 0x02
    24c0:	d3 83       	std	Z+3, r29	; 0x03
    24c2:	40 81       	ld	r20, Z
    24c4:	51 81       	ldd	r21, Z+1	; 0x01
    24c6:	84 0f       	add	r24, r20
    24c8:	95 1f       	adc	r25, r21
    24ca:	c8 17       	cp	r28, r24
    24cc:	d9 07       	cpc	r29, r25
    24ce:	59 f4       	brne	.+22     	; 0x24e6 <free+0x82>
    24d0:	88 81       	ld	r24, Y
    24d2:	99 81       	ldd	r25, Y+1	; 0x01
    24d4:	84 0f       	add	r24, r20
    24d6:	95 1f       	adc	r25, r21
    24d8:	02 96       	adiw	r24, 0x02	; 2
    24da:	80 83       	st	Z, r24
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	82 83       	std	Z+2, r24	; 0x02
    24e4:	93 83       	std	Z+3, r25	; 0x03
    24e6:	21 15       	cp	r18, r1
    24e8:	31 05       	cpc	r19, r1
    24ea:	29 f4       	brne	.+10     	; 0x24f6 <free+0x92>
    24ec:	e0 93 9c 22 	sts	0x229C, r30	; 0x80229c <__flp>
    24f0:	f0 93 9d 22 	sts	0x229D, r31	; 0x80229d <__flp+0x1>
    24f4:	3d c0       	rjmp	.+122    	; 0x2570 <free+0x10c>
    24f6:	e9 01       	movw	r28, r18
    24f8:	ea 83       	std	Y+2, r30	; 0x02
    24fa:	fb 83       	std	Y+3, r31	; 0x03
    24fc:	49 91       	ld	r20, Y+
    24fe:	59 91       	ld	r21, Y+
    2500:	c4 0f       	add	r28, r20
    2502:	d5 1f       	adc	r29, r21
    2504:	ec 17       	cp	r30, r28
    2506:	fd 07       	cpc	r31, r29
    2508:	61 f4       	brne	.+24     	; 0x2522 <free+0xbe>
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	84 0f       	add	r24, r20
    2510:	95 1f       	adc	r25, r21
    2512:	02 96       	adiw	r24, 0x02	; 2
    2514:	e9 01       	movw	r28, r18
    2516:	88 83       	st	Y, r24
    2518:	99 83       	std	Y+1, r25	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	e0 e0       	ldi	r30, 0x00	; 0
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	12 96       	adiw	r26, 0x02	; 2
    2528:	8d 91       	ld	r24, X+
    252a:	9c 91       	ld	r25, X
    252c:	13 97       	sbiw	r26, 0x03	; 3
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	19 f0       	breq	.+6      	; 0x2538 <free+0xd4>
    2532:	fd 01       	movw	r30, r26
    2534:	dc 01       	movw	r26, r24
    2536:	f7 cf       	rjmp	.-18     	; 0x2526 <free+0xc2>
    2538:	8d 91       	ld	r24, X+
    253a:	9c 91       	ld	r25, X
    253c:	11 97       	sbiw	r26, 0x01	; 1
    253e:	9d 01       	movw	r18, r26
    2540:	2e 5f       	subi	r18, 0xFE	; 254
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	82 0f       	add	r24, r18
    2546:	93 1f       	adc	r25, r19
    2548:	20 91 9a 22 	lds	r18, 0x229A	; 0x80229a <__brkval>
    254c:	30 91 9b 22 	lds	r19, 0x229B	; 0x80229b <__brkval+0x1>
    2550:	28 17       	cp	r18, r24
    2552:	39 07       	cpc	r19, r25
    2554:	69 f4       	brne	.+26     	; 0x2570 <free+0x10c>
    2556:	30 97       	sbiw	r30, 0x00	; 0
    2558:	29 f4       	brne	.+10     	; 0x2564 <free+0x100>
    255a:	10 92 9c 22 	sts	0x229C, r1	; 0x80229c <__flp>
    255e:	10 92 9d 22 	sts	0x229D, r1	; 0x80229d <__flp+0x1>
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <free+0x104>
    2564:	12 82       	std	Z+2, r1	; 0x02
    2566:	13 82       	std	Z+3, r1	; 0x03
    2568:	a0 93 9a 22 	sts	0x229A, r26	; 0x80229a <__brkval>
    256c:	b0 93 9b 22 	sts	0x229B, r27	; 0x80229b <__brkval+0x1>
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <do_rand>:
    2576:	8f 92       	push	r8
    2578:	9f 92       	push	r9
    257a:	af 92       	push	r10
    257c:	bf 92       	push	r11
    257e:	cf 92       	push	r12
    2580:	df 92       	push	r13
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	ec 01       	movw	r28, r24
    258c:	68 81       	ld	r22, Y
    258e:	79 81       	ldd	r23, Y+1	; 0x01
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	61 15       	cp	r22, r1
    2596:	71 05       	cpc	r23, r1
    2598:	81 05       	cpc	r24, r1
    259a:	91 05       	cpc	r25, r1
    259c:	21 f4       	brne	.+8      	; 0x25a6 <do_rand+0x30>
    259e:	64 e2       	ldi	r22, 0x24	; 36
    25a0:	79 ed       	ldi	r23, 0xD9	; 217
    25a2:	8b e5       	ldi	r24, 0x5B	; 91
    25a4:	97 e0       	ldi	r25, 0x07	; 7
    25a6:	2d e1       	ldi	r18, 0x1D	; 29
    25a8:	33 ef       	ldi	r19, 0xF3	; 243
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	0e 94 35 13 	call	0x266a	; 0x266a <__divmodsi4>
    25b2:	49 01       	movw	r8, r18
    25b4:	5a 01       	movw	r10, r20
    25b6:	9b 01       	movw	r18, r22
    25b8:	ac 01       	movw	r20, r24
    25ba:	a7 ea       	ldi	r26, 0xA7	; 167
    25bc:	b1 e4       	ldi	r27, 0x41	; 65
    25be:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__muluhisi3>
    25c2:	6b 01       	movw	r12, r22
    25c4:	7c 01       	movw	r14, r24
    25c6:	ac ee       	ldi	r26, 0xEC	; 236
    25c8:	b4 ef       	ldi	r27, 0xF4	; 244
    25ca:	a5 01       	movw	r20, r10
    25cc:	94 01       	movw	r18, r8
    25ce:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__mulohisi3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8c 0d       	add	r24, r12
    25d8:	9d 1d       	adc	r25, r13
    25da:	ae 1d       	adc	r26, r14
    25dc:	bf 1d       	adc	r27, r15
    25de:	b7 ff       	sbrs	r27, 7
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <do_rand+0x72>
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	a1 09       	sbc	r26, r1
    25e6:	b0 48       	sbci	r27, 0x80	; 128
    25e8:	88 83       	st	Y, r24
    25ea:	99 83       	std	Y+1, r25	; 0x01
    25ec:	aa 83       	std	Y+2, r26	; 0x02
    25ee:	bb 83       	std	Y+3, r27	; 0x03
    25f0:	9f 77       	andi	r25, 0x7F	; 127
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	df 90       	pop	r13
    25fc:	cf 90       	pop	r12
    25fe:	bf 90       	pop	r11
    2600:	af 90       	pop	r10
    2602:	9f 90       	pop	r9
    2604:	8f 90       	pop	r8
    2606:	08 95       	ret

00002608 <rand_r>:
    2608:	0e 94 bb 12 	call	0x2576	; 0x2576 <do_rand>
    260c:	08 95       	ret

0000260e <rand>:
    260e:	86 e0       	ldi	r24, 0x06	; 6
    2610:	90 e2       	ldi	r25, 0x20	; 32
    2612:	0e 94 bb 12 	call	0x2576	; 0x2576 <do_rand>
    2616:	08 95       	ret

00002618 <srand>:
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <next>
    2620:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <next+0x1>
    2624:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <next+0x2>
    2628:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <next+0x3>
    262c:	08 95       	ret

0000262e <eeprom_read_byte>:
    262e:	03 d0       	rcall	.+6      	; 0x2636 <eeprom_mapen>
    2630:	80 81       	ld	r24, Z
    2632:	99 27       	eor	r25, r25
    2634:	08 95       	ret

00002636 <eeprom_mapen>:
    2636:	fc 01       	movw	r30, r24
    2638:	e0 50       	subi	r30, 0x00	; 0
    263a:	f0 4f       	sbci	r31, 0xF0	; 240
    263c:	08 95       	ret

0000263e <eeprom_write_byte>:
    263e:	26 2f       	mov	r18, r22

00002640 <eeprom_write_r18>:
    2640:	af 93       	push	r26
    2642:	bf 93       	push	r27
    2644:	e0 ec       	ldi	r30, 0xC0	; 192
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	37 85       	ldd	r19, Z+15	; 0x0f
    264a:	37 fd       	sbrc	r19, 7
    264c:	fd cf       	rjmp	.-6      	; 0x2648 <eeprom_write_r18+0x8>
    264e:	dc 01       	movw	r26, r24
    2650:	a0 50       	subi	r26, 0x00	; 0
    2652:	b0 4f       	sbci	r27, 0xF0	; 240
    2654:	2c 93       	st	X, r18
    2656:	25 e3       	ldi	r18, 0x35	; 53
    2658:	22 87       	std	Z+10, r18	; 0x0a
    265a:	28 ed       	ldi	r18, 0xD8	; 216
    265c:	31 e0       	ldi	r19, 0x01	; 1
    265e:	24 bf       	out	0x34, r18	; 52
    2660:	33 87       	std	Z+11, r19	; 0x0b
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	bf 91       	pop	r27
    2666:	af 91       	pop	r26
    2668:	08 95       	ret

0000266a <__divmodsi4>:
    266a:	05 2e       	mov	r0, r21
    266c:	97 fb       	bst	r25, 7
    266e:	1e f4       	brtc	.+6      	; 0x2676 <__divmodsi4+0xc>
    2670:	00 94       	com	r0
    2672:	0e 94 4c 13 	call	0x2698	; 0x2698 <__negsi2>
    2676:	57 fd       	sbrc	r21, 7
    2678:	07 d0       	rcall	.+14     	; 0x2688 <__divmodsi4_neg2>
    267a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__udivmodsi4>
    267e:	07 fc       	sbrc	r0, 7
    2680:	03 d0       	rcall	.+6      	; 0x2688 <__divmodsi4_neg2>
    2682:	4e f4       	brtc	.+18     	; 0x2696 <__divmodsi4_exit>
    2684:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__negsi2>

00002688 <__divmodsi4_neg2>:
    2688:	50 95       	com	r21
    268a:	40 95       	com	r20
    268c:	30 95       	com	r19
    268e:	21 95       	neg	r18
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	4f 4f       	sbci	r20, 0xFF	; 255
    2694:	5f 4f       	sbci	r21, 0xFF	; 255

00002696 <__divmodsi4_exit>:
    2696:	08 95       	ret

00002698 <__negsi2>:
    2698:	90 95       	com	r25
    269a:	80 95       	com	r24
    269c:	70 95       	com	r23
    269e:	61 95       	neg	r22
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	8f 4f       	sbci	r24, 0xFF	; 255
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	08 95       	ret

000026a8 <__muluhisi3>:
    26a8:	0e 94 89 13 	call	0x2712	; 0x2712 <__umulhisi3>
    26ac:	a5 9f       	mul	r26, r21
    26ae:	90 0d       	add	r25, r0
    26b0:	b4 9f       	mul	r27, r20
    26b2:	90 0d       	add	r25, r0
    26b4:	a4 9f       	mul	r26, r20
    26b6:	80 0d       	add	r24, r0
    26b8:	91 1d       	adc	r25, r1
    26ba:	11 24       	eor	r1, r1
    26bc:	08 95       	ret

000026be <__mulshisi3>:
    26be:	b7 ff       	sbrs	r27, 7
    26c0:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__muluhisi3>

000026c4 <__mulohisi3>:
    26c4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__muluhisi3>
    26c8:	82 1b       	sub	r24, r18
    26ca:	93 0b       	sbc	r25, r19
    26cc:	08 95       	ret

000026ce <__udivmodsi4>:
    26ce:	a1 e2       	ldi	r26, 0x21	; 33
    26d0:	1a 2e       	mov	r1, r26
    26d2:	aa 1b       	sub	r26, r26
    26d4:	bb 1b       	sub	r27, r27
    26d6:	fd 01       	movw	r30, r26
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <__udivmodsi4_ep>

000026da <__udivmodsi4_loop>:
    26da:	aa 1f       	adc	r26, r26
    26dc:	bb 1f       	adc	r27, r27
    26de:	ee 1f       	adc	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	a2 17       	cp	r26, r18
    26e4:	b3 07       	cpc	r27, r19
    26e6:	e4 07       	cpc	r30, r20
    26e8:	f5 07       	cpc	r31, r21
    26ea:	20 f0       	brcs	.+8      	; 0x26f4 <__udivmodsi4_ep>
    26ec:	a2 1b       	sub	r26, r18
    26ee:	b3 0b       	sbc	r27, r19
    26f0:	e4 0b       	sbc	r30, r20
    26f2:	f5 0b       	sbc	r31, r21

000026f4 <__udivmodsi4_ep>:
    26f4:	66 1f       	adc	r22, r22
    26f6:	77 1f       	adc	r23, r23
    26f8:	88 1f       	adc	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	1a 94       	dec	r1
    26fe:	69 f7       	brne	.-38     	; 0x26da <__udivmodsi4_loop>
    2700:	60 95       	com	r22
    2702:	70 95       	com	r23
    2704:	80 95       	com	r24
    2706:	90 95       	com	r25
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	bd 01       	movw	r22, r26
    270e:	cf 01       	movw	r24, r30
    2710:	08 95       	ret

00002712 <__umulhisi3>:
    2712:	a2 9f       	mul	r26, r18
    2714:	b0 01       	movw	r22, r0
    2716:	b3 9f       	mul	r27, r19
    2718:	c0 01       	movw	r24, r0
    271a:	a3 9f       	mul	r26, r19
    271c:	70 0d       	add	r23, r0
    271e:	81 1d       	adc	r24, r1
    2720:	11 24       	eor	r1, r1
    2722:	91 1d       	adc	r25, r1
    2724:	b2 9f       	mul	r27, r18
    2726:	70 0d       	add	r23, r0
    2728:	81 1d       	adc	r24, r1
    272a:	11 24       	eor	r1, r1
    272c:	91 1d       	adc	r25, r1
    272e:	08 95       	ret

00002730 <_exit>:
    2730:	f8 94       	cli

00002732 <__stop_program>:
    2732:	ff cf       	rjmp	.-2      	; 0x2732 <__stop_program>
